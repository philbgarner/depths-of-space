{"version":3,"file":"tactics.js","mappings":"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","sources":["webpack://tactics/webpack/universalModuleDefinition","webpack://tactics/webpack/bootstrap","webpack://tactics/webpack/runtime/define property getters","webpack://tactics/webpack/runtime/hasOwnProperty shorthand","webpack://tactics/webpack/runtime/make namespace object","webpack://tactics/./src/images.js","webpack://tactics/./src/sprites.js","webpack://tactics/./src/map.js","webpack://tactics/./src/grammar.js","webpack://tactics/./src/teams.js","webpack://tactics/./src/mainScene.js","webpack://tactics/./src/input.js","webpack://tactics/./src/character.js","webpack://tactics/./src/menuScene.js","webpack://tactics/./src/main.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tactics\"] = factory();\n\telse\n\t\troot[\"tactics\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import images from './images.json'\r\n\r\nvar ctx = null\r\n\r\nfunction setContext(context) {\r\n    ctx = context\r\n}\r\n\r\nfunction getContext() {\r\n    return ctx\r\n}\r\n\r\nfunction getImage(name) {\r\n    let img = images.filter(f => f.name === name)\r\n    return img.length > 0 ? img[0].image : null\r\n}\r\n\r\nfunction getImages() {\r\n    return images\r\n}\r\n\r\nfunction drawImage(name, x, y, srcRect) {\r\n    let img = images.filter(f => f.name === name)\r\n    if (img.length > 0) {\r\n        if (srcRect) {\r\n            ctx.drawImage(img[0].image, srcRect.x, srcRect.y, srcRect.w, srcRect.h, x, y, srcRect.w, srcRect.h)\r\n        } else {\r\n            ctx.drawImage(img[0].image, x, y)\r\n        }\r\n    }\r\n}\r\n\r\nfunction loadImage(filename) {\r\n    return new Promise((resolve, reject) => {\r\n        let img = new Image()\r\n        img.onload = (e) => {\r\n            resolve(img)\r\n        }\r\n        img.onerror = (e) => {\r\n            console.error(`Failed to load file ${filename}:`, e)\r\n            reject(null)\r\n        }\r\n        let image = images.filter(f => f.filename === filename)\r\n        if (image.length > 0) {\r\n            img.src = filename\r\n        } else {\r\n            console.error(`Image definition matching filename ${filename} not found.`)\r\n            reject(null)\r\n        }\r\n    })\r\n}\r\n\r\nfunction loadAllImages() {\r\n    let promises = []\r\n    for (let i in images) {\r\n        let image = images[i]\r\n        promises.push(new Promise((resolve, reject) => loadImage(image.filename).then(r => {\r\n            image.image = r\r\n            resolve(r)\r\n        }).catch(e => console.error('Failed to load', image.filename, e))))\r\n    }\r\n    return Promise.allSettled(promises)\r\n}\r\n\r\nexport { loadAllImages, loadImage, drawImage, getImage, getImages, setContext, getContext }\r\n","import { drawImage, getImages } from './images.js'\r\nimport animations from './sprites.json'\r\n\r\nfunction lerp (start, end, amt){\r\n    return (1-amt)*start+amt*end\r\n  }\r\n  function lerpCoords (start, end, amt){\r\n    return { x: (1-amt)*start.x+amt*end.x, y: (1-amt)*start.y+amt*end.y }\r\n  }\r\n\r\nfunction removeSprite(name) {\r\n    let index = sprites.findIndex(f => f.name === name)\r\n    if (index >= 0) {\r\n        sprites[index] = undefined\r\n    }\r\n    sprites = sprites.filter(f => f !== undefined)\r\n}\r\n\r\nfunction getMsSinceMidnight(d) {\r\n    var e = new Date(d);\r\n    return d - e.setHours(0,0,0,0)\r\n    }\r\n\r\nfunction buildSprite(name, x, y, pose, onComplete) {\r\n    if (!animations[name]) {\r\n        throw new Error(`Can't build sprite, missing animation definition '${name}'.`)\r\n    }\r\n    let sprite = {\r\n        name: name,\r\n        x: x, y: y,\r\n        frames: [],\r\n        pose: pose,\r\n        framesImage: null,\r\n        currentFrame: 0,\r\n        updateDelta: 0,\r\n        play: true\r\n    }\r\n    sprite.SetAnimation = (animation, pose, onComplete) => {\r\n        sprite.animStartTime = getMsSinceMidnight(new Date())\r\n        let anim = animations[animation]\r\n        if (onComplete) {\r\n            sprite.onComplete = onComplete\r\n        }\r\n        if (anim) {\r\n            let sprPose = anim.default ? anim.default : null\r\n            sprPose = anim[pose] ? anim[pose] : sprPose\r\n            if (sprPose) {\r\n                let img = getImages().filter(f => f.name === sprPose.imageName)\r\n                if (img.length > 0) {\r\n                    sprite.frames = sprPose.frames\r\n                    sprite.currentFrame = 0\r\n                    sprite.animation = animation\r\n                    sprite.pose = pose\r\n                    sprite.framesImage = sprPose.imageName\r\n                    if (sprPose.sfx) {\r\n                        let sfx = getSfx(sprPose.sfx)\r\n                        if (sfx) {\r\n                            sfx.play()\r\n                        }\r\n                    }\r\n                } else {\r\n                    throw new Error(`Can't find pose ${pose} in ${animation}.`)\r\n                }\r\n            } else {\r\n                sprite.frames = []\r\n                sprite.currentFrame = 0\r\n                sprite.animation = ''\r\n                sprite.pose = ''\r\n            }\r\n            sprite.play = true\r\n        }\r\n    }\r\n    sprite.draw = (offsetx, offsety) => {\r\n        offsetx = offsetx ? offsetx : 0\r\n        offsety = offsety ? offsety : 0\r\n        drawImage(sprite.framesImage, sprite.x + offsetx, sprite.y + offsety, sprite.frames[sprite.currentFrame])\r\n    }\r\n    sprite.moveTo = async (x, y, speed) => {\r\n        return new Promise(async (resolve, reject) => {\r\n            let spr = sprite\r\n            let ox = spr.x\r\n            let oy = spr.y\r\n            let spd = speed\r\n            let t = 0\r\n            let move = (mx, my) => new Promise((resolve, reject) => {\r\n                let handler = () => {\r\n                    t += spd\r\n                    if (t >= 1) {\r\n                        spr.x = x\r\n                        spr.y = y\r\n                        resolve()\r\n                    } else {\r\n                        let p = lerpCoords({ x: ox, y: oy }, { x: mx, y: my }, t)\r\n                        spr.x = p.x\r\n                        spr.y = p.y\r\n                        setTimeout(handler, 16)\r\n                    }\r\n                }\r\n                setTimeout(handler, 16)\r\n            })\r\n    \r\n            await move(x, y)\r\n            resolve()\r\n        })\r\n    }\r\n    sprite.onComplete = onComplete ? onComplete : (sprite) => {}\r\n    sprite.update = (delta) => {\r\n        let sprPose = animations[sprite.animation][sprite.pose]\r\n        if (sprPose && sprite.play) {\r\n            if (sprite.updateDelta > sprPose.frameDelay) {\r\n                sprite.currentFrame++\r\n                if (sprite.currentFrame > sprite.frames.length - 1) {\r\n                    if (sprPose.repeat) {\r\n                        sprite.currentFrame = 0\r\n                        sprite.animDuration = getMsSinceMidnight(new Date()) - sprite.animStartTime\r\n                        sprite.onComplete(sprite)\r\n                    } else {\r\n                        sprite.animDuration = getMsSinceMidnight(new Date()) - sprite.animStartTime\r\n                        sprite.currentFrame--\r\n                        sprite.play = false\r\n                        sprite.onComplete(sprite)\r\n                    }\r\n                    if (sprPose.onComplete) {\r\n                        sprPose.onComplete(sprite)\r\n                    }\r\n                }\r\n                sprite.updateDelta = 0\r\n            } else {\r\n                sprite.updateDelta += delta\r\n            }\r\n        }\r\n    }\r\n    sprite.SetAnimation(name, pose)\r\n\r\n    return sprite\r\n}\r\n\r\nfunction getAnimation(animation) {\r\n    try {\r\n        return animations[animation]\r\n    } catch {}\r\n    return {}\r\n}\r\n\r\nexport { buildSprite, removeSprite, getAnimation, getMsSinceMidnight }","import { getContext, drawImage } from \"./images.js\"\r\n\r\nvar map = null\r\n\r\nvar width = 36\r\nvar height = 24\r\n\r\nvar gridSize = 24\r\nvar gridOpacity = 0.6\r\n\r\nvar startAreaWidth = 10\r\nvar startAreaHeight = 24\r\n\r\nvar camera = {\r\n    x: 0,\r\n    y: 8.5 * gridSize,\r\n    targetX: 0,\r\n    targetY: 8.5 * gridSize,\r\n}\r\n\r\nfunction triangleContains(ax, ay, bx, by, cx, cy, x, y) {\r\n\r\n    let det = (bx - ax) * (cy - ay) - (by - ay) * (cx - ax)\r\n\r\n    return  det * ((bx - ax) * (y - ay) - (by - ay) * (x - ax)) >= 0 &&\r\n            det * ((cx - bx) * (y - by) - (cy - by) * (x - bx)) >= 0 &&\r\n            det * ((ax - cx) * (y - cy) - (ay - cy) * (x - cx)) >= 0    \r\n\r\n}\r\n\r\nfunction drawMap(delta) {\r\n    let ctx = getContext()\r\n    ctx.save()\r\n\r\n    ctx.translate(-camera.x, -camera.y)\r\n\r\n    let ga = ctx.globalAlpha\r\n    ctx.globalAlpha = gridOpacity\r\n    let tiles = map.tiles.filter(f => !map.teamA.filter(a => a[0] === f[0] && a[1] === f[1]).length && !map.teamB.filter(b => f[0] === b[0] && f[1] === b[1]).length)\r\n    for (let t in tiles) {\r\n        let x = tiles[t][0] * gridSize\r\n        let y = tiles[t][1] * gridSize\r\n        drawImage('grid-white', x, y)\r\n    }\r\n\r\n    for (let t in map.teamA) {\r\n        let x = map.teamA[t][0] * gridSize\r\n        let y = map.teamA[t][1] * gridSize\r\n        drawImage('grid-yellow', x, y)\r\n    }\r\n    for (let t in map.teamB) {\r\n        let x = map.teamB[t][0] * gridSize\r\n        let y = map.teamB[t][1] * gridSize\r\n        drawImage('grid-yellow', x, y)\r\n    }\r\n    ctx.globalAlpha = ga\r\n\r\n    ctx.restore()\r\n}\r\n\r\nfunction buildMap() {\r\n    var tiles = []\r\n    var teamATiles = []\r\n    var teamBTiles = []\r\n\r\n    for (let y = 0; y < height; y++) {\r\n        for (let x = 0; x < width; x++) {\r\n            tiles.push([x, y])\r\n            \r\n            if (triangleContains(0, parseInt(height / 2) - parseInt(startAreaHeight / 2), startAreaWidth, parseInt(height / 2), 0, parseInt(height / 2) + parseInt(startAreaHeight / 2), x, y)) {\r\n                teamATiles.push([x, y])\r\n            }\r\n            if (triangleContains(width, parseInt(height / 2) - parseInt(startAreaHeight / 2), width - startAreaWidth, parseInt(height / 2), width, parseInt(height / 2) + parseInt(startAreaHeight / 2), x, y)) {\r\n                teamBTiles.push([x, y])\r\n            }\r\n        }\r\n    }\r\n    \r\n    map = {\r\n        tiles: tiles, teamA: teamATiles, teamB: teamBTiles\r\n    }\r\n    return map\r\n}\r\n\r\nexport { buildMap, drawMap }","let grammar = {}\r\n\r\nfunction randInt(min, max) {\r\n    //return Math.floor(ROT.RNG.getUniform() * (max - min + 1) + min)\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n  }\r\n\r\nfunction roll(dice) {\r\n    dice = dice.toLowerCase();\r\n    if (!dice.includes('d')) {\r\n        throw new Error('At least one term must specify the number of dice.')\r\n    } else {\r\n        let dieterm = dice.split('d')\r\n        let amt = 0\r\n        for (let times = 0; times < dieterm[0]; times++) {\r\n            amt += randInt(1, dieterm[1])\r\n        }\r\n        return amt\r\n    }\r\n}\r\n\r\n/**\r\n * The value for the key specified as the id parameter. Value is either an array of strings or a string reference to an array of strings.\r\n * @param {string} id \r\n * @returns {string|array} Returns either the value of the key matching 'id', or an empty string.\r\n */\r\nfunction get(id) {\r\n    if (!id) {\r\n        return ''\r\n    }\r\n    if (typeof id === 'string') {\r\n        id = id.replace('[*', '').replace(']', '')\r\n    }\r\n    let item = grammar[id]\r\n    if (item) {\r\n        if (typeof item === 'string') {\r\n            return item\r\n        } else if (typeof item === 'object') {\r\n            return item[randInt(0, item.length - 1)]\r\n        }\r\n    }\r\n    return id //`[not found:${id}]`\r\n}\r\n\r\n/**\r\n * Set the value for the key specified as the id parameter. Value is either an array of strings or a string reference to an array of strings.\r\n * @param {string} id \r\n * @param {string|array} value \r\n */\r\nfunction set(id, value) {\r\n    grammar[id] = value\r\n}\r\n\r\n/**\r\n * Processes any operators on the text about to be added to the sentence chain.\r\n * @param {string} txt \r\n * @param {string} operator \r\n * @returns \r\n */\r\nfunction operatorText(txt, operator) {\r\n    if (operator === 'capital') {\r\n        txt = txt.charAt(0).toUpperCase() + txt.slice(1)\r\n    }\r\n    return txt\r\n}\r\n\r\nfunction parseTokens(template, context) {\r\n    if (template.includes('[')) {\r\n        let startPos = 0\r\n        let tokenMap = []\r\n        while(template.includes('[', startPos)) {\r\n            let paramStart = template.indexOf('[', startPos)\r\n            if (paramStart > startPos) {\r\n                tokenMap.push({ start: startPos, end: paramStart, token: null, value: template.substring(startPos, paramStart) })    \r\n            }\r\n            let paramEnd = template.indexOf(']', startPos)\r\n            let token = template.substring(paramStart, paramEnd + 1)\r\n            tokenMap.push({ start: paramStart, end: paramEnd, token: token, value: null })\r\n            startPos = paramEnd + 1\r\n        }\r\n        if (startPos < template.length) {\r\n            tokenMap.push({ start: startPos, end: template.length - 1, token: null, value: template.substring(startPos, template.length)})\r\n        }\r\n        return tokenMap\r\n    } else {\r\n        return [template]\r\n    }\r\n}\r\n\r\nfunction compareOperation(property, operation, operator, value) {\r\n    if (operation === \"is\") {\r\n        if (operator === '=') {\r\n            return property === value\r\n        }\r\n    } else if (operation === \"has\") {\r\n        if (operator === \"=\") {\r\n            return property[value] !== undefined\r\n        }\r\n    } else {\r\n        if (typeof property === 'object' && [\"=\", \"!=\", \">=\", \"<=\", \"<\", \">\"].includes(operator)) {\r\n            if ([\"=\", \"!=\"].includes(operator)) {\r\n                return operator === \"=\" ? property[operation] === value : property[operation] !== value\r\n            } else if ([\">=\", \"<=\"].includes(operator)) {\r\n                return operator === \">=\" ? property[operation] >= value : property[operation] <= value\r\n            } else if ([\">\", \"<\"].includes(operator)) {\r\n                return operator === \">\" ? property[operation] > value : property[operation] < value\r\n            }            \r\n        } else if (typeof property === 'number' && [\"=\", \"!=\", \">=\", \"<=\", \"<\", \">\"].includes(operator)) {\r\n            if ([\"=\", \"!=\"].includes(operator)) {\r\n                return operator === \"=\" ? property === value : property !== value\r\n            } else if ([\">=\", \"<=\"].includes(operator)) {\r\n                return operator === \">=\" ? property >= value : property <= value\r\n            } else if ([\">\", \"<\"].includes(operator)) {\r\n                return operator === \">\" ? property > value : property < value\r\n            }            \r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction process(template, context) {\r\n    if (!template.includes('[')) {\r\n        return {\r\n            'tokenmap': {},\r\n            'sentence': template,\r\n            'sentenceHTML': template\r\n        }\r\n    }\r\n    context = context ? context : {}\r\n    let tokenMap = processTokenMap(parseTokens(template, context), context)\r\n    let sentence = ''\r\n    let sentenceHTML = ''\r\n    let map = tokenMap\r\n    for (let m in map) {\r\n        if (m > 0) {\r\n            let prev = map[m - 1]\r\n            if ((prev.token_type === 'condition' && prev.token_result) || (prev.token_type !== 'condition' && map[m].value)) {\r\n                if (map[m].token) {\r\n                    prev.value = map[m].value\r\n                    sentenceHTML += `<mark title='${m > 0 ? JSON.stringify(prev) : map[m].token}'>${map[m].value}</mark>`\r\n                    sentence += map[m].value\r\n                } else {\r\n                    sentenceHTML += map[m].value\r\n                    sentence += map[m].value\r\n                }\r\n            }\r\n        } else {\r\n            if (map[m].token && map[m].value) {\r\n                sentenceHTML += `<mark title='${map[m].token}'>${map[m].value}</mark>`\r\n                sentence += map[m].value\r\n            } else if (map[m].value) {\r\n                    sentenceHTML += map[m].value\r\n                    sentence += map[m].value\r\n            }\r\n        }\r\n    }\r\n    if (!sentence.includes('[')) {\r\n        return {\r\n            'tokenmap': tokenMap,\r\n            'sentence': sentence,\r\n            'sentenceHTML': sentenceHTML\r\n        }\r\n    } else {\r\n        return process(sentence, context)\r\n    }\r\n}\r\n\r\nfunction processTokenMap(tokenMap, context) {\r\n    let activeConditional = -1\r\n    for (let t in tokenMap) {\r\n        if (tokenMap[t].value === null) {\r\n            if (tokenMap[t].token) {\r\n                if (tokenMap[t].token.substring(0, 2) === '[*') {\r\n                    tokenMap[t].token_type = 'lookup'\r\n                    let id = tokenMap[t].token.substring(2, tokenMap[t].token.length - 1)\r\n                    if (!id.includes('[')) {\r\n                        tokenMap[t].value = get(id)\r\n                    }\r\n                } else if (tokenMap[t].token.substring(0, 2) === '[?') {\r\n                    tokenMap[t].token_type = 'condition'\r\n                    activeConditional = t\r\n                    let id = tokenMap[t].token.substring(2, tokenMap[t].token.length - 1)\r\n                    let paths = id.split('.')\r\n\r\n                    let room = null\r\n                    if (context.room) {\r\n                        room = rooms.getRoom(context.room)\r\n                    }\r\n\r\n                    if (paths.length === 3) {\r\n                        let contextName = paths[0]\r\n                        let contextProperty = paths[1]\r\n                        let comparison = paths[2]\r\n\r\n                        if (contextName === 'room' && room) {\r\n                            if (room[contextProperty]) {\r\n                                let comp = comparison.search(/[(=)(!=)(<)(>)(>=)(<=)]/)\r\n                                if (comp >= 0) {\r\n                                    let operation = comparison.substring(0, comp)\r\n                                    let opEnd = comparison.slice(comp).search(/[A-Za-z0-9_-]/)\r\n                                    if (opEnd < 0) {\r\n                                        opEnd = 1\r\n                                    }\r\n                                    let operator = comparison.substring(comp, comp + opEnd)\r\n                                    let value = comparison.substring(comp + 1, comparison.length)\r\n                                    tokenMap[t].token_operation = operation\r\n                                    tokenMap[t].token_operator = operator\r\n                                    tokenMap[t].token_compare_to = value\r\n                                    tokenMap[t].token_property = room[contextProperty]\r\n                                    tokenMap[t].token_result = compareOperation(room[contextProperty], operation, operator, value)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (paths.length === 1) {\r\n                        // If there's no path, try a die roll notation.\r\n                        let comparison = paths[0]\r\n                        let comp = comparison.search(/[(=)(!=)(<)(>)(>=)(<=)]/)\r\n                        if (comp >= 0) {\r\n                            let operation = comparison.substring(0, comp)\r\n                            let opEnd = comparison.slice(comp).search(/[A-Za-z0-9_-]/)\r\n                            if (opEnd < 0) {\r\n                                opEnd = 1\r\n                            }\r\n                            let operator = comparison.substring(comp, comp + opEnd)\r\n                            let value = parseInt(comparison.substring(comp + 1, comparison.length))\r\n                            let rl = roll(operation)\r\n                            tokenMap[t].die_roll = rl\r\n                            tokenMap[t].token_operation = operation\r\n                            tokenMap[t].token_operator = operator\r\n                            tokenMap[t].token_compare_to = value\r\n                            tokenMap[t].token_property = rl\r\n                            tokenMap[t].token_result = compareOperation(rl, operation, operator, value)\r\n                        }\r\n                    }\r\n                } else if (tokenMap[t].token.toLowerCase() === \"[else]\") {\r\n                    if (activeConditional >= 0) {\r\n                        tokenMap[t].token_operation = tokenMap[activeConditional].token_operation\r\n                        tokenMap[t].token_operator = tokenMap[activeConditional].token_operator\r\n                        tokenMap[t].token_compare_to = tokenMap[activeConditional].token_compare_to\r\n                        tokenMap[t].token_property = tokenMap[activeConditional].token_property\r\n                        tokenMap[t].token_type = 'condition'\r\n                        tokenMap[t].token_result = !compareOperation(tokenMap[t].token_property, tokenMap[t].token_operation, tokenMap[t].token_operator, tokenMap[t].token_compare_to)\r\n                        activeConditional = -1\r\n                    }\r\n                } else if (tokenMap[t].token.substring(0, 1) === '[') {\r\n                    tokenMap[t].value = tokenMap[t].token.replace('[', '').replace(']', '')\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return tokenMap\r\n}\r\n\r\n/**\r\n * Get the generated text of the specified template text.\r\n * @param {string} template Template text to generate from the dictionary.\r\n * @param {object} context JSON containing the list of contexts and their objects to execute under.\r\n * @returns {string} Evaluated text result.\r\n */\r\nfunction text(template, context) {\r\n    let sentence = []\r\n    let startPos = 0\r\n    // If there are any tokens to process in this template.\r\n    if (template.includes('[')) {\r\n        let paramStart = 0\r\n        let paramEnd = template.indexOf('[')\r\n        while(template.includes('[', startPos)) {\r\n            paramStart = template.indexOf('[', startPos)\r\n            paramEnd = template.indexOf(']', startPos)\r\n            //sentence.push(template.substring(startPos, paramStart))\r\n            let id = template.substring(paramStart, paramEnd + 1)\r\n            \r\n            let operator\r\n            if (id.includes('.')) {\r\n                let parts = id.split('.')\r\n                id = parts[0] + ']'\r\n                operator = parts[1].toLowerCase().substring(0, parts[1].length - 1)\r\n            }\r\n            if (id !== template) {\r\n                let txt = text(id)\r\n                sentence.push(txt)\r\n            } else {\r\n                let txt = get(id)\r\n                sentence.push(txt)\r\n            }\r\n            startPos = paramEnd + 1\r\n        }\r\n        if (startPos < template.length) {\r\n            sentence.push(template.substring(startPos, template.length))\r\n        }\r\n    } else {\r\n        let id = get(template)\r\n        return id ? id : `[not found:${id}]` \r\n    }\r\n\r\n    let ret = sentence.reduce((prev, next) => prev + next)\r\n    return ret.includes('[*') ? text(ret) : ret\r\n}\r\n\r\n/**\r\n * Sets the whole dictionary object to the json parameter.\r\n * @param {object} json \r\n */\r\nfunction setDictionary(json) {\r\n    grammar = json\r\n}\r\n\r\n/**\r\n * Loads the dictionary from a file buffer.\r\n * @param {buffer} buffer \r\n */\r\nfunction loadDictionary(buffer) {\r\n    grammar = JSON.parse(buffer.toString())\r\n}\r\n\r\nexport { loadDictionary, setDictionary, text, set, get, roll, randInt }","import { roll } from './grammar.js'\r\n\r\nvar teams = []\r\nvar teamIndex = 0\r\nvar phases = ['positioning', 'movement', 'active', 'siege', 'upkeep']\r\nvar phase = 0\r\n\r\nfunction addTeam(name, turnOrderRollDice) {\r\n    teams.push({\r\n        name: name,\r\n        color: '#ccccccff',\r\n        order: roll(turnOrderRollDice)\r\n    })\r\n    teams.sort((a, b) => b.order - a.order)\r\n}\r\n\r\nfunction currentTeam() {\r\n    return teams[teamIndex]\r\n}\r\n\r\nfunction currentPhase() {\r\n    return phases[phase]\r\n}\r\n\r\nfunction nextPhase() {\r\n    phase++\r\n    phase = phase >= phases.length ? 0 : phase\r\n}\r\n\r\nexport { addTeam, currentTeam, currentPhase, nextPhase }","import { getContext } from \"./images.js\"\r\nimport { drawMap } from \"./map.js\"\r\nimport { currentPhase, currentTeam } from \"./teams.js\"\r\n\r\nlet imu = null\r\n\r\nlet ctx = null\r\n\r\nlet tooltip = ''\r\n\r\nfunction drawFrame(delta) {\r\n    if (!ctx) {\r\n        ctx = getContext()\r\n    }\r\n    ctx.clearRect(0, 0, 320, 200)\r\n\r\n    /*ctx.save()\r\n    ctx.translate(120 - Player().x * TileSizes().x, 80 - Player().y * TileSizes().y)\r\n    DrawFOV(Player())\r\n    Player().draw()\r\n    let spriteObjs = getSpriteObjects()\r\n    for (let index in spriteObjs) {\r\n        spriteObjs[index].update(16)\r\n        spriteObjs[index].draw()\r\n    }\r\n\r\n    ctx.restore()*/\r\n\r\n    drawMap(delta)\r\n\r\n    drawUI(delta)\r\n}\r\n\r\nfunction drawUI(delta) {\r\n    if (!imu) {\r\n        imu = new imui.ImUI(ctx.canvas)\r\n        imu.font = font\r\n\r\n\r\n        imu.onUpdate = (ui) => {\r\n            let phase = currentPhase().slice(0, 1).toUpperCase() + currentPhase().slice(1)\r\n            ui.Element({ id: 'lblPhase', text: `${phase}: ${currentTeam().name}`, rect: { x: 10, y: 3, w: 300, h: 9 }, color: '#f1f100ff', color: '#f1f100ff', bgcolor: '#000000cc'})\r\n\r\n            ui.Element({ id: 'lblTooltip', text: tooltip, rect: { x: 0, y: 0, w: 240, h: 10 }, color: '#f1f1f1ff', highlight: '#f1f1f1ff', bgcolor: '#cccccc00' })\r\n        }\r\n    }\r\n    imu.Draw()\r\n}\r\n\r\nexport { drawFrame }","import maps from './keymapping.json'\r\n\r\nvar listening = false\r\n\r\nfunction handlerPressed (button) {\r\n  setState(button, true)\r\n}\r\n\r\nfunction handlerReleased (button) {\r\n  setState(button, false)\r\n  if (callbacks[button]) {\r\n    callbacks[button](button)\r\n  }\r\n}\r\n\r\nfunction GetInputKeys(inputType) {\r\n  inputType = inputType.toLowerCase()\r\n  return Object.keys(maps[inputType])\r\n}\r\n\r\nfunction GetInputValue(inputType, key) {\r\n  inputType = inputType.toLowerCase()\r\n  return maps[inputType][key]\r\n}\r\n\r\nvar inputState = {}\r\nvar callbacks = {}\r\n\r\nvar enabled = [ 'keyboard', 'gamepad' ]\r\n\r\nfunction setState(button, value) {\r\n  inputState[button] = value\r\n}\r\n\r\nfunction getState(button) {\r\n  if (!listening) {\r\n    return false\r\n  }\r\n  return inputState[button] ? inputState[button] : false\r\n}\r\n\r\nfunction listenerKeyDown(e) {\r\n  if (!listening) {\r\n    return\r\n  }\r\n  let inputs = Object.keys(maps.keyboard)\r\n  for (let i in inputs) {\r\n    if (e.key === maps.keyboard[inputs[i]]) {\r\n      handlerPressed(inputs[i])\r\n    }\r\n  }\r\n}\r\n\r\nfunction listenerKeyUp(e) {\r\n  if (!listening) {\r\n    return\r\n  }\r\n  let inputs = Object.keys(maps.keyboard)\r\n  for (let i in inputs) {\r\n    if (e.key === maps.keyboard[inputs[i]]) {\r\n      handlerReleased(inputs[i])\r\n    }\r\n  }\r\n}\r\n\r\nfunction init() {\r\n  inputState = {}\r\n  callbacks = {}\r\n  if (enabled.includes('keyboard')) {\r\n    window.removeEventListener('keydown', listenerKeyDown)\r\n    window.removeEventListener('keyup', listenerKeyUp)\r\n    window.addEventListener('keydown', listenerKeyDown)\r\n    window.addEventListener(\"keyup\", listenerKeyUp)\r\n  }\r\n  if (enabled.includes('gamepad')) {\r\n    gameControl.on('connect', function(gamepad) {\r\n      let inputs = Object.keys(maps.gamepad)\r\n      for (let i in inputs) {\r\n        gamepad.on(maps.gamepad[inputs[i]], () => {\r\n          \r\n        }).after(maps.gamepad[inputs[i]], () => {\r\n          handlerReleased(inputs[i])\r\n        })\r\n      }\r\n    })\r\n  }\r\n  listening = false\r\n}\r\n\r\ninit()\r\n\r\nvar input = {\r\n  listen: () => {\r\n    listening = true\r\n  },\r\n  unlisten: () => {\r\n    listening = false\r\n  },\r\n  released: (button, method) => {\r\n    callbacks[button] = method\r\n  }\r\n}\r\n\r\nexport default input\r\nexport { GetInputKeys, GetInputValue }","import { Pipeline } from './pipeline.js'\r\n\r\nimport characters from \"./characters.json\"\r\n\r\nclass Character {\r\n    constructor(name) {\r\n        // data property holds base class data from json\r\n        try {\r\n            this.data = characters.filter(f => f.name === name)[0]\r\n            this.data.maxHp = this.data.hp\r\n            this.name = this.data.name\r\n            this.equipment = []\r\n        } catch {\r\n            this.data = {}\r\n            console.error(`Could not locate template for ${name}.`)\r\n        }\r\n\r\n        // effectModifiers property holds active effect modifiers.\r\n        this.effectModifiers = {}\r\n\r\n        // Active effect modifiers, evaluated each phase and removed when\r\n        // expired.\r\n        this.effects = []\r\n    }\r\n\r\n    /**\r\n     * Iterate over the effects currently active on this character and\r\n     * do housekeeping (decrement ttl, removing ttl = 0, etc.)\r\n     */\r\n    UpdateEffects() {\r\n        for (let e in this.effects) {\r\n            let effect = this.effects[e]\r\n            if (effect.ttl) {\r\n                effect.ttl--\r\n            }\r\n            if (effect.ttl <= 0) {\r\n                this.RemoveEffectModifier(effect)\r\n            }\r\n        }\r\n        this.effects = this.effects.filter(f => f.ttl > 0)\r\n    }\r\n\r\n    AddEffect(effect) {\r\n        if (effect.ttl) {\r\n            this.effects.push(effect)\r\n        }\r\n        if (effect.attribute !== undefined) {\r\n            this.AddEffectModifier(effect.attribute, effect.amount)\r\n        }\r\n    }\r\n    RemoveEffectModifier(effect) {\r\n        if (effect.attribute !== undefined) {\r\n            this.AddEffect(effect.attribute, effect.amount * -1)\r\n        }\r\n    }\r\n\r\n    AddEffectModifier(attribute, amount) {\r\n        if (this.effectModifiers[attribute] === undefined) {\r\n            this.effectModifiers[attribute] = 0\r\n        }\r\n        this.effectModifiers[attribute] += amount\r\n    }\r\n\r\n    EffectModifier(attribute) {\r\n        if (this.effectModifiers[attribute] !== undefined) {\r\n            return this.effectModifiers[attribute]\r\n        }\r\n        return 0\r\n    }\r\n\r\n    Name() {\r\n        return this.data.name\r\n    }\r\n\r\n    Cost() {\r\n        return this.data.Cost + this.EffectModifier('cost')\r\n    }\r\n\r\n    EquipmentAndAbilities(eqab) {\r\n        if (eqab !== undefined) {\r\n            this.data.equipAbilities = eqab\r\n        }\r\n        return this.data.equipAbilities + this.EffectModifier('equipAbilities')\r\n    }\r\n\r\n    GunnerySkill() {\r\n        return this.data.gunnerySkill + this.EffectModifier('gunnerySkill')\r\n    }\r\n\r\n    MeleeSkill() {\r\n        return this.data.meleeSkill + this.EffectModifier('meleeSkill')\r\n    }\r\n\r\n    Speed() {\r\n        return this.data.speed + this.EffectModifier('speed')\r\n    }\r\n\r\n    Hp() {\r\n        return this.data.hp + this.EffectModifier('hp')\r\n    }\r\n\r\n    MaxHp() {\r\n        return this.data.maxHp + this.EffectModifier('maxHp')\r\n    }\r\n}\r\n\r\n export { Character }","import input, { GetInputKeys, GetInputValue } from './input.js'\r\nimport { getContext, drawImage, getImage } from \"./images.js\"\r\nimport { Start, pointer } from './main.js'\r\nimport { Character } from './character.js'\r\nimport { buildSprite } from './sprites.js'\r\n\r\nimport menus from './menus.json'\r\nimport equipment from './equipment.json'\r\nimport { buildMap } from './map.js'\r\n\r\nlet imu = null\r\n\r\nlet ctx = null\r\n\r\nvar stars = 16\r\n\r\nvar squad = []\r\n\r\nvar background = buildSprite('background', 0, 0, 'idle')\r\n\r\nvar menu = null\r\nvar menuItems = []\r\nvar menuItem = {}\r\nvar currentMenuId = 'Main'\r\nvar currentMenuItem = 'Start'\r\nvar currentMenuColumn = 0\r\n\r\nvar currentCharacterEquip = null\r\n\r\nvar menuMethods = {\r\n    callback_OnRenderStars: (text, replacements) => {\r\n        return [stars.toString()]\r\n    },\r\n    callback_OnRenderHireSquad: (text, replacements) => {\r\n        return [squad.length]\r\n    },\r\n\r\n    callback_OnRenderCharacter: (text, replacements) => {\r\n        let name = text.split(' ')[0].replace('>', '')\r\n        return [(squad.filter(f => f.name === name).length)]\r\n    },\r\n\r\n    callback_HireCharacter: (text) => {\r\n        let name = text.split(' ')[0].replace('>', '')\r\n        let char = new Character(name)\r\n        if (stars - char.Cost() >= 0) {\r\n            squad.push(char)\r\n            stars -= char.Cost()\r\n        }\r\n    },\r\n\r\n    callback_StartGame: () => {\r\n        buildMap()\r\n        Start()\r\n    },\r\n\r\n    callback_SelectCharacterEquip: (text) => {\r\n        currentCharacterEquip = text\r\n    },\r\n\r\n    callback_SetupEquipment: (text) => {\r\n        ChangeMenu('SetupEquipment')\r\n        let menu = menus.filter(f => f.id === 'SetupEquipment')[0]\r\n        let nextIndex = menu.Options.findIndex(f => f.text === 'Next')\r\n        menu.Options = [\r\n            ...squad.map((m, i) => {\r\n            return {\r\n                text: `${i + 1}. ${m.name}`,\r\n                onSelect: 'callback_SelectCharacterEquip',\r\n                width: 160,\r\n                column: 0\r\n            }}),\r\n            menu.Options[nextIndex]\r\n        ]\r\n    }\r\n}\r\n\r\nlet menuDx = 0\r\nlet menuDy = 0\r\n\r\nfunction Action(actionId) {\r\n    if (actionId.includes('callback_')) {\r\n        return menuMethods[actionId] ? menuMethods[actionId] : () => {}\r\n    } else if (actionId.includes('menu_')) {\r\n        let action = actionId.split('_')\r\n        ChangeMenu(action[1])\r\n    }\r\n    return () => {}\r\n}\r\n\r\nfunction ChangeMenu(id) {\r\n    input.unlisten()\r\n    currentMenuColumn = 0\r\n    currentMenuId = id\r\n    let menuItems = GetMenuItems(id)\r\n    input.listen()\r\n    menuItem = menuItems.filter(f => f.text === currentMenuItem)[0]\r\n}\r\n\r\nfunction GetMenuItems(menuId) {\r\n    let menu = GetMenu(menuId)\r\n    let items = menu.Options.filter(f => f.onSelect && (f.column === undefined || f.column === currentMenuColumn))\r\n    if (items.length > 0 && currentMenuItem === '') {\r\n        currentMenuItem = items[0].text\r\n    }\r\n    return items\r\n}\r\n\r\nfunction GetMenu(id) {\r\n    try {\r\n        return menus.filter(f => f.id === id)[0]\r\n    } catch { return null }\r\n}\r\n\r\nfunction StartMenu(id) {\r\n    input.listen()\r\n\r\n    input.released('moveDown', () => {\r\n        menu = GetMenu(currentMenuId)\r\n        menuItems = GetMenuItems(currentMenuId) //menu.Options.filter(f => f.onSelect)\r\n        menuItem = menuItems.filter(f => f.text === currentMenuItem)[0]\r\n        let index = menuItems.findIndex(f => f.text === currentMenuItem)\r\n        index++\r\n        if (index >= menuItems.length) {\r\n            index = 0\r\n        }\r\n        currentMenuItem = menuItems[index].text\r\n    })\r\n    input.released('moveUp', () => {\r\n        menu = GetMenu(currentMenuId)\r\n        menuItems = GetMenuItems(currentMenuId)//menu.Options.filter(f => f.onSelect)\r\n        menuItem = menuItems.filter(f => f.text === currentMenuItem)[0]\r\n        let index = menuItems.findIndex(f => f.text === currentMenuItem)\r\n        index--\r\n        if (index < 0) {\r\n            index = menuItems.length - 1\r\n        }\r\n        currentMenuItem = menuItems[index].text\r\n    })\r\n    input.released('attack', () => {\r\n        menu = GetMenu(currentMenuId)\r\n        menuItems = GetMenuItems(currentMenuId) //menu.Options.filter(f => f.onSelect)\r\n        try {\r\n            menuItem = menuItems.filter(f => f.text === currentMenuItem)[0]    \r\n            if (menuItem.onSelect) {\r\n                Action(menuItem.onSelect)(menuItem.text)\r\n            }\r\n        } catch {}\r\n    })\r\n}\r\n\r\nfunction drawFrame(delta) {\r\n    if (!ctx) {\r\n        ctx = getContext()\r\n    }\r\n    background.draw(0, 0)\r\n    background.update(delta)\r\n    drawUI(delta)\r\n}\r\n\r\nfunction OnRender(text, onRender) {\r\n    let arr = text.split(/{[0-9]}/)\r\n    let replacements = []\r\n    for (let r in arr) {\r\n        replacements.push(`{${r}}`)\r\n    }\r\n    let values = Action(onRender)(text, arr)\r\n    for (let v in values) {\r\n        text = text.replace(replacements[v], values[v])\r\n    }\r\n    return text\r\n}\r\n\r\nfunction drawUI(delta) {\r\n    if (!imu) {\r\n        imu = new imui.ImUI(ctx.canvas)\r\n        imu.font = font\r\n        \r\n        imu.onUpdate = (ui) => {\r\n            //ui.Element({ id: 'imgGamename', type: 'Image', x: 10, y: 10, image: getImage('title') })\r\n            let menu = GetMenu(currentMenuId)\r\n            let menuItems = menu.Options.sort((a, b) => b.column !== undefined ? b.column : 0 - a.column !== undefined ? a.column : 0)\r\n            //imu.RemoveElements()\r\n            let dy = menuDy + 30\r\n            for (let i in menuItems) {\r\n                let item = menuItems[i].text\r\n                let menuItem = menuItems[i]\r\n                let colr = item === currentMenuItem ? menu.Style.SelectColor : menuItem.onSelect ? menu.Style.SelectableColor : menu.Style.Color\r\n                let txt = `${currentMenuItem === item ? '>' : ' '}${item}${currentMenuItem === item ? '<' : ' ' }`\r\n                if (txt.includes('{') && txt.includes('}') && menuItem.onRender) {\r\n                    txt = OnRender(txt, menuItem.onRender)\r\n                }\r\n                let el = ui.Element({ id: 'lblMenu' + currentMenuId + item + i, text: txt, rect: { x: menuDx, y: dy, w: 64, h: 8 }, color: colr, highlight: colr, bgcolor: '#cccccc00' })\r\n\r\n                if (el.Hover()) {\r\n                    if (menuItem.onSelect) {\r\n                        currentMenuItem = item\r\n                    }\r\n                }\r\n                if (el.Clicked()) {\r\n                    if (menuItem.onSelect) {\r\n                        currentMenuItem = txt\r\n                        Action(menuItem.onSelect)(menuItem.text)\r\n                    }\r\n                }\r\n                dy += 12\r\n            }\r\n            if (currentMenuId === 'SetupEquipment') {\r\n                let elEquip = ui.Element({ id: 'lblEquipMenu', text: 'Squad Equipment', rect: { x: menuDx, y: menuDy + 15, w: 128, h: 8 }, color: menu.Style.Color, highlight: menu.Style.Color, bgcolor: '#cccccc00' })\r\n            }\r\n            if (currentCharacterEquip && currentMenuId === 'SetupEquipment') {\r\n                let tooltip = ''\r\n                dy = menuDy + 42\r\n                let colDx = 80\r\n                let charName = currentCharacterEquip.split('.')[1].trim()\r\n                let charIndex = parseInt(currentCharacterEquip.split('.')) - 1\r\n                let eqabPoints = squad[charIndex].EquipmentAndAbilities()\r\n                let elSelEquip = ui.Element({ id: 'lblSelEquip', text: `${charName}: Equip & Ability Points: ${eqabPoints}`, rect: { x: colDx, y: menuDy + 30, w: 128, h: 8 }, color: menu.Style.Color, highlight: menu.Style.Color, bgcolor: '#cccccc00' })\r\n                let equiplist = equipment.filter(f => f.characters.includes(charName))\r\n                for (let e in equiplist) {\r\n                    let equip = equiplist[e]\r\n                    let equipped = squad[charIndex].equipment.filter(f => equip.name === f.name)\r\n                    let colr = menu.Style.SelectableColor\r\n                    if (equipped.length > 0) {\r\n                        colr = menu.Style.Disabled\r\n                    }\r\n\r\n                    let el = ui.Element({ id: 'lblEquip' + currentMenuId + equip.name + e, text: equip.name, rect: { x: colDx, y: dy, w: 128, h: 8 }, color: colr, highlight: colr, bgcolor: '#cccccc00' })\r\n                    \r\n                    if (el.Hover()) {\r\n                        let attr = [`Attacks: ${equip.attacks}`, `Damage: ${equip.damage}`, `Range: ${equip.range}`, `Cost: ${equip.cost}`]\r\n                        if (equip.reload) {\r\n                            attr.push('Requires Reload')\r\n                        }\r\n                        tooltip = attr.join('\\n')\r\n                    }\r\n                    if (el.Clicked()) {\r\n                        if (equipped.length > 0) {\r\n                            squad[charIndex].equipment = squad[charIndex].equipment.filter(f => f.name !== equip.name)\r\n                            squad[charIndex].EquipmentAndAbilities(eqabPoints + equip.cost)\r\n                        } else {\r\n                            if (eqabPoints - equip.cost >= 0) {\r\n                                squad[charIndex].equipment.push(equip)\r\n                                squad[charIndex].EquipmentAndAbilities(eqabPoints - equip.cost)\r\n                            }\r\n                        }\r\n                    }\r\n                        \r\n                    dy += 12\r\n                    if (dy > 180) {\r\n                        dy = menuDy + 42\r\n                        colDx += 90\r\n                    }\r\n                }\r\n\r\n                if (tooltip) {\r\n                    ui.RemoveElement('lblTooltip')\r\n                    let tip = ui.Element({ id: 'lblTooltip', text: tooltip, x: pointer.x, y: pointer.y + 8, autosize: true, color: menu.Style.SelectableColor, highlight: menu.Style.SelectColor, bgcolor: '#000000dd' })\r\n                }\r\n            }\r\n        }\r\n    }\r\n    imu.Draw()\r\n}\r\n\r\nexport { drawFrame, StartMenu }","import images from './images.js'\r\nimport sfx from './sfx.js'\r\nimport music from './music.js'\r\nimport sprites from './sprites.js'\r\nimport { setContext, loadAllImages } from './images.js'\r\nimport { drawFrame as drawMain } from './mainScene.js'\r\nimport { drawFrame as drawMainMenu, StartMenu } from './menuScene.js'\r\nimport { set, setDictionary } from './grammar.js'\r\nimport input from './input.js'\r\nimport { addTeam, currentTeam } from './teams.js'\r\n\r\nvar dateNow = Date.now()\r\nvar dateThen = Date.now()\r\n\r\nvar targetDelta = 16 // Roughly 60fps by default\r\n\r\nvar currentScene = 'mainMenu'\r\n\r\nvar pointer = { x: 0, y: 0 }\r\n\r\nfunction setTargetFrameRate(target) {\r\n    targetDelta = parseInt(1000 / target) // Number of ms divided by target fps\r\n}\r\n\r\nfunction requestAnimationFrame() {\r\n    dateNow = Date.now()\r\n    let delta = dateNow - dateThen\r\n    if (delta >= targetDelta) {\r\n        drawFrame(delta)\r\n        dateThen = dateNow\r\n    }\r\n    window.requestAnimationFrame(requestAnimationFrame)\r\n}\r\n\r\n/**\r\n * Draws the animation frame.\r\n * @param {number} delta Number of ms since last frame.\r\n */\r\nfunction drawFrame(delta) {\r\n    if (currentScene === 'mainMenu') {\r\n        drawMainMenu(delta)\r\n    } else if (currentScene === 'main') {\r\n        drawMain(delta)\r\n    }\r\n}\r\n\r\nasync function StartMainMenu() {\r\n    await loadAllImages()\r\n\r\n    let canvas = document.getElementById('maincanvas')\r\n    let ratio = canvas.width / canvas.height\r\n    canvas.style.height = window.innerHeight + 'px'\r\n    canvas.style.width = window.innerHeight * ratio + 'px'\r\n    window.addEventListener('resize', () => {\r\n        canvas.style.height = window.innerHeight + 'px'\r\n        canvas.style.width = window.innerHeight * ratio + 'px'\r\n      })\r\n        \r\n    canvas.addEventListener('mousemove', (e) => {\r\n        pointer.x = parseInt((e.clientX - canvas.offsetLeft) * (canvas.width / parseInt(canvas.style.width))) - 2\r\n        pointer.y = parseInt((e.clientY - canvas.offsetTop) * (canvas.height / parseInt(canvas.style.height)))\r\n    })\r\n\r\n    canvas.addEventListener('contextmenu', (e) => {\r\n        e.preventDefault()\r\n        return false\r\n    })     \r\n\r\n    setTargetFrameRate(60)\r\n    setContext(canvas.getContext('2d'))\r\n\r\n    StartMenu()\r\n\r\n    window.requestAnimationFrame(requestAnimationFrame)\r\n}\r\n\r\nasync function Start() {\r\n\r\n    input.unlisten()\r\n    let canvas = document.getElementById('maincanvas')\r\n    currentScene = 'main'\r\n\r\n    addTeam('Team A', '1d10')\r\n    addTeam('Team B', '1d10')\r\n    console.log('teams', currentTeam())\r\n\r\n    setTargetFrameRate(60)\r\n    setContext(canvas.getContext('2d'))\r\n\r\n    window.requestAnimationFrame(requestAnimationFrame)\r\n}\r\n\r\nexport { Start, StartMainMenu, pointer }"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","ctx","setContext","context","getContext","drawImage","name","x","y","srcRect","img","f","length","image","w","h","getMsSinceMidnight","d","Date","setHours","map","height","gridSize","gridOpacity","camera","targetX","targetY","triangleContains","ax","ay","bx","by","cx","cy","det","roll","dice","toLowerCase","includes","dieterm","split","amt","times","min","max","Math","floor","random","Error","teams","teamIndex","phases","phase","addTeam","turnOrderRollDice","push","color","order","sort","a","b","currentTeam","currentPhase","imu","tooltip","listening","handlerReleased","button","setState","callbacks","inputState","enabled","listenerKeyDown","e","inputs","keys","i","listenerKeyUp","window","removeEventListener","addEventListener","gameControl","on","gamepad","after","listen","unlisten","released","method","Character","constructor","this","data","maxHp","hp","equipment","console","error","effectModifiers","effects","UpdateEffects","effect","ttl","RemoveEffectModifier","filter","AddEffect","undefined","attribute","AddEffectModifier","amount","EffectModifier","Name","Cost","EquipmentAndAbilities","eqab","equipAbilities","GunnerySkill","gunnerySkill","MeleeSkill","meleeSkill","Speed","speed","Hp","MaxHp","stars","squad","background","pose","onComplete","sprite","frames","framesImage","currentFrame","updateDelta","play","animation","animStartTime","anim","sprPose","default","imageName","sfx","getSfx","offsetx","offsety","async","Promise","resolve","reject","spr","ox","oy","spd","t","mx","my","handler","p","start","end","setTimeout","delta","frameDelay","repeat","animDuration","SetAnimation","buildSprite","menuItems","menuItem","currentMenuId","currentMenuItem","currentMenuColumn","currentCharacterEquip","menuMethods","callback_OnRenderStars","text","replacements","toString","callback_OnRenderHireSquad","callback_OnRenderCharacter","replace","callback_HireCharacter","char","callback_StartGame","tiles","teamATiles","teamBTiles","parseInt","startAreaHeight","width","teamA","teamB","buildMap","Start","callback_SelectCharacterEquip","callback_SetupEquipment","ChangeMenu","menu","id","nextIndex","Options","findIndex","m","onSelect","column","menuDx","menuDy","Action","actionId","GetMenuItems","menuId","items","GetMenu","OnRender","onRender","arr","r","values","v","dateNow","now","dateThen","targetDelta","currentScene","pointer","setTargetFrameRate","target","requestAnimationFrame","draw","update","imui","ImUI","canvas","font","onUpdate","ui","dy","item","colr","Style","SelectColor","SelectableColor","Color","txt","el","Element","rect","highlight","bgcolor","Hover","Clicked","colDx","charName","trim","charIndex","eqabPoints","equiplist","characters","equip","equipped","Disabled","attr","attacks","damage","range","cost","reload","join","RemoveElement","autosize","Draw","clearRect","save","translate","ga","globalAlpha","restore","drawMap","slice","toUpperCase","StartMainMenu","promises","loadImage","filename","Image","onload","onerror","src","then","catch","allSettled","loadAllImages","document","getElementById","ratio","style","innerHeight","clientX","offsetLeft","clientY","offsetTop","preventDefault","index","log"],"sourceRoot":""}