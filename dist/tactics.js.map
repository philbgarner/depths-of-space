{"version":3,"file":"tactics.js","mappings":"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","sources":["webpack://tactics/webpack/universalModuleDefinition","webpack://tactics/webpack/bootstrap","webpack://tactics/webpack/runtime/define property getters","webpack://tactics/webpack/runtime/hasOwnProperty shorthand","webpack://tactics/webpack/runtime/make namespace object","webpack://tactics/./src/images.js","webpack://tactics/./src/sprites.js","webpack://tactics/./src/grammar.js","webpack://tactics/./src/teams.js","webpack://tactics/./src/input.js","webpack://tactics/./src/mainScene.js","webpack://tactics/./src/map.js","webpack://tactics/./src/actor.js","webpack://tactics/./src/character.js","webpack://tactics/./src/menus/gameSetup.js","webpack://tactics/./src/menus/equipSetup.js","webpack://tactics/./src/menuScene.js","webpack://tactics/./src/main.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tactics\"] = factory();\n\telse\n\t\troot[\"tactics\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import images from './images.json'\r\n\r\nvar ctx = null\r\n\r\nfunction setContext(context) {\r\n    ctx = context\r\n}\r\n\r\nfunction getContext() {\r\n    return ctx\r\n}\r\n\r\nfunction getImage(name) {\r\n    let img = images.filter(f => f.name === name)\r\n    return img.length > 0 ? img[0].image : null\r\n}\r\n\r\nfunction getImages() {\r\n    return images\r\n}\r\n\r\nfunction drawImage(name, x, y, srcRect, flipped) {\r\n    drawImageCtx(getContext(), name, x, y, srcRect, flipped)\r\n}\r\n\r\nfunction drawImageCtx(context, name, x, y, srcRect, flipped) {\r\n    let img = images.filter(f => f.name === name)\r\n    if (img.length > 0) {\r\n        if (srcRect) {\r\n            if (flipped) {\r\n                context.save()\r\n                context.scale(-1, 1)\r\n                context.drawImage(img[0].image, srcRect.x, srcRect.y, srcRect.w, srcRect.h, -x - srcRect.w, y, srcRect.w, srcRect.h)    \r\n                context.restore()\r\n            } else {\r\n                context.drawImage(img[0].image, srcRect.x, srcRect.y, srcRect.w, srcRect.h, x, y, srcRect.w, srcRect.h)    \r\n            }\r\n        } else {\r\n            if (flipped) {\r\n                context.save()\r\n                context.scale(-1, 1)\r\n                context.drawImage(img[0].image, x - srcRect.w, y, srcRect.w, srcRect.h)    \r\n                context.restore()\r\n            } else {\r\n                context.drawImage(img[0].image, x, y)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction loadImage(filename) {\r\n    return new Promise((resolve, reject) => {\r\n        let img = new Image()\r\n        img.onload = (e) => {\r\n            resolve(img)\r\n        }\r\n        img.onerror = (e) => {\r\n            console.error(`Failed to load file ${filename}:`, e)\r\n            reject(null)\r\n        }\r\n        let image = images.filter(f => f.filename === filename)\r\n        if (image.length > 0) {\r\n            img.src = filename\r\n        } else {\r\n            console.error(`Image definition matching filename ${filename} not found.`)\r\n            reject(null)\r\n        }\r\n    })\r\n}\r\n\r\nfunction loadAllImages() {\r\n    let promises = []\r\n    for (let i in images) {\r\n        let image = images[i]\r\n        promises.push(new Promise((resolve, reject) => loadImage(image.filename).then(r => {\r\n            image.image = r\r\n            resolve(r)\r\n        }).catch(e => console.error('Failed to load', image.filename, e))))\r\n    }\r\n    return Promise.allSettled(promises)\r\n}\r\n\r\nexport { loadAllImages, loadImage, drawImage, getImage, getImages, setContext, drawImageCtx, getContext }\r\n","import { drawImage, getContext, getImages } from './images.js'\r\nimport animations from './sprites.json'\r\n\r\nfunction lerp (start, end, amt){\r\n    return (1-amt)*start+amt*end\r\n  }\r\n  function lerpCoords (start, end, amt){\r\n    return { x: (1-amt)*start.x+amt*end.x, y: (1-amt)*start.y+amt*end.y }\r\n  }\r\n\r\nfunction removeSprite(name) {\r\n    let index = sprites.findIndex(f => f.name === name)\r\n    if (index >= 0) {\r\n        sprites[index] = undefined\r\n    }\r\n    sprites = sprites.filter(f => f !== undefined)\r\n}\r\n\r\nfunction getMsSinceMidnight(d) {\r\n    var e = new Date(d);\r\n    return d - e.setHours(0,0,0,0)\r\n    }\r\n\r\nfunction buildSprite(name, x, y, pose, onComplete, imageOverride) {\r\n    if (!animations[name]) {\r\n        throw new Error(`Can't build sprite, missing animation definition '${name}'.`)\r\n    }\r\n    let sprite = {\r\n        name: name,\r\n        x: x, y: y,\r\n        frames: [],\r\n        pose: pose,\r\n        framesImage: null,\r\n        currentFrame: 0,\r\n        updateDelta: 0,\r\n        play: true,\r\n        flipped: false\r\n    }\r\n    sprite.SetAnimation = (animation, pose, onComplete) => {\r\n        sprite.animStartTime = getMsSinceMidnight(new Date())\r\n        let anim = animations[animation]\r\n        if (onComplete) {\r\n            sprite.onComplete = onComplete\r\n        }\r\n        if (anim) {\r\n            let sprPose = anim.default ? anim.default : null\r\n            sprPose = anim[pose] ? anim[pose] : sprPose\r\n            if (sprPose) {\r\n                let img = getImages().filter(f => f.name === imageOverride ? imageOverride : sprPose.imageName)\r\n                if (img.length > 0) {\r\n                    sprite.frames = sprPose.frames\r\n                    sprite.currentFrame = 0\r\n                    sprite.animation = animation\r\n                    sprite.pose = pose\r\n                    sprite.framesImage = imageOverride ? imageOverride : sprPose.imageName\r\n                    if (sprPose.sfx) {\r\n                        let sfx = getSfx(sprPose.sfx)\r\n                        if (sfx) {\r\n                            sfx.play()\r\n                        }\r\n                    }\r\n                } else {\r\n                    throw new Error(`Can't find pose ${pose} in ${animation}.`)\r\n                }\r\n            } else {\r\n                sprite.frames = []\r\n                sprite.currentFrame = 0\r\n                sprite.animation = ''\r\n                sprite.pose = ''\r\n            }\r\n            sprite.play = true\r\n        }\r\n    }\r\n    sprite.draw = (offsetx, offsety) => {\r\n        offsetx = offsetx ? offsetx : 0\r\n        offsety = offsety ? offsety : 0\r\n        drawImage(sprite.framesImage, sprite.x + offsetx, sprite.y + offsety, sprite.frames[sprite.currentFrame], sprite.flipped)\r\n    }\r\n    sprite.moveTo = async (x, y, speed) => {\r\n        return new Promise(async (resolve, reject) => {\r\n            let spr = sprite\r\n            let ox = spr.x\r\n            let oy = spr.y\r\n            let spd = speed\r\n            let t = 0\r\n            let move = (mx, my) => new Promise((resolve, reject) => {\r\n                let handler = () => {\r\n                    t += spd\r\n                    if (t >= 1) {\r\n                        spr.x = x\r\n                        spr.y = y\r\n                        resolve()\r\n                    } else {\r\n                        let p = lerpCoords({ x: ox, y: oy }, { x: mx, y: my }, t)\r\n                        spr.x = p.x\r\n                        spr.y = p.y\r\n                        setTimeout(handler, 16)\r\n                    }\r\n                }\r\n                setTimeout(handler, 16)\r\n            })\r\n    \r\n            await move(x, y)\r\n            resolve()\r\n        })\r\n    }\r\n    sprite.onComplete = onComplete ? onComplete : (sprite) => {}\r\n    sprite.update = (delta) => {\r\n        let sprPose = animations[sprite.animation][sprite.pose]\r\n        if (sprPose && sprite.play) {\r\n            if (sprite.updateDelta > sprPose.frameDelay) {\r\n                sprite.currentFrame++\r\n                if (sprite.currentFrame > sprite.frames.length - 1) {\r\n                    if (sprPose.repeat) {\r\n                        sprite.currentFrame = 0\r\n                        sprite.animDuration = getMsSinceMidnight(new Date()) - sprite.animStartTime\r\n                        sprite.onComplete(sprite)\r\n                    } else {\r\n                        sprite.animDuration = getMsSinceMidnight(new Date()) - sprite.animStartTime\r\n                        sprite.currentFrame--\r\n                        sprite.play = false\r\n                        sprite.onComplete(sprite)\r\n                    }\r\n                    if (sprPose.onComplete) {\r\n                        sprPose.onComplete(sprite)\r\n                    }\r\n                }\r\n                sprite.updateDelta = 0\r\n            } else {\r\n                sprite.updateDelta += delta\r\n            }\r\n        }\r\n    }\r\n    sprite.SetAnimation(name, pose)\r\n\r\n    return sprite\r\n}\r\n\r\nfunction getAnimation(animation) {\r\n    try {\r\n        return animations[animation]\r\n    } catch {}\r\n    return {}\r\n}\r\n\r\nexport { buildSprite, removeSprite, getAnimation, getMsSinceMidnight }","let grammar = {}\r\n\r\nfunction randInt(min, max) {\r\n    //return Math.floor(ROT.RNG.getUniform() * (max - min + 1) + min)\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n  }\r\n\r\nfunction roll(dice) {\r\n    dice = dice.toLowerCase();\r\n    if (!dice.includes('d')) {\r\n        throw new Error('At least one term must specify the number of dice.')\r\n    } else {\r\n        let dieterm = dice.split('d')\r\n        let amt = 0\r\n        for (let times = 0; times < dieterm[0]; times++) {\r\n            amt += randInt(1, dieterm[1])\r\n        }\r\n        return amt\r\n    }\r\n}\r\n\r\n/**\r\n * The value for the key specified as the id parameter. Value is either an array of strings or a string reference to an array of strings.\r\n * @param {string} id \r\n * @returns {string|array} Returns either the value of the key matching 'id', or an empty string.\r\n */\r\nfunction get(id) {\r\n    if (!id) {\r\n        return ''\r\n    }\r\n    if (typeof id === 'string') {\r\n        id = id.replace('[*', '').replace(']', '')\r\n    }\r\n    let item = grammar[id]\r\n    if (item) {\r\n        if (typeof item === 'string') {\r\n            return item\r\n        } else if (typeof item === 'object') {\r\n            return item[randInt(0, item.length - 1)]\r\n        }\r\n    }\r\n    return id //`[not found:${id}]`\r\n}\r\n\r\n/**\r\n * Set the value for the key specified as the id parameter. Value is either an array of strings or a string reference to an array of strings.\r\n * @param {string} id \r\n * @param {string|array} value \r\n */\r\nfunction set(id, value) {\r\n    grammar[id] = value\r\n}\r\n\r\n/**\r\n * Processes any operators on the text about to be added to the sentence chain.\r\n * @param {string} txt \r\n * @param {string} operator \r\n * @returns \r\n */\r\nfunction operatorText(txt, operator) {\r\n    if (operator === 'capital') {\r\n        txt = txt.charAt(0).toUpperCase() + txt.slice(1)\r\n    }\r\n    return txt\r\n}\r\n\r\nfunction parseTokens(template, context) {\r\n    if (template.includes('[')) {\r\n        let startPos = 0\r\n        let tokenMap = []\r\n        while(template.includes('[', startPos)) {\r\n            let paramStart = template.indexOf('[', startPos)\r\n            if (paramStart > startPos) {\r\n                tokenMap.push({ start: startPos, end: paramStart, token: null, value: template.substring(startPos, paramStart) })    \r\n            }\r\n            let paramEnd = template.indexOf(']', startPos)\r\n            let token = template.substring(paramStart, paramEnd + 1)\r\n            tokenMap.push({ start: paramStart, end: paramEnd, token: token, value: null })\r\n            startPos = paramEnd + 1\r\n        }\r\n        if (startPos < template.length) {\r\n            tokenMap.push({ start: startPos, end: template.length - 1, token: null, value: template.substring(startPos, template.length)})\r\n        }\r\n        return tokenMap\r\n    } else {\r\n        return [template]\r\n    }\r\n}\r\n\r\nfunction compareOperation(property, operation, operator, value) {\r\n    if (operation === \"is\") {\r\n        if (operator === '=') {\r\n            return property === value\r\n        }\r\n    } else if (operation === \"has\") {\r\n        if (operator === \"=\") {\r\n            return property[value] !== undefined\r\n        }\r\n    } else {\r\n        if (typeof property === 'object' && [\"=\", \"!=\", \">=\", \"<=\", \"<\", \">\"].includes(operator)) {\r\n            if ([\"=\", \"!=\"].includes(operator)) {\r\n                return operator === \"=\" ? property[operation] === value : property[operation] !== value\r\n            } else if ([\">=\", \"<=\"].includes(operator)) {\r\n                return operator === \">=\" ? property[operation] >= value : property[operation] <= value\r\n            } else if ([\">\", \"<\"].includes(operator)) {\r\n                return operator === \">\" ? property[operation] > value : property[operation] < value\r\n            }            \r\n        } else if (typeof property === 'number' && [\"=\", \"!=\", \">=\", \"<=\", \"<\", \">\"].includes(operator)) {\r\n            if ([\"=\", \"!=\"].includes(operator)) {\r\n                return operator === \"=\" ? property === value : property !== value\r\n            } else if ([\">=\", \"<=\"].includes(operator)) {\r\n                return operator === \">=\" ? property >= value : property <= value\r\n            } else if ([\">\", \"<\"].includes(operator)) {\r\n                return operator === \">\" ? property > value : property < value\r\n            }            \r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction process(template, context) {\r\n    if (!template.includes('[')) {\r\n        return {\r\n            'tokenmap': {},\r\n            'sentence': template,\r\n            'sentenceHTML': template\r\n        }\r\n    }\r\n    context = context ? context : {}\r\n    let tokenMap = processTokenMap(parseTokens(template, context), context)\r\n    let sentence = ''\r\n    let sentenceHTML = ''\r\n    let map = tokenMap\r\n    for (let m in map) {\r\n        if (m > 0) {\r\n            let prev = map[m - 1]\r\n            if ((prev.token_type === 'condition' && prev.token_result) || (prev.token_type !== 'condition' && map[m].value)) {\r\n                if (map[m].token) {\r\n                    prev.value = map[m].value\r\n                    sentenceHTML += `<mark title='${m > 0 ? JSON.stringify(prev) : map[m].token}'>${map[m].value}</mark>`\r\n                    sentence += map[m].value\r\n                } else {\r\n                    sentenceHTML += map[m].value\r\n                    sentence += map[m].value\r\n                }\r\n            }\r\n        } else {\r\n            if (map[m].token && map[m].value) {\r\n                sentenceHTML += `<mark title='${map[m].token}'>${map[m].value}</mark>`\r\n                sentence += map[m].value\r\n            } else if (map[m].value) {\r\n                    sentenceHTML += map[m].value\r\n                    sentence += map[m].value\r\n            }\r\n        }\r\n    }\r\n    if (!sentence.includes('[')) {\r\n        return {\r\n            'tokenmap': tokenMap,\r\n            'sentence': sentence,\r\n            'sentenceHTML': sentenceHTML\r\n        }\r\n    } else {\r\n        return process(sentence, context)\r\n    }\r\n}\r\n\r\nfunction processTokenMap(tokenMap, context) {\r\n    let activeConditional = -1\r\n    for (let t in tokenMap) {\r\n        if (tokenMap[t].value === null) {\r\n            if (tokenMap[t].token) {\r\n                if (tokenMap[t].token.substring(0, 2) === '[*') {\r\n                    tokenMap[t].token_type = 'lookup'\r\n                    let id = tokenMap[t].token.substring(2, tokenMap[t].token.length - 1)\r\n                    if (!id.includes('[')) {\r\n                        tokenMap[t].value = get(id)\r\n                    }\r\n                } else if (tokenMap[t].token.substring(0, 2) === '[?') {\r\n                    tokenMap[t].token_type = 'condition'\r\n                    activeConditional = t\r\n                    let id = tokenMap[t].token.substring(2, tokenMap[t].token.length - 1)\r\n                    let paths = id.split('.')\r\n\r\n                    let room = null\r\n                    if (context.room) {\r\n                        room = rooms.getRoom(context.room)\r\n                    }\r\n\r\n                    if (paths.length === 3) {\r\n                        let contextName = paths[0]\r\n                        let contextProperty = paths[1]\r\n                        let comparison = paths[2]\r\n\r\n                        if (contextName === 'room' && room) {\r\n                            if (room[contextProperty]) {\r\n                                let comp = comparison.search(/[(=)(!=)(<)(>)(>=)(<=)]/)\r\n                                if (comp >= 0) {\r\n                                    let operation = comparison.substring(0, comp)\r\n                                    let opEnd = comparison.slice(comp).search(/[A-Za-z0-9_-]/)\r\n                                    if (opEnd < 0) {\r\n                                        opEnd = 1\r\n                                    }\r\n                                    let operator = comparison.substring(comp, comp + opEnd)\r\n                                    let value = comparison.substring(comp + 1, comparison.length)\r\n                                    tokenMap[t].token_operation = operation\r\n                                    tokenMap[t].token_operator = operator\r\n                                    tokenMap[t].token_compare_to = value\r\n                                    tokenMap[t].token_property = room[contextProperty]\r\n                                    tokenMap[t].token_result = compareOperation(room[contextProperty], operation, operator, value)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (paths.length === 1) {\r\n                        // If there's no path, try a die roll notation.\r\n                        let comparison = paths[0]\r\n                        let comp = comparison.search(/[(=)(!=)(<)(>)(>=)(<=)]/)\r\n                        if (comp >= 0) {\r\n                            let operation = comparison.substring(0, comp)\r\n                            let opEnd = comparison.slice(comp).search(/[A-Za-z0-9_-]/)\r\n                            if (opEnd < 0) {\r\n                                opEnd = 1\r\n                            }\r\n                            let operator = comparison.substring(comp, comp + opEnd)\r\n                            let value = parseInt(comparison.substring(comp + 1, comparison.length))\r\n                            let rl = roll(operation)\r\n                            tokenMap[t].die_roll = rl\r\n                            tokenMap[t].token_operation = operation\r\n                            tokenMap[t].token_operator = operator\r\n                            tokenMap[t].token_compare_to = value\r\n                            tokenMap[t].token_property = rl\r\n                            tokenMap[t].token_result = compareOperation(rl, operation, operator, value)\r\n                        }\r\n                    }\r\n                } else if (tokenMap[t].token.toLowerCase() === \"[else]\") {\r\n                    if (activeConditional >= 0) {\r\n                        tokenMap[t].token_operation = tokenMap[activeConditional].token_operation\r\n                        tokenMap[t].token_operator = tokenMap[activeConditional].token_operator\r\n                        tokenMap[t].token_compare_to = tokenMap[activeConditional].token_compare_to\r\n                        tokenMap[t].token_property = tokenMap[activeConditional].token_property\r\n                        tokenMap[t].token_type = 'condition'\r\n                        tokenMap[t].token_result = !compareOperation(tokenMap[t].token_property, tokenMap[t].token_operation, tokenMap[t].token_operator, tokenMap[t].token_compare_to)\r\n                        activeConditional = -1\r\n                    }\r\n                } else if (tokenMap[t].token.substring(0, 1) === '[') {\r\n                    tokenMap[t].value = tokenMap[t].token.replace('[', '').replace(']', '')\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return tokenMap\r\n}\r\n\r\n/**\r\n * Get the generated text of the specified template text.\r\n * @param {string} template Template text to generate from the dictionary.\r\n * @param {object} context JSON containing the list of contexts and their objects to execute under.\r\n * @returns {string} Evaluated text result.\r\n */\r\nfunction text(template, context) {\r\n    let sentence = []\r\n    let startPos = 0\r\n    // If there are any tokens to process in this template.\r\n    if (template.includes('[')) {\r\n        let paramStart = 0\r\n        let paramEnd = template.indexOf('[')\r\n        while(template.includes('[', startPos)) {\r\n            paramStart = template.indexOf('[', startPos)\r\n            paramEnd = template.indexOf(']', startPos)\r\n            //sentence.push(template.substring(startPos, paramStart))\r\n            let id = template.substring(paramStart, paramEnd + 1)\r\n            \r\n            let operator\r\n            if (id.includes('.')) {\r\n                let parts = id.split('.')\r\n                id = parts[0] + ']'\r\n                operator = parts[1].toLowerCase().substring(0, parts[1].length - 1)\r\n            }\r\n            if (id !== template) {\r\n                let txt = text(id)\r\n                sentence.push(txt)\r\n            } else {\r\n                let txt = get(id)\r\n                sentence.push(txt)\r\n            }\r\n            startPos = paramEnd + 1\r\n        }\r\n        if (startPos < template.length) {\r\n            sentence.push(template.substring(startPos, template.length))\r\n        }\r\n    } else {\r\n        let id = get(template)\r\n        return id ? id : `[not found:${id}]` \r\n    }\r\n\r\n    let ret = sentence.reduce((prev, next) => prev + next)\r\n    return ret.includes('[*') ? text(ret) : ret\r\n}\r\n\r\n/**\r\n * Sets the whole dictionary object to the json parameter.\r\n * @param {object} json \r\n */\r\nfunction setDictionary(json) {\r\n    grammar = json\r\n}\r\n\r\n/**\r\n * Loads the dictionary from a file buffer.\r\n * @param {buffer} buffer \r\n */\r\nfunction loadDictionary(buffer) {\r\n    grammar = JSON.parse(buffer.toString())\r\n}\r\n\r\nexport { loadDictionary, setDictionary, text, set, get, roll, randInt }","import { roll } from './grammar.js'\r\nimport { getCamera, getUnits, gridDimensions } from './map.js'\r\n\r\nvar teams = []\r\nvar teamIndex = 0\r\nvar phases = ['positioning', 'movement', 'active', 'siege', 'upkeep']\r\nvar phase = 0\r\n\r\nfunction addTeam(name, turnOrderRollDice) {\r\n    let team = {\r\n        name: name,\r\n        color: '#ccccccff',\r\n        order: roll(turnOrderRollDice),\r\n        homePosition: { x: 24, y: 8.5 * gridDimensions().y }\r\n    }\r\n    if (teams.length % 2 === 1) {\r\n        team.homePosition = { x: 600, y: 8.5 * gridDimensions().y }\r\n    }\r\n    teams.push(team)\r\n    teams.sort((a, b) => b.order - a.order)\r\n    return team\r\n}\r\n\r\nfunction getTeam(name) {\r\n    let team = teams.filter(f => f.name === name)\r\n    return team.length > 0 ? team[0] : null\r\n}\r\n\r\nfunction getTeams() {\r\n    return teams\r\n}\r\n\r\nfunction currentTeam() {\r\n    return teams[teamIndex]\r\n}\r\n\r\nfunction currentPhase() {\r\n    return phases[phase]\r\n}\r\n\r\nfunction setPhases(phaselist) {\r\n    phases = phaselist\r\n}\r\n\r\nfunction getPhases() {\r\n    return phases\r\n}\r\n\r\nfunction nextPhase() {\r\n    phase++\r\n    phase = phase >= phases.length ? 1 : phase // 1 not 0 because we want to skip the positioning phase after the 1st time.\r\n}\r\n\r\nfunction nextTeam() {\r\n    teamIndex++\r\n    teamIndex = teamIndex >= teams.length ? 0 : teamIndex\r\n}\r\n\r\nexport { addTeam, currentTeam, currentPhase, nextPhase, setPhases, getPhases, getTeam, nextTeam, getTeams }","import maps from './keymapping.json'\r\n\r\nvar listening = false\r\n\r\nfunction handlerPressed (button) {\r\n  setState(button, true)\r\n  if (pressCallbacks[button]) {\r\n    releaseCallbacks[button](button)\r\n  }\r\n}\r\n\r\nfunction handlerReleased (button) {\r\n  setState(button, false)\r\n  if (releaseCallbacks[button]) {\r\n    releaseCallbacks[button](button)\r\n  }\r\n}\r\n\r\nfunction GetInputKeys(inputType) {\r\n  inputType = inputType.toLowerCase()\r\n  return Object.keys(maps[inputType])\r\n}\r\n\r\nfunction GetInputValue(inputType, key) {\r\n  inputType = inputType.toLowerCase()\r\n  return maps[inputType][key]\r\n}\r\n\r\nvar inputState = {}\r\nvar releaseCallbacks = {}\r\nvar pressCallbacks = {}\r\n\r\nvar enabled = [ 'keyboard', 'gamepad' ]\r\n\r\nfunction setState(button, value) {\r\n  inputState[button] = value\r\n}\r\n\r\nfunction getState(button) {\r\n  if (!listening) {\r\n    return false\r\n  }\r\n  return inputState[button] ? inputState[button] : false\r\n}\r\n\r\nfunction listenerKeyDown(e) {\r\n  if (!listening) {\r\n    return\r\n  }\r\n  let inputs = Object.keys(maps.keyboard)\r\n  for (let i in inputs) {\r\n    if (e.key === maps.keyboard[inputs[i]]) {\r\n      handlerPressed(inputs[i])\r\n    }\r\n  }\r\n}\r\n\r\nfunction listenerKeyUp(e) {\r\n  if (!listening) {\r\n    return\r\n  }\r\n  let inputs = Object.keys(maps.keyboard)\r\n  for (let i in inputs) {\r\n    if (e.key === maps.keyboard[inputs[i]]) {\r\n      handlerReleased(inputs[i])\r\n    }\r\n  }\r\n}\r\n\r\nfunction init() {\r\n  inputState = {}\r\n  releaseCallbacks = {}\r\n  pressCallbacks = {}\r\n  if (enabled.includes('keyboard')) {\r\n    window.removeEventListener('keydown', listenerKeyDown)\r\n    window.removeEventListener('keyup', listenerKeyUp)\r\n    window.addEventListener('keydown', listenerKeyDown)\r\n    window.addEventListener(\"keyup\", listenerKeyUp)\r\n  }\r\n  if (enabled.includes('gamepad')) {\r\n    gameControl.on('connect', function(gamepad) {\r\n      let inputs = Object.keys(maps.gamepad)\r\n      for (let i in inputs) {\r\n        gamepad.on(maps.gamepad[inputs[i]], () => {\r\n          \r\n        }).after(maps.gamepad[inputs[i]], () => {\r\n          handlerReleased(inputs[i])\r\n        })\r\n      }\r\n    })\r\n  }\r\n  listening = false\r\n}\r\n\r\ninit()\r\n\r\nvar input = {\r\n  listen: () => {\r\n    listening = true\r\n  },\r\n  unlisten: () => {\r\n    listening = false\r\n  },\r\n  released: (button, method) => {\r\n    releaseCallbacks[button] = method\r\n  },\r\n  pressed: (button, method) => {\r\n    pressCallbacks[button] = method\r\n  }\r\n}\r\n\r\nexport default input\r\nexport { GetInputKeys, GetInputValue }","import input from \"./input.js\"\r\nimport { drawImage, getContext, getImage } from \"./images.js\"\r\nimport { getCamera, drawMap, getUnit, getUnits, setPlacingSprite, getPlacingSprite, gridDimensions,\r\n    setPotentialMoves, clearPotentialMoves, getPotentialMoves, getPathMoves, clearPathMoves, findAttackTargets, setAttackTargetUnits } from \"./map.js\"\r\nimport { currentPhase, currentTeam, nextPhase, nextTeam, setPhases, getPhases } from \"./teams.js\"\r\nimport { getPointer, gameMap } from \"./main.js\"\r\n\r\nlet imu = null\r\n\r\nlet ctx = null\r\n\r\nlet tooltip = ''\r\n\r\nlet currentUnit = null\r\n\r\nlet isMoving = false\r\n\r\nfunction getCurrentUnit() {\r\n    return currentUnit\r\n}\r\n\r\nfunction delay(timeout) {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            resolve()\r\n        }, timeout)\r\n    })\r\n}\r\n\r\nfunction drawFrame(delta) {\r\n    if (!ctx) {\r\n        ctx = getContext()\r\n    }\r\n    ctx.clearRect(0, 0, 320, 200)\r\n\r\n    drawMap(delta)\r\n\r\n    drawUI(delta)\r\n}\r\n\r\nasync function startMove(moves) {\r\n    isMoving = true\r\n    function prom(unit, loc) {\r\n        return new Promise((resolve, reject) => {\r\n            unit.sprite.moveTo(loc.x * gridDimensions().x - 12, loc.y * gridDimensions().y - 20, 0.3).then(() => {\r\n                getCamera().setTarget(loc.x * gridDimensions().x - 160, loc.y * gridDimensions().y - 100, 100)\r\n                resolve()\r\n            })\r\n        })\r\n    }\r\n    for (let m in moves) {\r\n        await prom(currentUnit, moves[m])\r\n    }\r\n    isMoving = false\r\n}\r\n\r\nfunction handleAction() {\r\n    if (currentPhase() === 'positioning') {\r\n        let units = getUnits(currentTeam().name).filter(f => !f.placed)\r\n        if (units.length > 0) {\r\n            currentUnit = units[0]\r\n            setPlacingSprite(units[0].sprite)\r\n        } else if (getUnits().filter(f => !f.placed).length > 0) {\r\n            nextTeam()\r\n            let teamUnits = getUnits(currentTeam().name)\r\n            getUnits().forEach(u => u.moved = false)\r\n            if (teamUnits.length > 0) {\r\n                getCamera().setTarget(teamUnits[0].x * gridDimensions().x - 160, teamUnits[0].y * gridDimensions().y - 100, 1000, () => currentUnit = teamUnits[0])\r\n            }\r\n            handleAction()\r\n        } else {\r\n            nextPhase()\r\n            let teamUnits = getUnits(currentTeam().name)\r\n            getUnits().forEach(u => u.moved = false)\r\n            if (teamUnits.length > 0) {\r\n                getCamera().setTarget(teamUnits[0].x * gridDimensions().x - 160, teamUnits[0].y * gridDimensions().y - 100, 1000, () => currentUnit = teamUnits[0])\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction StartScene() {\r\n    input.listen()\r\n\r\n    input.released('moveDown', () => {\r\n        if (!getCamera().isMoving()) getCamera().setTarget(getCamera().x, getCamera().y + 48, 320)\r\n    })\r\n    input.released('moveUp', () => {\r\n        if (!getCamera().isMoving()) getCamera().setTarget(getCamera().x, getCamera().y - 48, 320)\r\n    })\r\n    input.released('moveRight', () => {\r\n        if (!getCamera().isMoving()) getCamera().setTarget(getCamera().x + 48, getCamera().y, 320)\r\n    })\r\n    input.released('moveLeft', () => {\r\n        if (!getCamera().isMoving()) getCamera().setTarget(getCamera().x - 48, getCamera().y, 320)\r\n    })\r\n\r\n    input.pressed('moveDown', () => {\r\n        if (!getCamera().isMoving()) getCamera().setTarget(getCamera().x, getCamera().y + 96, 6)\r\n    })\r\n    input.pressed('moveUp', () => {\r\n        if (!getCamera().isMoving()) getCamera().setTarget(getCamera().x, getCamera().y - 96, 6)\r\n    })\r\n    input.pressed('moveRight', () => {\r\n        if (!getCamera().isMoving()) getCamera().setTarget(getCamera().x + 96, getCamera().y, 6)\r\n    })\r\n    input.pressed('moveLeft', () => {\r\n        if (!getCamera().isMoving()) getCamera().setTarget(getCamera().x - 96, getCamera().y, 6)\r\n    })\r\n    \r\n    handleAction()\r\n}\r\n\r\nfunction drawUI(delta) {\r\n    if (!imu) {\r\n        imu = new imui.ImUI(ctx.canvas)\r\n        imu.font = font\r\n\r\n        let paramsGreyListImage = {\r\n            bgcolor: '#122020ff',\r\n            color: '#cacacaff',\r\n            bgcolorSelected: '#122020ff',\r\n            colorSelected: '#f1f1f1ff',\r\n            highlight: '#f1f1f1ff',\r\n            scrollbarWidth: 9,\r\n            scrollAreaImage: {\r\n                image: getImage('ui-button-scroll-area'),\r\n                hover: getImage('ui-button-scroll-area'),\r\n                pressed: getImage('ui-button-scroll-area'),\r\n                innerRect: { x: 3, y: 4, w: 7, h: 40 }\r\n            },\r\n            caratImage: {\r\n                image: getImage('ui-button-carat'),\r\n                hover: getImage('ui-button-carat-hover'),\r\n                pressed: getImage('ui-button-carat-pressed')\r\n            },\r\n            upImage: {\r\n                image: getImage('ui-button-scroll-up'),\r\n                hover: getImage('ui-button-scroll-up-hover'),\r\n                pressed: getImage('ui-button-scroll-up-pressed')\r\n            },\r\n            downImage: {\r\n                image: getImage('ui-button-scroll-down'),\r\n                hover: getImage('ui-button-scroll-down-hover'),\r\n                pressed: getImage('ui-button-scroll-down-pressed')\r\n            }\r\n        }\r\n\r\n        let siegeSelect = ''\r\n\r\n        imu.onUpdate = async (ui) => {\r\n            let cellx = parseInt((getPointer().x + getCamera().x) / gridDimensions().x)\r\n            let celly = parseInt((getPointer().y + getCamera().y) / gridDimensions().y)\r\n            let bg = ui.Element({ id: 'lblBg', text: ``, rect: { x: 0, y: 0, w: 320, h: 200 }, color: '#f1f100ff', color: '#f1f100ff', bgcolor: '#00000000'})\r\n            \r\n            if (bg.Clicked() && bg.state.mouseButton === 2) {\r\n                currentUnit = null\r\n                clearPathMoves()\r\n                clearPotentialMoves()\r\n            }\r\n            \r\n            if (currentPhase() === 'positioning') {\r\n                if (bg.Hover() && currentUnit) {\r\n                    if (gameMap.hasTeamATile(cellx, celly)) {\r\n                        tooltip = 'Place unit.'\r\n                    } else {\r\n                        tooltip = `Invalid location (${cellx},${celly}), place inside the yellow area.`\r\n                    }\r\n                }\r\n                if (bg.Clicked() && currentUnit) {\r\n                    currentUnit.x = cellx\r\n                    currentUnit.y = celly\r\n                    currentUnit.sprite.x = cellx * gridDimensions().x - 12\r\n                    currentUnit.sprite.y = celly * gridDimensions().y - 20\r\n                    currentUnit.placed = true\r\n                    setPlacingSprite(null)\r\n                    currentUnit = null\r\n                    tooltip = `Placed at ${cellx}, ${celly}.`\r\n                    nextTeam()\r\n                    let home = currentTeam().homePosition\r\n                    getCamera().setTarget(home.x, home.y, 1500)        \r\n                    delay(300).then(() => handleAction())\r\n                }\r\n            } else if (currentPhase() === 'movement') {\r\n                console.log('movement logic')\r\n                if (bg.Clicked() && currentUnit === null && !isMoving) {\r\n                    let unit = getUnit(cellx, celly)\r\n                    if (unit && !unit.moved) {\r\n                        currentUnit = unit\r\n                        getCamera().setTarget(currentUnit.x * gridDimensions().x - 160, currentUnit.y * gridDimensions().y - 100, 1000)\r\n                        setPotentialMoves(unit, cellx, celly)\r\n                    }\r\n                } else if (bg.Clicked() && currentUnit && !isMoving && !currentUnit.moved) {\r\n                    let moves = JSON.parse(JSON.stringify(getPathMoves())).reverse().slice(1)\r\n                    clearPotentialMoves()\r\n                    startMove(moves).then(() => {\r\n                        currentUnit.x = getPathMoves()[0].x\r\n                        currentUnit.y = getPathMoves()[0].y\r\n                        currentUnit.moved = true\r\n                        currentUnit.actionPoints--\r\n                        currentUnit = null\r\n                        clearPathMoves()\r\n                    })\r\n                } else if (bg.Hover() && currentUnit && !isMoving) {\r\n                    setPotentialMoves(currentUnit, cellx, celly)\r\n                }\r\n\r\n                if (getUnits().filter(f => !f.moved).length === 0) {\r\n                    currentUnit = null\r\n                    nextPhase()\r\n                    nextTeam()\r\n                    let teamUnits = getUnits(currentTeam().name)\r\n                    getUnits().forEach(u => u.moved = false)\r\n                    if (teamUnits.length > 0) {\r\n                        currentUnit = teamUnits[0]\r\n                        getCamera().setTarget(teamUnits[0].x * gridDimensions().x - 160, teamUnits[0].y * gridDimensions().y - 100, 1000)\r\n                    }\r\n                } else if (getUnits(currentTeam().name).filter(f => !f.moved).length === 0) {\r\n                    currentUnit = null\r\n                    nextTeam()\r\n                    let units = getUnits(currentTeam().name).filter(f => !f.moved)\r\n                    if (units.length > 0) {\r\n                        getCamera().setTarget(units[0].x * gridDimensions().x - 160, units[0].y * gridDimensions().y - 100, 1000, () => currentUnit = units[0])\r\n                    } else {\r\n                        let home = currentTeam().homePosition\r\n                        getCamera().setTarget(home.x, home.y, 1500)        \r\n                    }\r\n                }\r\n            } else if (currentPhase() === 'active') {\r\n                tooltip = 'Active phase.'\r\n                if (currentUnit) {\r\n                    let elActions = ui.Element({ id: 'actionsList', type: 'ListImage', list: ['Throw Object >', 'Reload', 'Abilities >', 'Done'], rect: {x: 8, y: 19, w: 96, h: 32 }, ...paramsGreyListImage})\r\n                    if (elActions.Clicked()) {\r\n                        let action = elActions.list[elActions.currentItem]\r\n                        if (action === 'Done') {\r\n                            currentUnit.moved = true\r\n                            currentUnit = null\r\n                            clearPathMoves()\r\n                            clearPotentialMoves()\r\n                            nextTeam()\r\n                            let teamUnits = getUnits(currentTeam().name).filter(f => !f.moved)\r\n                            if (teamUnits.length > 0) {\r\n                                getCamera().setTarget(teamUnits[0].x * gridDimensions().x - 160, teamUnits[0].y * gridDimensions().y - 100, 1000)\r\n                                currentUnit = teamUnits[0]\r\n                            } else if (getUnits().filter(f => !f.moved).length === 0) {\r\n                                currentUnit = null\r\n                                nextPhase()\r\n                                getUnits().forEach(u => u.moved = false)\r\n                                let teamUnits = getUnits(currentTeam().name)\r\n                                if (teamUnits.length > 0) {\r\n                                    currentUnit = teamUnits[0]\r\n                                    getCamera().setTarget(teamUnits[0].x * gridDimensions().x - 160, teamUnits[0].y * gridDimensions().y - 100, 1000)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (bg.Clicked() && currentUnit === null) {\r\n                    let unit = getUnit(cellx, celly)\r\n                    if (unit && !unit.moved) {\r\n                        currentUnit = unit\r\n                        getCamera().setTarget(currentUnit.x * gridDimensions().x - 160, currentUnit.y * gridDimensions().y - 100, 1000)\r\n                    }\r\n                }\r\n            } else if (currentPhase() === 'siege') {\r\n                tooltip = 'Siege phase.'\r\n                let lst = ['Ranged Attack >', 'Melee Attack >', 'Done']\r\n                if (siegeSelect === 'melee') {\r\n                    if (currentUnit) {\r\n                        lst = currentUnit.character.equipment.filter(f => f.range === 0).map(m => m.name)\r\n                        lst.push('< Back')\r\n                    }\r\n                } else if (siegeSelect === 'ranged') {\r\n                    if (currentUnit) {\r\n                        lst = currentUnit.character.equipment.filter(f => f.range > 0).map(m => m.name)\r\n                        lst.push('< Back')\r\n                    }\r\n                }\r\n\r\n                if (currentUnit) {\r\n                    let elActions = ui.Element({ id: 'actionsList', type: 'ListImage', list: lst, rect: {x: 8, y: 19, w: 96, h: 32 }, ...paramsGreyListImage})\r\n                    if (elActions.Clicked()) {\r\n                        let action = elActions.list[elActions.currentItem]\r\n                        if (action === 'Done') {\r\n                            currentUnit.moved = true\r\n                            currentUnit = null\r\n                            clearPathMoves()\r\n                            clearPotentialMoves()\r\n                            nextTeam()\r\n                            let teamUnits = getUnits(currentTeam().name).filter(f => !f.moved)\r\n                            if (teamUnits.length > 0) {\r\n                                getCamera().setTarget(teamUnits[0].x * gridDimensions().x - 160, teamUnits[0].y * gridDimensions().y - 100, 1000)\r\n                                currentUnit = teamUnits[0]\r\n                            } else if (getUnits().filter(f => !f.moved).length === 0) {\r\n                                currentUnit = null\r\n                                nextPhase()\r\n                                getUnits().forEach(u => u.moved = false)\r\n                                let teamUnits = getUnits(currentTeam().name)\r\n                                if (teamUnits.length > 0) {\r\n                                    currentUnit = teamUnits[0]\r\n                                    getCamera().setTarget(teamUnits[0].x * gridDimensions().x - 160, teamUnits[0].y * gridDimensions().y - 100, 1000)\r\n                                }\r\n                            }\r\n                        } else if (action.toLowerCase().includes('melee')) {\r\n                            siegeSelect = 'melee'\r\n                        } else if (action.toLowerCase().includes('ranged')) {\r\n                            siegeSelect = 'ranged'\r\n                        } else if (action.toLowerCase().includes('back')) {\r\n                            siegeSelect = ''\r\n                        } else if (siegeSelect === 'melee' || siegeSelect === 'ranged') {\r\n                            // Must have selected an item.\r\n                            console.log(currentUnit)\r\n                            let item = currentUnit.character.equipment.filter(f => f.name === action)\r\n                            console.log('item', action)\r\n                            if (item.length > 0) {\r\n                                let targets = findAttackTargets(currentUnit, item[0])\r\n                                if (targets.length > 0) {\r\n                                    setAttackTargetUnits(targets)\r\n                                    getCamera().setTarget(targets[0].x * gridDimensions().x - 160, targets[0].y * gridDimensions().y - 100, 1000)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (bg.Clicked() && currentUnit === null) {\r\n                    let unit = getUnit(cellx, celly)\r\n                    if (unit && !unit.moved) {\r\n                        currentUnit = unit\r\n                        getCamera().setTarget(currentUnit.x * gridDimensions().x - 160, currentUnit.y * gridDimensions().y - 100, 1000)\r\n                    }\r\n                }\r\n            } else if (currentPhase() === 'upkeep') {\r\n                tooltip = 'Applying damage'\r\n                getUnits().forEach(f => f.moved = false)\r\n                currentUnit = null\r\n                nextPhase()\r\n                let teamUnits = getUnits(currentTeam().name)\r\n                getUnits().forEach(u => u.moved = false)\r\n                if (teamUnits.length > 0) {\r\n                    getCamera().setTarget(teamUnits[0].x * gridDimensions().x - 160, teamUnits[0].y * gridDimensions().y - 100, 1000, () => currentUnit = teamUnits[0])\r\n                }    \r\n            }\r\n\r\n            if (currentUnit) {\r\n                if (getCurrentUnit().x > getPointer().cellX()) {\r\n                    getCurrentUnit().sprite.flipped = true\r\n                } else {\r\n                    getCurrentUnit().sprite.flipped = false\r\n                }\r\n            }\r\n\r\n            if (currentPhase() === 'movement' && currentUnit) {\r\n                tooltip = `${currentUnit.name} Action Points: ${currentUnit.actionPoints} (${cellx}, ${celly}).`\r\n            }\r\n\r\n            let phase = currentPhase().slice(0, 1).toUpperCase() + currentPhase().slice(1)\r\n            ui.Element({ id: 'lblPhase', text: `${phase}: ${currentTeam().name}`, rect: { x: 10, y: 3, w: 300, h: 9 }, color: '#f1f100ff', color: '#f1f100ff', bgcolor: '#000000cc'})\r\n\r\n            ui.Element({ id: 'lblTooltip', text: tooltip, rect: { x: 0, y: 190, w: 240, h: 10 }, color: '#f1f1f1ff', highlight: '#f1f1f1ff', bgcolor: '#000000cc' })\r\n        }\r\n    }\r\n    imu.Draw()\r\n}\r\n\r\nexport { drawFrame, StartScene, getCurrentUnit }","import Actor from \"./actor.js\"\r\nimport { getContext, drawImage, getImage } from \"./images.js\"\r\nimport { currentPhase, getTeam, getTeams } from \"./teams.js\"\r\nimport { getPointer } from \"./main.js\"\r\nimport { getCurrentUnit } from \"./mainScene.js\"\r\n\r\nfunction manhattanDistance(startPoint, toX, toY) {\r\n    return Math.abs (startPoint.x - toX) + Math.abs (startPoint.y -\r\n        toY)\r\n}\r\n\r\nvar map = null\r\n\r\nvar width = 36\r\nvar height = 24\r\n\r\nvar gridSize = 24\r\nvar gridOpacity = 0.3\r\n\r\nvar startAreaWidth = 10\r\nvar startAreaHeight = 24\r\n\r\nvar placingSprite = null\r\n\r\nvar movementTiles = []\r\nvar movementPath = []\r\n\r\nvar attackTargetUnits = []\r\nvar healTargetUnits = []\r\nvar units = []\r\n\r\nvar camera = {\r\n    x: 24,\r\n    y: 8.5 * gridDimensions().y,\r\n    // x: 0, y: 0,\r\n    w: width * gridDimensions().x, h: height * gridDimensions().y,\r\n    targetX: 24,\r\n    targetY: 8.5 * gridDimensions().y,\r\n    targetStartX: 24,\r\n    targetStartY: 8.5 * gridDimensions().y,\r\n    targetDuration: 0,\r\n    targetElapsed: 0\r\n}\r\n\r\nfunction getAttackTargetUnits() {\r\n    return attackTargetUnits\r\n}\r\n\r\nfunction setAttackTargetUnits(units) {\r\n    attackTargetUnits = units\r\n}\r\n\r\nfunction clearAttackTargets() {\r\n    attackTargetUnits = []\r\n}\r\n\r\nfunction findAttackTargets(unit, weapon) {\r\n    // TODO: After getting units within radius of selected weapon,\r\n    // do a LOS check to see if it's under cover or partial cover.\r\n    return units.filter(f => manhattanDistance({ x: unit.x, y: unit.y }, f.x, f.y) <= weapon.range && f.team.name !== unit.team.name)\r\n}\r\n\r\nfunction getHealTargetUnits() {\r\n    return healTargetUnits\r\n}\r\n\r\nfunction setHealTargetUnits(units) {\r\n    healTargetUnits = units\r\n}\r\n\r\nfunction getPathMoves() {\r\n    return movementPath\r\n}\r\n\r\nfunction getPotentialMoves() {\r\n    return movementTiles\r\n}\r\n\r\nfunction setPotentialMoves(unit, destX, destY) {\r\n    movementTiles = []\r\n    movementPath = []\r\n    \r\n    function handleMove(tx, ty, tiles, dist) {\r\n        dist = parseFloat(dist)\r\n        if (dist < 0) {\r\n            return\r\n        }\r\n        let tileList = tiles.filter(f => f.x === tx && f.y === ty)\r\n        if (units.filter(f => f.x === tx && f.y === ty && f !== unit).length === 1) {\r\n            return\r\n        }\r\n        if (tileList.length === 0) {\r\n            tiles.push([tx, ty])\r\n            handleMove(tx + 1, ty, tiles, dist - 1)\r\n            handleMove(tx, ty - 1, tiles, dist - 1)\r\n            handleMove(tx - 1, ty, tiles, dist - 1)\r\n            handleMove(tx, ty + 1, tiles, dist - 1)\r\n        }\r\n    }\r\n    handleMove(unit.x, unit.y, movementTiles, unit.character.Speed())\r\n\r\n    function getSuccessor(q, dx, dy, toX, toY) {\r\n        let s = { x: q.x + dx, y: q.y + dy, parent: q, g: q.g + manhattanDistance(q, q.x + dx, q.y + dy), h: manhattanDistance({ x: q.x + dx, y: q.y + dy }, toX, toY)}\r\n        s.f = s.g + s.h\r\n        return s\r\n    }\r\n\r\n    function astar(tiles, startX, startY, toX, toY, mv) {\r\n        if (!tiles) {\r\n            return []\r\n        }\r\n        if (startX === toX && startY === toY) {\r\n            return []\r\n        }\r\n        if (tiles.filter(f => f[0] === toX && f[1] === toY).length === 0) {\r\n            return []\r\n        }\r\n\r\n        let open = []\r\n        let closed = []\r\n        open.push({ x: startX, y: startY, parent: null, g: 0, h: 0, f: 0 })\r\n        while (open.length > 0) {\r\n            let q = open.sort((a, b) => a.f - b.f)[0]\r\n            \r\n            open = open.filter(f => f.x !== q.x && f.y !== q.y)\r\n\r\n            let successors = []\r\n            \r\n            if (tiles.filter(f => f[0] === q.x + 1 && f[1] === q.y).length > 0 && units.filter(f => f.x === q.x + 1 && f.y === q.y).length === 0) {\r\n                successors.push(getSuccessor(q, 1, 0, toX, toY))\r\n            }\r\n            if (tiles.filter(f => f[0] === q.x - 1 && f[1] === q.y).length > 0 && units.filter(f => f.x === q.x - 1 && f.y === q.y).length === 0) {\r\n                successors.push(getSuccessor(q, -1, 0, toX, toY))\r\n            }    \r\n            if (tiles.filter(f => f[0] === q.x && f[1] === q.y + 1).length > 0 && units.filter(f => f.x === q.x && f.y === q.y + 1).length === 0) {\r\n                successors.push(getSuccessor(q, 0, 1, toX, toY))\r\n            }\r\n            if (tiles.filter(f => f[0] === q.x && f[1] === q.y - 1).length > 0 && units.filter(f => f.x === q.x && f.y === q.y - 1).length === 0) {\r\n                successors.push(getSuccessor(q, 0, -1, toX, toY))\r\n            }\r\n            for (let index in successors) {\r\n                let s = successors[index]\r\n                s.f = s.g + s.h\r\n                if (s.x === toX && s.y === toY) {\r\n                    // Goal\r\n                    let curr = s\r\n                    let path = []\r\n                    while (curr !== null) {\r\n                        path.push(curr)\r\n                        curr = curr.parent\r\n                    }\r\n                    if (path.length > mv + 1) {\r\n                        return []\r\n                    }\r\n                    return path\r\n                }\r\n                \r\n                let closedNode = closed.filter(f => f.x === s.x && f.y === s.y && f.f > s.f)\r\n                if (closedNode.length === 0) {\r\n                    open.push(s)\r\n                }\r\n            }\r\n            closed.push(q)\r\n            if (closed.length > tiles.length) {\r\n                // console.error('Error: More closed tiles than possible tiles in the list. Dumping current path.')\r\n                let curr = q\r\n                let path = []\r\n                while (curr !== null) {\r\n                    curr.f = q.g + manhattanDistance(curr, toX, toY)\r\n                    path.push(curr)\r\n                    curr = curr.parent\r\n                }\r\n                return path\r\n            }\r\n        }\r\n        return open\r\n    }\r\n\r\n    movementPath = astar(movementTiles, unit.x, unit.y, destX, destY, unit.character.Speed())\r\n}\r\n\r\nfunction clearPotentialMoves() {\r\n    movementTiles = []\r\n}\r\n\r\nfunction clearPathMoves() {\r\n    movementPath = []\r\n}\r\n\r\nfunction BezierBlend(t)\r\n{\r\n    return t * t * (3.0 - 2.0 * t)\r\n}\r\n\r\nfunction getCamera() {\r\n    return { ...camera, cellX: () => parseInt(camera.x / gridDimensions().x), cellY: () => parseInt(camera.y / gridDimensions().y),\r\n        setTarget: (x, y, duration, onComplete) => {\r\n            camera.targetStartX = camera.x\r\n            camera.targetStartY = camera.y\r\n            camera.targetX = x\r\n            camera.targetY = y\r\n            camera.targetDuration = duration\r\n            camera.targetElapsed = 0\r\n            camera.onComplete = onComplete ? onComplete : () => {}\r\n        },\r\n        isMoving: () => {\r\n            return camera.targetDuration > 0\r\n        }\r\n    }\r\n}\r\n\r\nfunction setPlacingSprite(sprite) {\r\n    placingSprite = sprite\r\n}\r\n\r\nfunction getPlacingSprite() {\r\n    return placingSprite\r\n}\r\n\r\nfunction triangleContains(ax, ay, bx, by, cx, cy, x, y) {\r\n\r\n    let det = (bx - ax) * (cy - ay) - (by - ay) * (cx - ax)\r\n\r\n    return  det * ((bx - ax) * (y - ay) - (by - ay) * (x - ax)) >= 0 &&\r\n            det * ((cx - bx) * (y - by) - (cy - by) * (x - bx)) >= 0 &&\r\n            det * ((ax - cx) * (y - cy) - (ay - cy) * (x - cx)) >= 0    \r\n\r\n}\r\n\r\nfunction addUnit(teamName, unit, flipped) {\r\n    let actor = new Actor({\r\n        team: getTeam(teamName),\r\n        name: unit.name,\r\n        character: unit,\r\n        spriteName: 'player',\r\n        x: 0,\r\n        y: 0\r\n    })\r\n    if (flipped) {\r\n        actor.sprite.flipped = flipped\r\n    }\r\n    actor.character.data.hp = 2\r\n    units.push(actor)\r\n    return actor\r\n}\r\n\r\nfunction getUnits(teamName) {\r\n    if (teamName) {\r\n        return units.filter(f => f.team.name === teamName)\r\n    } else {\r\n        return units\r\n    }\r\n}\r\n\r\nfunction getUnit(x, y) {\r\n    let unit = units.filter(f => f.x === x && f.y === y)\r\n    return unit.length > 0 ? unit[0] : null\r\n}\r\n\r\nfunction drawMap(delta) {\r\n    let ctx = getContext()\r\n    ctx.save()\r\n\r\n    ctx.translate(-camera.x, -camera.y)\r\n\r\n    drawImage('mars-scape', 0, 0)\r\n\r\n    let cellx = parseInt((getPointer().x + getCamera().x) / gridDimensions().x)\r\n    let celly = parseInt((getPointer().y + getCamera().y) / gridDimensions().y)\r\n\r\n    if (currentPhase() === 'positioning') {\r\n        let ga = ctx.globalAlpha\r\n        ctx.globalAlpha = gridOpacity\r\n        \r\n        let tiles = map.tiles\r\n        for (let t in tiles) {\r\n            let x = tiles[t][0] * gridDimensions().x\r\n            let y = tiles[t][1] * gridDimensions().y\r\n            drawImage('grid-white', x, y)\r\n        }\r\n\r\n        for (let t in map.teamA) {\r\n            let x = map.teamA[t][0] * gridDimensions().x\r\n            let y = map.teamA[t][1] * gridDimensions().y\r\n            drawImage('grid-yellow', x, y)\r\n        }\r\n        for (let t in map.teamB) {\r\n            let x = map.teamB[t][0] * gridDimensions().x\r\n            let y = map.teamB[t][1] * gridDimensions().y\r\n            drawImage('grid-yellow', x, y)\r\n        }\r\n        ctx.globalAlpha = ga\r\n    }\r\n\r\n    movementTiles.forEach(t => drawImage('grid-green', t[0] * gridDimensions().x, t[1] * gridDimensions().y))\r\n   \r\n    if (getPathMoves().length > 0) {\r\n        getPathMoves().forEach((loc, index, arr) => {\r\n            if (index === 0) {\r\n                let diffx = loc.x - arr[1].x\r\n                let diffy = loc.y - arr[1].y\r\n                let imgid = 'grid-movement-right'\r\n                if (diffx < 0) {\r\n                    imgid = 'grid-movement-left'\r\n                }\r\n                if (diffy < 0) {\r\n                    imgid = 'grid-movement-up'\r\n                } else if (diffy > 0) {\r\n                    imgid = 'grid-movement-down'\r\n                }\r\n                drawImage(imgid, loc.x * gridDimensions().x, loc.y * gridDimensions().y)\r\n            } else if (index !== arr.length - 1) {\r\n                drawImage('grid-movement-node', loc.x * gridDimensions().x, loc.y * gridDimensions().y)\r\n            }\r\n        })\r\n    }\r\n\r\n    // Highlighted mouse cell.\r\n    drawImage('grid-selected', cellx * gridDimensions().x, celly * gridDimensions().y)\r\n\r\n    if (placingSprite) {\r\n        placingSprite.x = cellx * gridDimensions().x - 12\r\n        placingSprite.y = celly * gridDimensions().y - 20\r\n        placingSprite.update(delta)\r\n        placingSprite.draw()\r\n        bfontjs.DrawText(getContext(), placingSprite.x + 12, placingSprite.y + 44, placingSprite.actor.name, '#000000cc', font)\r\n        bfontjs.DrawText(getContext(), placingSprite.x + 12, placingSprite.y + 43, placingSprite.actor.name, '#f1f1f1ff', font)\r\n    }\r\n\r\n    getTeams().forEach(team => {\r\n        let units = getUnits(team.name).filter(f => f.placed)\r\n        for (let u in units) {\r\n            units[u].sprite.update(delta)\r\n            let colr = '#f1f1f1cc'\r\n            if (getCurrentUnit() === units[u]) {\r\n                colr = '#f1f1f1ff'\r\n                drawImage('unit-selected', units[u].x * gridDimensions().x, units[u].y * gridDimensions().y)\r\n            }\r\n            units[u].sprite.draw()\r\n            for (let ap = 0; ap < units[u].actionPointsPerTurn; ap++) {\r\n                if (ap <= units[u].actionPoints - 1) {\r\n                    drawImage('action-star-full', units[u].sprite.x - 1, units[u].sprite.y + 41 - ap * 11)\r\n                } else {\r\n                    drawImage('action-star-empty', units[u].sprite.x  - 1, units[u].sprite.y + 41 - ap * 11)\r\n                }\r\n            }\r\n            //drawImage(\"ui-max-healthbar\", units[u].sprite.x + 12, units[u].sprite.y + 44)\r\n\r\n            let maxBarWidth = bfontjs.CalculateTextWidth(units[u].name, font) + 4 //46\r\n\r\n            getContext().drawImage(getImage('ui-max-healthbar'), 0, 0, 10, 8, units[u].sprite.x + 12, units[u].sprite.y + 45, maxBarWidth - 4, 8)\r\n            getContext().drawImage(getImage('ui-max-healthbar'), 11, 0, 4, 8, units[u].sprite.x + 12 + maxBarWidth - 4, units[u].sprite.y + 45, 4, 8)\r\n\r\n            if (units[u].character.Hp) {\r\n                let hpWidth = parseInt((units[u].character.Hp() / units[u].character.MaxHp()) * maxBarWidth)\r\n                getContext().drawImage(getImage('ui-healthbar'), 0, 0, 10, 8, units[u].sprite.x + 11, units[u].sprite.y + 43, hpWidth - 4, 8)\r\n                getContext().drawImage(getImage('ui-healthbar'), 11, 0, 4, 8, units[u].sprite.x + 11 + hpWidth - 4, units[u].sprite.y + 43, 4, 8)\r\n            }\r\n\r\n            bfontjs.DrawText(getContext(), units[u].sprite.x + 12, units[u].sprite.y + 44, units[u].name, '#000000cc', font)\r\n            bfontjs.DrawText(getContext(), units[u].sprite.x + 12, units[u].sprite.y + 43, units[u].name, colr, font)\r\n        }\r\n    })\r\n\r\n    ctx.restore()\r\n\r\n    if (camera.targetDuration > 0) {\r\n        //parseInt(startVal + (this.anim.destination[param] - startVal) * BezierBlend(this.anim.elapsed / this.anim.duration))\r\n        camera.x = parseInt(camera.targetStartX + (camera.targetX - camera.targetStartX) * BezierBlend(camera.targetElapsed / camera.targetDuration))\r\n        camera.y = parseInt(camera.targetStartY + (camera.targetY - camera.targetStartY) * BezierBlend(camera.targetElapsed / camera.targetDuration))\r\n        camera.targetElapsed += delta\r\n        if (camera.targetElapsed >= camera.targetDuration) {\r\n            camera.targetDuration = 0\r\n            camera.x = camera.targetX\r\n            camera.y = camera.targetY\r\n            camera.onComplete()\r\n            camera.onComplete = () => {}\r\n        }\r\n    }\r\n}\r\n\r\nfunction gridDimensions() {\r\n    return { x: gridSize, y: gridSize }\r\n}\r\n\r\nfunction buildMap() {\r\n    var tiles = []\r\n    var teamATiles = []\r\n    var teamBTiles = []\r\n\r\n    for (let y = 0; y < height; y++) {\r\n        for (let x = 0; x < width; x++) {\r\n            tiles.push([x, y])\r\n            \r\n            if (triangleContains(0, parseInt(height / 2) - parseInt(startAreaHeight / 2), startAreaWidth, parseInt(height / 2), 0, parseInt(height / 2) + parseInt(startAreaHeight / 2), x, y)) {\r\n                teamATiles.push([x, y])\r\n            }\r\n            //if (triangleContains(width, parseInt(height / 2) - parseInt(startAreaHeight / 2), width - startAreaWidth, parseInt(height / 2), width, parseInt(height / 2) + parseInt(startAreaHeight / 2), x, y)) {\r\n            if (triangleContains(width, parseInt(height / 2) - parseInt(startAreaHeight / 2), width - startAreaWidth, parseInt(height / 2), width, parseInt(height / 2) + parseInt(startAreaHeight / 2), x, y)) {\r\n                teamBTiles.push([x, y])\r\n            }\r\n        }\r\n    }\r\n    map = {\r\n        tiles: tiles, teamA: teamATiles, teamB: teamBTiles, allTiles: tiles\r\n    }\r\n    map.hasTile = (x, y) => {\r\n        return map.tiles.filter(f => f[0] === x && f[1] === y).length > 0\r\n    }\r\n    map.hasTeamATile = (x, y) => {\r\n        return map.teamA.filter(f => f[0] === x && f[1] === y).length > 0\r\n    }\r\n    map.hasTeamBTile = (x, y) => {\r\n        return map.teamB.filter(f => f[0] === x && f[1] === y).length > 0\r\n    }\r\n    map.tiles = map.tiles.filter(f => !map.teamA.filter(a => a[0] === f[0] && a[1] === f[1]).length && !map.teamB.filter(b => f[0] === b[0] && f[1] === b[1]).length)\r\n    console.log('map =', map)\r\n    return map\r\n}\r\n\r\nexport { buildMap, drawMap, gridDimensions, addUnit, setPlacingSprite, getPlacingSprite, getUnits, getUnit, getCamera, setPotentialMoves, clearPotentialMoves,\r\n    getPathMoves, clearPathMoves, getPotentialMoves, getHealTargetUnits, setHealTargetUnits, getAttackTargetUnits, setAttackTargetUnits, findAttackTargets, clearAttackTargets }","import { gridDimensions } from \"./map.js\"\r\nimport { buildSprite } from \"./sprites.js\"\r\nimport { getContext } from \"./images.js\"\r\n\r\nclass Actor {\r\n    constructor(params) {\r\n        this.actionPoints = 2\r\n        this.actionPointsPerTurn = 2\r\n        this.team = params.team\r\n        this.name = params.name\r\n        this.character = params.character\r\n        this.placed = false\r\n        this.sprite = buildSprite(params.spriteName, params.x ? params.x : 0, params.y ? params.y : 0, 'idle', () => {}, this.character.data.spriteName)\r\n        this.sprite.actor = this\r\n    }\r\n\r\n    MapPosition() {\r\n        return { x: parseInt(this.sprite.x / gridDimensions().x), y: parseInt(this.sprite.y / gridDimensions().y) }\r\n    }\r\n\r\n    Position() {\r\n        return { x: this.sprite.x, y: this.sprite.y }\r\n    }\r\n\r\n    MapCoords() {\r\n        return { x: parseInt(this.sprite.x / gridDimensions().x), y: parseInt(this.sprite.y / gridDimensions().y) }\r\n    }\r\n\r\n    Draw(delta) {\r\n        this.sprite.draw(delta)\r\n    }\r\n}\r\n\r\nexport default Actor\r\n","import { Pipeline } from './pipeline.js'\r\n\r\nimport characters from \"./characters.json\"\r\n\r\nclass Character {\r\n    constructor(name) {\r\n        // data property holds base class data from json\r\n        try {\r\n            this.data = characters.filter(f => f.name === name)[0]\r\n            this.data.maxHp = this.data.hp\r\n            this.name = this.data.name\r\n            this.equipment = []\r\n        } catch {\r\n            this.data = {}\r\n            console.error(`Could not locate template for ${name}.`)\r\n        }\r\n\r\n        // effectModifiers property holds active effect modifiers.\r\n        this.effectModifiers = {}\r\n\r\n        // Active effect modifiers, evaluated each phase and removed when\r\n        // expired.\r\n        this.effects = []\r\n    }\r\n\r\n    EquipItem(item) {\r\n        \r\n    }\r\n\r\n    /**\r\n     * Iterate over the effects currently active on this character and\r\n     * do housekeeping (decrement ttl, removing ttl = 0, etc.)\r\n     */\r\n    UpdateEffects() {\r\n        for (let e in this.effects) {\r\n            let effect = this.effects[e]\r\n            if (effect.ttl) {\r\n                effect.ttl--\r\n            }\r\n            if (effect.ttl <= 0) {\r\n                this.RemoveEffectModifier(effect)\r\n            }\r\n        }\r\n        this.effects = this.effects.filter(f => f.ttl > 0)\r\n    }\r\n\r\n    AddEffect(effect) {\r\n        if (effect.ttl) {\r\n            this.effects.push(effect)\r\n        }\r\n        if (effect.attribute !== undefined) {\r\n            this.AddEffectModifier(effect.attribute, effect.amount)\r\n        }\r\n    }\r\n    RemoveEffectModifier(effect) {\r\n        if (effect.attribute !== undefined) {\r\n            this.AddEffect(effect.attribute, effect.amount * -1)\r\n        }\r\n    }\r\n\r\n    AddEffectModifier(attribute, amount) {\r\n        if (this.effectModifiers[attribute] === undefined) {\r\n            this.effectModifiers[attribute] = 0\r\n        }\r\n        this.effectModifiers[attribute] += amount\r\n    }\r\n\r\n    EffectModifier(attribute) {\r\n        if (this.effectModifiers[attribute] !== undefined) {\r\n            return this.effectModifiers[attribute]\r\n        }\r\n        return 0\r\n    }\r\n\r\n    Name() {\r\n        return this.data.name\r\n    }\r\n\r\n    Cost() {\r\n        return this.data.Cost + this.EffectModifier('cost')\r\n    }\r\n\r\n    SetEquipment(equipment) {\r\n        this.equipment = equipment\r\n    }\r\n\r\n    GetEquipment() {\r\n        return this.equipment\r\n    }\r\n\r\n    EquipmentAndAbilities(eqab) {\r\n        if (eqab !== undefined) {\r\n            this.data.equipAbilities = eqab\r\n        }\r\n        return this.data.equipAbilities + this.EffectModifier('equipAbilities')\r\n    }\r\n\r\n    GunnerySkill() {\r\n        return this.data.gunnerySkill + this.EffectModifier('gunnerySkill')\r\n    }\r\n\r\n    MeleeSkill() {\r\n        return this.data.meleeSkill + this.EffectModifier('meleeSkill')\r\n    }\r\n\r\n    Speed() {\r\n        return this.data.speed + this.EffectModifier('speed')\r\n    }\r\n\r\n    Hp() {\r\n        return this.data.hp + this.EffectModifier('hp')\r\n    }\r\n\r\n    MaxHp() {\r\n        return this.data.maxHp + this.EffectModifier('maxHp')\r\n    }\r\n}\r\n\r\n export { Character }","import { getImage } from '../images.js'\r\nimport characters from '../characters.json'\r\nimport menus from './menus.json'\r\nimport { Character } from '../character.js'\r\nimport { ChangeMenu } from '../menuScene.js'\r\n\r\nvar squad = []\r\nvar stars = 16\r\n\r\nlet menu = menus.filter(f => f.id === 'GameSetup')[0]\r\n\r\nfunction hireCharacter(name) {\r\n    let char = new Character(name)\r\n    if (stars - char.Cost() >= 0) {\r\n        squad.push(char)\r\n        stars -= char.Cost()\r\n    }\r\n}\r\n\r\nfunction fireCharacter(name) {\r\n    let char = new Character(name)\r\n    let charIndex = squad.findIndex(f => f.name === name)\r\n    if (charIndex > -1) {\r\n        stars += char.Cost()\r\n        squad = squad.filter((f, i) => i !== charIndex)\r\n    }\r\n}\r\n\r\nfunction onUpdate(ui) {\r\n    let paramsTealFrame = { innerRect: { x: 6, y: 8, w: 53 , h: 47 }, type: 'ButtonImage', color: '#122020ff', highlight: '#122020ff', bgcolor: '#000000cc', image: getImage('ui-frame-teal'), imageDown: getImage('ui-frame-teal'), imageHover: getImage('ui-frame-teal') }\r\n    let paramsTealButton = { innerRect: { x: 5, y: 4, w: 9, h: 2 }, type: 'ButtonImage', color: '#122020ff', highlight: '#fa6a0aff', bgcolor: '#000000cc', image: getImage('ui-button-teal'), imageDown: getImage('ui-button-teal-down'), imageHover: getImage('ui-button-teal') }\r\n    let paramsGreyButton = { innerRect: { x: 5, y: 4, w: 9, h: 2 }, type: 'ButtonImage', color: '#122020ff', highlight: '#122020ff', bgcolor: '#000000cc', image: getImage('ui-button-grey'), imageDown: getImage('ui-button-grey-down'), imageHover: getImage('ui-button-grey') }\r\n    let paramsLabel = { type: 'Element', color: '#cacacaff', highlight: '#cacacaff', bgcolor: '#00000000' }\r\n    let frameMenu = ui.Element({ id: 'frameMenu', rect: {x: 5, y: 28, w: 128, h: 160 }, ...paramsTealFrame,\r\n        anim: {\r\n            curve: 'bezier',\r\n            duration: 100,\r\n            params: {\r\n                y: -128\r\n            },\r\n            onComplete: (el) => { el }\r\n        }\r\n    })\r\n\r\n    let statsMenu = ui.Element({ id: 'frameStats', rect: {x: 135, y: 28, w: 128, h: 110 }, ...paramsTealFrame,\r\n        anim: {\r\n            curve: 'bezier',\r\n            duration: 100,\r\n            params: {\r\n                x: 260\r\n            },\r\n            onComplete: (el) => { el }\r\n        }\r\n    })\r\n\r\n    let buttonsMenu = ui.Element({ id: 'frameButtons', rect: {x: 135, y: 156, w: 128, h: 32 }, ...paramsTealFrame,\r\n        anim: {\r\n            curve: 'bezier',\r\n            duration: 100,\r\n            params: {\r\n                y: 190\r\n            },\r\n            onComplete: (el) => { el }\r\n        }\r\n    })\r\n\r\n    let classDescription = squad.length === 0 ? 'Hire your squad and click next\\nto continue.' : `Squad Size: ${squad.length}` + (stars === 0 ? `\\nNo stars remaining.\\nClick 'Next'.` : '')\r\n    if (!frameMenu.anim) {\r\n        let lblStars = ui.Element({ id: 'lblMenuStars', text: `${stars}`, rect: { x: 98, y: 10, w: 64, h: 11 }, ...paramsLabel}, frameMenu)\r\n        ui.Element({ id: 'imgStars', type: 'Image', x: 108, y: 8, image: getImage('star-icon') }, frameMenu)\r\n        let dy = 19\r\n        for (let o in menu.Options) {\r\n            let option = menu.Options[o].text\r\n            let name = option.split(' ')[0]\r\n            let character = characters.filter(f => f.name === name)[0]\r\n            option = option.replace('{0}', squad.filter(f => f.name === name).length)\r\n            let el = ui.Element({ id: 'lblMenu' + o, text: option, rect: {x: 16, y: dy + 2, w: 76, h: 14}, ...paramsLabel }, frameMenu)\r\n            let elAdd = ui.Element({ id: 'lblMenuAdd' + o, text: '+', rect: {x: 94, y: dy, w: 14, h: 14}, ...paramsGreyButton }, frameMenu)\r\n            if (elAdd.Clicked()) {\r\n                hireCharacter(name)\r\n            }\r\n            let elRemove = ui.Element({ id: 'lblMenuRem' + o, text: '-', rect: {x: 109, y: dy, w: 14, h: 14}, ...paramsGreyButton }, frameMenu)\r\n            if (elRemove.Clicked()) {\r\n                fireCharacter(name)\r\n            }\r\n\r\n            if (el.Hover() || elAdd.Hover() || elRemove.Hover()) {\r\n                classDescription = [\r\n                    `${name}`, `Cost: ${character.Cost}`, `Melee Skill: ${character.meleeSkill}`, `Gunnery Skill: ${character.gunnerySkill}`, `Speed: ${character.speed}`\r\n                    , `HP: ${character.speed}`, `Equipment/Abilities`, `Points: ${character.equipAbilities}`\r\n                ].join('\\n')\r\n            }\r\n\r\n            dy += 15\r\n        }\r\n    }\r\n\r\n    if (!buttonsMenu.anim) {\r\n        let btnNext = ui.Element({ id: 'btnNext', text: 'Next', rect: { x: 72, y: 8, w: 50, h: 16 }, ...paramsTealButton }, buttonsMenu)\r\n        if (btnNext.Hover()) {\r\n            classDescription = 'Accept squad and move\\non to outfitting equipment\\nand abilities.'\r\n        }\r\n        if (btnNext.Clicked()) {\r\n            transitionOut(frameMenu, statsMenu, buttonsMenu)\r\n        }\r\n    }\r\n\r\n    if (!statsMenu.anim) {\r\n        if (classDescription.length) {\r\n            let lblTooltip = ui.Element({ id: 'lblTooltip', text: classDescription, rect: { x: 8, y: 8, w: 110, h: 100 }, ...paramsLabel}, statsMenu)\r\n        }\r\n    }\r\n\r\n    function transitionOut(frameMenu, statsMenu, buttonsMenu) {\r\n            let toFrame = { ...frameMenu.Rect() }\r\n            toFrame.x = -130\r\n            frameMenu.Animate(190, { ...frameMenu.Rect() }, toFrame)\r\n            let toStats = { ...statsMenu.Rect() }\r\n            toStats.x = 320\r\n            statsMenu.Animate(190, { ...statsMenu.Rect() }, toStats)\r\n            let toButtons = buttonsMenu.Rect()\r\n            toButtons.y = 200\r\n            buttonsMenu.Animate(200, { ...buttonsMenu.Rect() }, toButtons, () => ChangeMenu('SetupEquipment'))\r\n    }\r\n}\r\n\r\nexport { onUpdate, squad }\r\n","import { getImage } from '../images.js'\r\nimport characters from '../characters.json'\r\nimport menus from './menus.json'\r\nimport { Character } from '../character.js'\r\nimport { ChangeMenu } from '../menuScene.js'\r\nimport { squad } from './gameSetup.js'\r\nimport equipment from '../equipment.json'\r\nimport { Start } from '../main.js'\r\nimport { buildMap } from '../map.js'\r\n\r\nlet selIndex = -1\r\nlet equip = []\r\nlet character = null\r\n\r\nfunction selCharacter(index) {\r\n    if (index < 0 || index > squad.length - 1) {\r\n        return\r\n    }\r\n    selIndex = index\r\n    character = squad[selIndex]\r\n    equip = getEquipment(squad[selIndex].name)\r\n}\r\n\r\nfunction getEquipment(characterType) {\r\n    return equipment.filter(f => f.characters.filter(c => c === characterType).length)\r\n}\r\n\r\nfunction onUpdate(ui) {\r\n    let paramsGreyListImage = {\r\n        bgcolor: '#122020ff',\r\n        color: '#cacacaff',\r\n        bgcolorSelected: '#122020ff',\r\n        colorSelected: '#f1f1f1ff',\r\n        highlight: '#f1f1f1ff',\r\n        scrollbarWidth: 9,\r\n        scrollAreaImage: {\r\n            image: getImage('ui-button-scroll-area'),\r\n            hover: getImage('ui-button-scroll-area'),\r\n            pressed: getImage('ui-button-scroll-area'),\r\n            innerRect: { x: 3, y: 4, w: 7, h: 40 }\r\n        },\r\n        caratImage: {\r\n            image: getImage('ui-button-carat'),\r\n            hover: getImage('ui-button-carat-hover'),\r\n            pressed: getImage('ui-button-carat-pressed')\r\n        },\r\n        upImage: {\r\n            image: getImage('ui-button-scroll-up'),\r\n            hover: getImage('ui-button-scroll-up-hover'),\r\n            pressed: getImage('ui-button-scroll-up-pressed')\r\n        },\r\n        downImage: {\r\n            image: getImage('ui-button-scroll-down'),\r\n            hover: getImage('ui-button-scroll-down-hover'),\r\n            pressed: getImage('ui-button-scroll-down-pressed')\r\n        }\r\n    }\r\n\r\n    let paramsGreyListImageMulti = { ...paramsGreyListImage, multiSelect: true,\r\n        checkboxImage: {\r\n            image: getImage('ui-checkbox'),\r\n            hover: getImage('ui-checkbox-hover'),\r\n            pressed: getImage('ui-checkbox-pressed')\r\n        }\r\n    }\r\n    paramsGreyListImage.bgcolorSelected = '#5daf8dff'\r\n    paramsGreyListImage.colorSelected = '#122020ff'\r\n\r\n    let paramsTealFrame = { innerRect: { x: 6, y: 8, w: 53 , h: 47 }, type: 'ButtonImage', color: '#122020ff', highlight: '#122020ff', bgcolor: '#000000cc', image: getImage('ui-frame-teal'), imageDown: getImage('ui-frame-teal'), imageHover: getImage('ui-frame-teal') }\r\n    let paramsTealButton = { innerRect: { x: 5, y: 4, w: 9, h: 2 }, type: 'ButtonImage', color: '#122020ff', highlight: '#fa6a0aff', bgcolor: '#000000cc', image: getImage('ui-button-teal'), imageDown: getImage('ui-button-teal-down'), imageHover: getImage('ui-button-teal') }\r\n    let paramsGreyButton = { innerRect: { x: 5, y: 4, w: 9, h: 2 }, type: 'ButtonImage', color: '#122020ff', highlight: '#122020ff', bgcolor: '#000000cc', image: getImage('ui-button-grey'), imageDown: getImage('ui-button-grey-down'), imageHover: getImage('ui-button-grey') }\r\n    let paramsLabel = { type: 'Element', color: '#cacacaff', highlight: '#cacacaff', bgcolor: '#00000000' }\r\n    let frameMenu = ui.Element({ id: 'frameMenuSquad', rect: {x: 5, y: 8, w: 72, h: 110 }, ...paramsTealFrame,\r\n        anim: {\r\n            curve: 'bezier',\r\n            duration: 100,\r\n            params: {\r\n                x: -100\r\n            },\r\n            onComplete: (el) => { el }\r\n        }\r\n    })\r\n    \r\n    if (!frameMenu.anim) {\r\n        let eqabMenu = ui.Element({ id: 'eqabMenu', rect: {x: 79, y: 8, w: 235, h: 110 }, ...paramsTealFrame,\r\n            anim: {\r\n                curve: 'bezier',\r\n                duration: 100,\r\n                params: {\r\n                    y: -140\r\n                },\r\n                onComplete: (el) => { el }\r\n            }\r\n        })\r\n        if (!eqabMenu.anim) {\r\n            let listEquip = null\r\n            let el = ui.Element({ id: 'charList', type: 'ListImage', list: squad.map(m => m.name), rect: {x: 8, y: 9, w: 55, h: 90 }, ...paramsGreyListImage}, frameMenu)\r\n            if (el.Clicked()) {\r\n                selCharacter(el.currentItem)\r\n                ui.RemoveElement('charEquipList')\r\n                listEquip = ui.Element({ id: 'charEquipList', type: 'ListImage', list: equip.map(m => m.name), rect: {x: 8, y: 19, w: 128, h: 80 }, ...paramsGreyListImageMulti}, eqabMenu)\r\n                listEquip.selectedList = character.equipment.map(m => equip.map(eq => eq.name).includes(m.name) ? equip.map(eq => eq.name).findIndex(f => f === m.name) : undefined).filter(f => f !== undefined)\r\n                console.log('charEquipList remove', character.equipment, equip, listEquip.selectedList)\r\n            }\r\n            if (selIndex > -1) {\r\n                ui.Element({ id: 'charEquip', text: 'Equipment:', rect: { x: 8, y: 8, w: 64, h: 9 }}, eqabMenu)\r\n                listEquip = ui.Element({ id: 'charEquipList', type: 'ListImage', list: equip.map(m => m.name), rect: {x: 8, y: 19, w: 128, h: 80 }, ...paramsGreyListImageMulti}, eqabMenu)\r\n                let selList = listEquip.selectedList.map(m => equip[m])\r\n                character.SetEquipment([...selList])\r\n                let eq = equip[listEquip.hoverItem]\r\n                if (eq) {\r\n                    let classDescription = []\r\n                    if (eq.speed) {\r\n                        classDescription.push(`Speed ${eq.speed}`)\r\n                    }\r\n                    if (eq.range > 0) {\r\n                        classDescription.push(`Gunnery ${eq.damage}`)\r\n                        classDescription.push(`Range ${eq.range}`)\r\n                    } else {\r\n                        classDescription.push(`Melee ${eq.damage}`)\r\n                    }\r\n                    classDescription.push(`Cost ${eq.cost}`)\r\n                    ui.Element({ id: 'charEquipDescription', text: classDescription.join('\\n'), rect: { x: 140, y: 18, w: 64, h: 9 }}, eqabMenu)              \r\n                }\r\n            }\r\n\r\n            let buttonsMenu = ui.Element({ id: 'frameButtons', rect: {x: 165, y: 160, w: 128, h: 32 }, ...paramsTealFrame,\r\n                anim: {\r\n                    curve: 'bezier',\r\n                    duration: 100,\r\n                    params: {\r\n                        y: 190\r\n                    },\r\n                    onComplete: (el) => { el }\r\n                }\r\n            })\r\n            if (!buttonsMenu.anim) {\r\n                let btnNext = ui.Element({ id: 'btnNext', text: 'Next', rect: { x: 72, y: 8, w: 50, h: 16 }, ...paramsTealButton }, buttonsMenu)\r\n                if (btnNext.Clicked()) {\r\n                    transitionOut(frameMenu, eqabMenu, buttonsMenu, () => {\r\n                        ChangeMenu('end')\r\n                        equip = []\r\n                        Start(squad, buildMap())\r\n                    })\r\n                }\r\n                let btnPrev = ui.Element({ id: 'btnPrev', text: 'Back', rect: { x: 8, y: 8, w: 50, h: 16 }, ...paramsGreyButton }, buttonsMenu)\r\n                if (btnPrev.Clicked()) {\r\n                    equip = []\r\n                    transitionOut(frameMenu, eqabMenu, buttonsMenu, () => ChangeMenu('GameSetup'))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function transitionOut(frameMenu, eqabMenu, buttonsMenu, onComplete) {\r\n        let toButtons = buttonsMenu.Rect()\r\n        toButtons.y = 200\r\n        buttonsMenu.Animate(200, { ...buttonsMenu.Rect() }, toButtons, onComplete)\r\n    }\r\n}\r\n\r\nexport { onUpdate }\r\n","import input, { GetInputKeys, GetInputValue } from './input.js'\r\nimport { getContext, drawImage, getImage } from \"./images.js\"\r\nimport { Start, pointer } from './main.js'\r\nimport { Character } from './character.js'\r\nimport { buildSprite } from './sprites.js'\r\n\r\n//import menus from './menus.json'\r\nimport equipment from './equipment.json'\r\nimport { buildMap } from './map.js'\r\nimport { addTeam } from './teams.js'\r\n\r\nimport { onUpdate as onGameSetupUpdate } from './menus/gameSetup.js'\r\nimport { onUpdate as onEquipSetupUpdate } from './menus/equipSetup.js'\r\n\r\nlet imu = null\r\n\r\nlet ctx = null\r\n\r\nvar stars = 16\r\n\r\nvar squad = []\r\n\r\nvar background = buildSprite('background', 0, 0, 'idle')\r\n\r\nvar menu = null\r\nvar menuItems = []\r\nvar menuItem = {}\r\nvar currentMenuId = 'Main'\r\nvar currentMenuItem = 'Start'\r\nvar currentMenuColumn = 0\r\n\r\nvar currentCharacterEquip = null\r\n\r\n// var menuMethods = {\r\n//     callback_OnRenderStars: (text, replacements) => {\r\n//         return [stars.toString()]\r\n//     },\r\n//     callback_OnRenderHireSquad: (text, replacements) => {\r\n//         return [squad.length]\r\n//     },\r\n\r\n//     callback_OnRenderCharacter: (text, replacements) => {\r\n//         let name = text.split(' ')[0].replace('>', '')\r\n//         return [(squad.filter(f => f.name === name).length)]\r\n//     },\r\n\r\n//     callback_HireCharacter: (text) => {\r\n//         let name = text.split(' ')[0].replace('>', '')\r\n//         let char = new Character(name)\r\n//         if (stars - char.Cost() >= 0) {\r\n//             squad.push(char)\r\n//             stars -= char.Cost()\r\n//         }\r\n//     },\r\n\r\n//     callback_StartGame: () => {\r\n//         buildMap()\r\n//         Start(squad)\r\n//     },\r\n\r\n//     callback_SelectCharacterEquip: (text) => {\r\n//         currentCharacterEquip = text\r\n//     },\r\n\r\n//     callback_SetupEquipment: (text) => {\r\n//         ChangeMenu('SetupEquipment')\r\n//         let menu = menus.filter(f => f.id === 'SetupEquipment')[0]\r\n//         let nextIndex = menu.Options.findIndex(f => f.text === 'Next')\r\n//         menu.Options = [\r\n//             ...squad.map((m, i) => {\r\n//             return {\r\n//                 text: `${i + 1}. ${m.name}`,\r\n//                 onSelect: 'callback_SelectCharacterEquip',\r\n//                 width: 160,\r\n//                 column: 0\r\n//             }}),\r\n//             menu.Options[nextIndex]\r\n//         ]\r\n//     }\r\n// }\r\n\r\nlet menuDx = 39\r\nlet menuDy = 42\r\n\r\nfunction Action(actionId) {\r\n    if (actionId.includes('callback_')) {\r\n        return menuMethods[actionId] ? menuMethods[actionId] : () => {}\r\n    } else if (actionId.includes('menu_')) {\r\n        let action = actionId.split('_')\r\n        ChangeMenu(action[1])\r\n    }\r\n    return () => {}\r\n}\r\n\r\nfunction ChangeMenu(id) {\r\n    currentMenuColumn = 0\r\n    currentMenuId = id\r\n    imu.RemoveElements()\r\n\r\n    if (id === 'GameSetup') {\r\n        imu.onUpdate = onGameSetupUpdate\r\n    } else if (id === 'SetupEquipment') {\r\n        imu.onUpdate = onEquipSetupUpdate\r\n    } else {\r\n        console.log('id =', id)\r\n        imu.onUpdate = () => {}\r\n    }\r\n}\r\n\r\n// function GetMenuItems(menuId) {\r\n//     let menu = GetMenu(menuId)\r\n//     let items = menu.Options.filter(f => f.onSelect && (f.column === undefined || f.column === currentMenuColumn))\r\n//     if (items.length > 0 && currentMenuItem === '') {\r\n//         currentMenuItem = items[0].text\r\n//     }\r\n//     return items\r\n// }\r\n\r\n// function GetMenu(id) {\r\n//     try {\r\n//         return menus.filter(f => f.id === id)[0]\r\n//     } catch { return null }\r\n// }\r\n\r\nfunction StartMenu(id) {\r\n    // input.listen()\r\n\r\n    // input.released('moveDown', () => {\r\n    //     menu = GetMenu(currentMenuId)\r\n    //     menuItems = GetMenuItems(currentMenuId) //menu.Options.filter(f => f.onSelect)\r\n    //     menuItem = menuItems.filter(f => f.text === currentMenuItem)[0]\r\n    //     let index = menuItems.findIndex(f => f.text === currentMenuItem)\r\n    //     index++\r\n    //     if (index >= menuItems.length) {\r\n    //         index = 0\r\n    //     }\r\n    //     currentMenuItem = menuItems[index].text\r\n    // })\r\n    // input.released('moveUp', () => {\r\n    //     menu = GetMenu(currentMenuId)\r\n    //     menuItems = GetMenuItems(currentMenuId)//menu.Options.filter(f => f.onSelect)\r\n    //     menuItem = menuItems.filter(f => f.text === currentMenuItem)[0]\r\n    //     let index = menuItems.findIndex(f => f.text === currentMenuItem)\r\n    //     index--\r\n    //     if (index < 0) {\r\n    //         index = menuItems.length - 1\r\n    //     }\r\n    //     currentMenuItem = menuItems[index].text\r\n    // })\r\n    // input.released('attack', () => {\r\n    //     menu = GetMenu(currentMenuId)\r\n    //     menuItems = GetMenuItems(currentMenuId) //menu.Options.filter(f => f.onSelect)\r\n    //     try {\r\n    //         menuItem = menuItems.filter(f => f.text === currentMenuItem)[0]    \r\n    //         if (menuItem.onSelect) {\r\n    //             Action(menuItem.onSelect)(menuItem.text)\r\n    //         }\r\n    //     } catch {}\r\n    // })\r\n}\r\n\r\nfunction drawFrame(delta) {\r\n    if (!ctx) {\r\n        ctx = getContext()\r\n    }\r\n    background.draw(0, 0)\r\n    background.update(delta)\r\n    drawUI(delta)\r\n}\r\n\r\nfunction OnRender(text, onRender) {\r\n    let arr = text.split(/{[0-9]}/)\r\n    let replacements = []\r\n    for (let r in arr) {\r\n        replacements.push(`{${r}}`)\r\n    }\r\n    let values = Action(onRender)(text, arr)\r\n    for (let v in values) {\r\n        text = text.replace(replacements[v], values[v])\r\n    }\r\n    return text\r\n}\r\n\r\nfunction drawUI(delta) {\r\n    if (!imu) {\r\n        imu = new imui.ImUI(ctx.canvas)\r\n        imu.font = font\r\n\r\n        let paramsTealFrame = { innerRect: { x: 6, y: 8, w: 53 , h: 47 }, type: 'ButtonImage', color: '#122020ff', highlight: '#122020ff', bgcolor: '#000000cc', image: getImage('ui-frame-teal'), imageDown: getImage('ui-frame-teal'), imageHover: getImage('ui-frame-teal') }\r\n        let paramsTealButton = { innerRect: { x: 5, y: 4, w: 9, h: 2 }, type: 'ButtonImage', color: '#122020ff', highlight: '#fa6a0aff', bgcolor: '#000000cc', image: getImage('ui-button-teal'), imageDown: getImage('ui-button-teal-down'), imageHover: getImage('ui-button-teal') }\r\n\r\n        imu.onUpdate = (ui) => {\r\n            let frameMenu = ui.Element({ id: 'frameMenu', rect: {x: 38, y: 28, w: 97, h: 96}, ...paramsTealFrame,\r\n                anim: {\r\n                    curve: 'bezier',\r\n                    duration: 100,\r\n                    params: {\r\n                        w: 12, h: 12\r\n                    },\r\n                    onComplete: (el) => { el }\r\n                }\r\n            })\r\n\r\n            if (!frameMenu.anim) {\r\n                let el = ui.Element({ id: 'lblMenu', text: 'Start', rect: {x: 6, y: 10, w: 86, h: 19}, ...paramsTealButton, }, frameMenu)\r\n                if (el.Clicked()) {\r\n                    // frameMenu.anim = {\r\n                    //     curve: 'bezier',\r\n                    //     duration: 100,\r\n                    //     params: {x: 38, y: 28, w: 97, h: 96},\r\n                    //     onComplete: (el) => { ChangeMenu('GameSetup') }\r\n                    // }\r\n                    // frameMenu.rect = {x: -116, y: 10, w: 86, h: 19}\r\n                    frameMenu.Animate(100, frameMenu.Rect(),  {x: -116, y: 28, w: 12, h: 12 }, () => ChangeMenu('GameSetup'))   \r\n                }\r\n            }\r\n        }\r\n    }\r\n    imu.Draw()\r\n}\r\n\r\nexport { drawFrame, StartMenu, ChangeMenu }","import images from './images.js'\r\nimport sfx from './sfx.js'\r\nimport music from './music.js'\r\nimport sprites from './sprites.js'\r\nimport Actor from './actor.js'\r\nimport { setContext, loadAllImages } from './images.js'\r\nimport { drawFrame as drawMain, StartScene } from './mainScene.js'\r\nimport { drawFrame as drawMainMenu, StartMenu } from './menuScene.js'\r\nimport { set, setDictionary } from './grammar.js'\r\nimport input from './input.js'\r\nimport { addTeam, currentTeam } from './teams.js'\r\nimport { addUnit, getUnits, gridDimensions } from './map.js'\r\nimport { Character } from './character.js'\r\n\r\nvar dateNow = Date.now()\r\nvar dateThen = Date.now()\r\n\r\nvar targetDelta = 16 // Roughly 60fps by default\r\n\r\nvar currentScene = 'mainMenu'\r\n\r\nvar pointer = { x: 0, y: 0 }\r\n\r\nvar gameMap = null\r\n\r\nfunction getPointer() {\r\n    return { ...pointer, cellX: () => parseInt(pointer.x / gridDimensions().x), cellY: () => parseInt(pointer.y / gridDimensions().y) }\r\n}\r\n\r\nfunction setTargetFrameRate(target) {\r\n    targetDelta = parseInt(1000 / target) // Number of ms divided by target fps\r\n}\r\n\r\nfunction requestAnimationFrame() {\r\n    dateNow = Date.now()\r\n    let delta = dateNow - dateThen\r\n    if (delta >= targetDelta) {\r\n        drawFrame(delta)\r\n        dateThen = dateNow\r\n    }\r\n    window.requestAnimationFrame(requestAnimationFrame)\r\n}\r\n\r\n/**\r\n * Draws the animation frame.\r\n * @param {number} delta Number of ms since last frame.\r\n */\r\nfunction drawFrame(delta) {\r\n    if (currentScene === 'mainMenu') {\r\n        drawMainMenu(delta)\r\n    } else if (currentScene === 'main') {\r\n        drawMain(delta)\r\n    }\r\n}\r\n\r\nasync function StartMainMenu() {\r\n    await loadAllImages()\r\n\r\n    let canvas = document.getElementById('maincanvas')\r\n    let ratio = canvas.width / canvas.height\r\n    canvas.style.height = window.innerHeight + 'px'\r\n    canvas.style.width = window.innerHeight * ratio + 'px'\r\n    window.addEventListener('resize', () => {\r\n        canvas.style.height = window.innerHeight + 'px'\r\n        canvas.style.width = window.innerHeight * ratio + 'px'\r\n      })\r\n        \r\n    canvas.addEventListener('mousemove', (e) => {\r\n        pointer.x = parseInt((e.clientX - canvas.offsetLeft) * (canvas.width / parseInt(canvas.style.width))) - 2\r\n        pointer.y = parseInt((e.clientY - canvas.offsetTop) * (canvas.height / parseInt(canvas.style.height)))\r\n    })\r\n\r\n    canvas.addEventListener('contextmenu', (e) => {\r\n        e.preventDefault()\r\n        return false\r\n    })     \r\n\r\n    setTargetFrameRate(60)\r\n    setContext(canvas.getContext('2d'))\r\n\r\n    StartMenu()\r\n\r\n    window.requestAnimationFrame(requestAnimationFrame)\r\n}\r\n\r\nasync function Start(squad, map) {\r\n    gameMap = map\r\n\r\n    input.unlisten()\r\n    let canvas = document.getElementById('maincanvas')\r\n    currentScene = 'main'\r\n\r\n    addTeam('Team Alpha', '2d10')\r\n    addTeam('Team Bravo', '1d1')\r\n    \r\n    let bSquad = JSON.parse(JSON.stringify(squad))\r\n\r\n    for (let s in squad) {\r\n        console.log(squad[s])\r\n        addUnit('Team Alpha', squad[s], false)\r\n        bSquad[s] = new Character(bSquad[s].name)\r\n        addUnit('Team Bravo', bSquad[s], true)\r\n    }\r\n\r\n    setTargetFrameRate(60)\r\n    setContext(canvas.getContext('2d'))\r\n\r\n    StartScene()\r\n\r\n    window.requestAnimationFrame(requestAnimationFrame)\r\n}\r\n\r\nexport { Start, StartMainMenu, getPointer, pointer, gameMap }"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","ctx","setContext","context","getContext","getImage","name","img","f","length","image","drawImage","x","y","srcRect","flipped","save","scale","w","h","restore","drawImageCtx","getMsSinceMidnight","d","Date","setHours","buildSprite","pose","onComplete","imageOverride","Error","sprite","frames","framesImage","currentFrame","updateDelta","play","animation","animStartTime","anim","sprPose","default","filter","imageName","sfx","getSfx","offsetx","offsety","async","speed","Promise","resolve","reject","spr","ox","oy","spd","t","mx","my","handler","p","amt","start","end","setTimeout","update","delta","frameDelay","repeat","animDuration","SetAnimation","roll","dice","toLowerCase","includes","dieterm","split","times","min","max","Math","floor","random","teams","teamIndex","phases","phase","addTeam","turnOrderRollDice","team","color","order","homePosition","gridDimensions","push","sort","a","b","getTeam","currentTeam","currentPhase","nextPhase","nextTeam","listening","handlerReleased","button","setState","releaseCallbacks","inputState","pressCallbacks","enabled","listenerKeyDown","e","inputs","keys","i","listenerKeyUp","window","removeEventListener","addEventListener","gameControl","on","gamepad","after","listen","unlisten","released","method","pressed","imu","tooltip","currentUnit","isMoving","getCurrentUnit","handleAction","units","getUnits","placed","setPlacingSprite","teamUnits","forEach","u","moved","getCamera","setTarget","manhattanDistance","startPoint","toX","toY","abs","map","width","height","gridSize","gridOpacity","startAreaWidth","startAreaHeight","placingSprite","movementTiles","movementPath","camera","targetX","targetY","targetStartX","targetStartY","targetDuration","targetElapsed","getPathMoves","setPotentialMoves","unit","destX","destY","getSuccessor","q","dx","dy","s","parent","g","handleMove","tx","ty","tiles","dist","parseFloat","tileList","character","Speed","startX","startY","mv","open","closed","successors","index","curr","path","astar","clearPotentialMoves","clearPathMoves","BezierBlend","cellX","parseInt","cellY","duration","triangleContains","ax","ay","bx","by","cx","cy","det","addUnit","teamName","actor","spriteName","data","hp","getUnit","constructor","params","this","actionPoints","actionPointsPerTurn","MapPosition","Position","MapCoords","Draw","draw","Character","maxHp","equipment","console","error","effectModifiers","effects","EquipItem","item","UpdateEffects","effect","ttl","RemoveEffectModifier","AddEffect","undefined","attribute","AddEffectModifier","amount","EffectModifier","Name","Cost","SetEquipment","GetEquipment","EquipmentAndAbilities","eqab","equipAbilities","GunnerySkill","gunnerySkill","MeleeSkill","meleeSkill","Hp","MaxHp","squad","stars","menu","id","hireCharacter","char","fireCharacter","charIndex","findIndex","onUpdate","ui","paramsTealFrame","innerRect","type","highlight","bgcolor","imageDown","imageHover","paramsTealButton","paramsGreyButton","paramsLabel","frameMenu","Element","rect","curve","el","statsMenu","buttonsMenu","classDescription","text","Options","option","replace","elAdd","Clicked","elRemove","Hover","join","btnNext","toFrame","Rect","Animate","toStats","toButtons","ChangeMenu","transitionOut","selIndex","equip","paramsGreyListImage","bgcolorSelected","colorSelected","scrollbarWidth","scrollAreaImage","hover","caratImage","upImage","downImage","paramsGreyListImageMulti","multiSelect","checkboxImage","eqabMenu","listEquip","list","m","currentItem","characterType","characters","c","RemoveElement","selectedList","eq","log","selList","hoverItem","range","damage","cost","Start","teamATiles","teamBTiles","teamA","teamB","allTiles","hasTile","hasTeamATile","hasTeamBTile","buildMap","background","RemoveElements","dateNow","now","dateThen","targetDelta","currentScene","pointer","gameMap","getPointer","setTargetFrameRate","target","requestAnimationFrame","imui","ImUI","canvas","font","clearRect","translate","cellx","celly","ga","globalAlpha","loc","arr","diffx","diffy","imgid","bfontjs","DrawText","colr","ap","maxBarWidth","CalculateTextWidth","hpWidth","drawMap","siegeSelect","bg","state","mouseButton","home","then","moves","JSON","parse","stringify","reverse","slice","prom","moveTo","startMove","elActions","lst","action","targets","weapon","toUpperCase","drawUI","StartMainMenu","promises","loadImage","filename","Image","onload","onerror","src","r","catch","allSettled","loadAllImages","document","getElementById","ratio","style","innerHeight","clientX","offsetLeft","clientY","offsetTop","preventDefault","bSquad"],"sourceRoot":""}