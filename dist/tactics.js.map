{"version":3,"file":"tactics.js","mappings":"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","sources":["webpack://tactics/webpack/universalModuleDefinition","webpack://tactics/webpack/bootstrap","webpack://tactics/webpack/runtime/define property getters","webpack://tactics/webpack/runtime/hasOwnProperty shorthand","webpack://tactics/webpack/runtime/make namespace object","webpack://tactics/./src/images.js","webpack://tactics/./src/sprites.js","webpack://tactics/./src/grammar.js","webpack://tactics/./src/teams.js","webpack://tactics/./src/map.js","webpack://tactics/./src/actor.js","webpack://tactics/./src/mainScene.js","webpack://tactics/./src/input.js","webpack://tactics/./src/character.js","webpack://tactics/./src/menus/gameSetup.js","webpack://tactics/./src/menus/equipSetup.js","webpack://tactics/./src/menuScene.js","webpack://tactics/./src/main.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tactics\"] = factory();\n\telse\n\t\troot[\"tactics\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import images from './images.json'\r\n\r\nvar ctx = null\r\n\r\nfunction setContext(context) {\r\n    ctx = context\r\n}\r\n\r\nfunction getContext() {\r\n    return ctx\r\n}\r\n\r\nfunction getImage(name) {\r\n    let img = images.filter(f => f.name === name)\r\n    return img.length > 0 ? img[0].image : null\r\n}\r\n\r\nfunction getImages() {\r\n    return images\r\n}\r\n\r\nfunction drawImage(name, x, y, srcRect) {\r\n    let img = images.filter(f => f.name === name)\r\n    if (img.length > 0) {\r\n        if (srcRect) {\r\n            ctx.drawImage(img[0].image, srcRect.x, srcRect.y, srcRect.w, srcRect.h, x, y, srcRect.w, srcRect.h)\r\n        } else {\r\n            ctx.drawImage(img[0].image, x, y)\r\n        }\r\n    }\r\n}\r\n\r\nfunction loadImage(filename) {\r\n    return new Promise((resolve, reject) => {\r\n        let img = new Image()\r\n        img.onload = (e) => {\r\n            resolve(img)\r\n        }\r\n        img.onerror = (e) => {\r\n            console.error(`Failed to load file ${filename}:`, e)\r\n            reject(null)\r\n        }\r\n        let image = images.filter(f => f.filename === filename)\r\n        if (image.length > 0) {\r\n            img.src = filename\r\n        } else {\r\n            console.error(`Image definition matching filename ${filename} not found.`)\r\n            reject(null)\r\n        }\r\n    })\r\n}\r\n\r\nfunction loadAllImages() {\r\n    let promises = []\r\n    for (let i in images) {\r\n        let image = images[i]\r\n        promises.push(new Promise((resolve, reject) => loadImage(image.filename).then(r => {\r\n            image.image = r\r\n            resolve(r)\r\n        }).catch(e => console.error('Failed to load', image.filename, e))))\r\n    }\r\n    return Promise.allSettled(promises)\r\n}\r\n\r\nexport { loadAllImages, loadImage, drawImage, getImage, getImages, setContext, getContext }\r\n","import { drawImage, getImages } from './images.js'\r\nimport animations from './sprites.json'\r\n\r\nfunction lerp (start, end, amt){\r\n    return (1-amt)*start+amt*end\r\n  }\r\n  function lerpCoords (start, end, amt){\r\n    return { x: (1-amt)*start.x+amt*end.x, y: (1-amt)*start.y+amt*end.y }\r\n  }\r\n\r\nfunction removeSprite(name) {\r\n    let index = sprites.findIndex(f => f.name === name)\r\n    if (index >= 0) {\r\n        sprites[index] = undefined\r\n    }\r\n    sprites = sprites.filter(f => f !== undefined)\r\n}\r\n\r\nfunction getMsSinceMidnight(d) {\r\n    var e = new Date(d);\r\n    return d - e.setHours(0,0,0,0)\r\n    }\r\n\r\nfunction buildSprite(name, x, y, pose, onComplete) {\r\n    if (!animations[name]) {\r\n        throw new Error(`Can't build sprite, missing animation definition '${name}'.`)\r\n    }\r\n    let sprite = {\r\n        name: name,\r\n        x: x, y: y,\r\n        frames: [],\r\n        pose: pose,\r\n        framesImage: null,\r\n        currentFrame: 0,\r\n        updateDelta: 0,\r\n        play: true\r\n    }\r\n    sprite.SetAnimation = (animation, pose, onComplete) => {\r\n        sprite.animStartTime = getMsSinceMidnight(new Date())\r\n        let anim = animations[animation]\r\n        if (onComplete) {\r\n            sprite.onComplete = onComplete\r\n        }\r\n        if (anim) {\r\n            let sprPose = anim.default ? anim.default : null\r\n            sprPose = anim[pose] ? anim[pose] : sprPose\r\n            if (sprPose) {\r\n                let img = getImages().filter(f => f.name === sprPose.imageName)\r\n                if (img.length > 0) {\r\n                    sprite.frames = sprPose.frames\r\n                    sprite.currentFrame = 0\r\n                    sprite.animation = animation\r\n                    sprite.pose = pose\r\n                    sprite.framesImage = sprPose.imageName\r\n                    if (sprPose.sfx) {\r\n                        let sfx = getSfx(sprPose.sfx)\r\n                        if (sfx) {\r\n                            sfx.play()\r\n                        }\r\n                    }\r\n                } else {\r\n                    throw new Error(`Can't find pose ${pose} in ${animation}.`)\r\n                }\r\n            } else {\r\n                sprite.frames = []\r\n                sprite.currentFrame = 0\r\n                sprite.animation = ''\r\n                sprite.pose = ''\r\n            }\r\n            sprite.play = true\r\n        }\r\n    }\r\n    sprite.draw = (offsetx, offsety) => {\r\n        offsetx = offsetx ? offsetx : 0\r\n        offsety = offsety ? offsety : 0\r\n        drawImage(sprite.framesImage, sprite.x + offsetx, sprite.y + offsety, sprite.frames[sprite.currentFrame])\r\n    }\r\n    sprite.moveTo = async (x, y, speed) => {\r\n        return new Promise(async (resolve, reject) => {\r\n            let spr = sprite\r\n            let ox = spr.x\r\n            let oy = spr.y\r\n            let spd = speed\r\n            let t = 0\r\n            let move = (mx, my) => new Promise((resolve, reject) => {\r\n                let handler = () => {\r\n                    t += spd\r\n                    if (t >= 1) {\r\n                        spr.x = x\r\n                        spr.y = y\r\n                        resolve()\r\n                    } else {\r\n                        let p = lerpCoords({ x: ox, y: oy }, { x: mx, y: my }, t)\r\n                        spr.x = p.x\r\n                        spr.y = p.y\r\n                        setTimeout(handler, 16)\r\n                    }\r\n                }\r\n                setTimeout(handler, 16)\r\n            })\r\n    \r\n            await move(x, y)\r\n            resolve()\r\n        })\r\n    }\r\n    sprite.onComplete = onComplete ? onComplete : (sprite) => {}\r\n    sprite.update = (delta) => {\r\n        let sprPose = animations[sprite.animation][sprite.pose]\r\n        if (sprPose && sprite.play) {\r\n            if (sprite.updateDelta > sprPose.frameDelay) {\r\n                sprite.currentFrame++\r\n                if (sprite.currentFrame > sprite.frames.length - 1) {\r\n                    if (sprPose.repeat) {\r\n                        sprite.currentFrame = 0\r\n                        sprite.animDuration = getMsSinceMidnight(new Date()) - sprite.animStartTime\r\n                        sprite.onComplete(sprite)\r\n                    } else {\r\n                        sprite.animDuration = getMsSinceMidnight(new Date()) - sprite.animStartTime\r\n                        sprite.currentFrame--\r\n                        sprite.play = false\r\n                        sprite.onComplete(sprite)\r\n                    }\r\n                    if (sprPose.onComplete) {\r\n                        sprPose.onComplete(sprite)\r\n                    }\r\n                }\r\n                sprite.updateDelta = 0\r\n            } else {\r\n                sprite.updateDelta += delta\r\n            }\r\n        }\r\n    }\r\n    sprite.SetAnimation(name, pose)\r\n\r\n    return sprite\r\n}\r\n\r\nfunction getAnimation(animation) {\r\n    try {\r\n        return animations[animation]\r\n    } catch {}\r\n    return {}\r\n}\r\n\r\nexport { buildSprite, removeSprite, getAnimation, getMsSinceMidnight }","let grammar = {}\r\n\r\nfunction randInt(min, max) {\r\n    //return Math.floor(ROT.RNG.getUniform() * (max - min + 1) + min)\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n  }\r\n\r\nfunction roll(dice) {\r\n    dice = dice.toLowerCase();\r\n    if (!dice.includes('d')) {\r\n        throw new Error('At least one term must specify the number of dice.')\r\n    } else {\r\n        let dieterm = dice.split('d')\r\n        let amt = 0\r\n        for (let times = 0; times < dieterm[0]; times++) {\r\n            amt += randInt(1, dieterm[1])\r\n        }\r\n        return amt\r\n    }\r\n}\r\n\r\n/**\r\n * The value for the key specified as the id parameter. Value is either an array of strings or a string reference to an array of strings.\r\n * @param {string} id \r\n * @returns {string|array} Returns either the value of the key matching 'id', or an empty string.\r\n */\r\nfunction get(id) {\r\n    if (!id) {\r\n        return ''\r\n    }\r\n    if (typeof id === 'string') {\r\n        id = id.replace('[*', '').replace(']', '')\r\n    }\r\n    let item = grammar[id]\r\n    if (item) {\r\n        if (typeof item === 'string') {\r\n            return item\r\n        } else if (typeof item === 'object') {\r\n            return item[randInt(0, item.length - 1)]\r\n        }\r\n    }\r\n    return id //`[not found:${id}]`\r\n}\r\n\r\n/**\r\n * Set the value for the key specified as the id parameter. Value is either an array of strings or a string reference to an array of strings.\r\n * @param {string} id \r\n * @param {string|array} value \r\n */\r\nfunction set(id, value) {\r\n    grammar[id] = value\r\n}\r\n\r\n/**\r\n * Processes any operators on the text about to be added to the sentence chain.\r\n * @param {string} txt \r\n * @param {string} operator \r\n * @returns \r\n */\r\nfunction operatorText(txt, operator) {\r\n    if (operator === 'capital') {\r\n        txt = txt.charAt(0).toUpperCase() + txt.slice(1)\r\n    }\r\n    return txt\r\n}\r\n\r\nfunction parseTokens(template, context) {\r\n    if (template.includes('[')) {\r\n        let startPos = 0\r\n        let tokenMap = []\r\n        while(template.includes('[', startPos)) {\r\n            let paramStart = template.indexOf('[', startPos)\r\n            if (paramStart > startPos) {\r\n                tokenMap.push({ start: startPos, end: paramStart, token: null, value: template.substring(startPos, paramStart) })    \r\n            }\r\n            let paramEnd = template.indexOf(']', startPos)\r\n            let token = template.substring(paramStart, paramEnd + 1)\r\n            tokenMap.push({ start: paramStart, end: paramEnd, token: token, value: null })\r\n            startPos = paramEnd + 1\r\n        }\r\n        if (startPos < template.length) {\r\n            tokenMap.push({ start: startPos, end: template.length - 1, token: null, value: template.substring(startPos, template.length)})\r\n        }\r\n        return tokenMap\r\n    } else {\r\n        return [template]\r\n    }\r\n}\r\n\r\nfunction compareOperation(property, operation, operator, value) {\r\n    if (operation === \"is\") {\r\n        if (operator === '=') {\r\n            return property === value\r\n        }\r\n    } else if (operation === \"has\") {\r\n        if (operator === \"=\") {\r\n            return property[value] !== undefined\r\n        }\r\n    } else {\r\n        if (typeof property === 'object' && [\"=\", \"!=\", \">=\", \"<=\", \"<\", \">\"].includes(operator)) {\r\n            if ([\"=\", \"!=\"].includes(operator)) {\r\n                return operator === \"=\" ? property[operation] === value : property[operation] !== value\r\n            } else if ([\">=\", \"<=\"].includes(operator)) {\r\n                return operator === \">=\" ? property[operation] >= value : property[operation] <= value\r\n            } else if ([\">\", \"<\"].includes(operator)) {\r\n                return operator === \">\" ? property[operation] > value : property[operation] < value\r\n            }            \r\n        } else if (typeof property === 'number' && [\"=\", \"!=\", \">=\", \"<=\", \"<\", \">\"].includes(operator)) {\r\n            if ([\"=\", \"!=\"].includes(operator)) {\r\n                return operator === \"=\" ? property === value : property !== value\r\n            } else if ([\">=\", \"<=\"].includes(operator)) {\r\n                return operator === \">=\" ? property >= value : property <= value\r\n            } else if ([\">\", \"<\"].includes(operator)) {\r\n                return operator === \">\" ? property > value : property < value\r\n            }            \r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction process(template, context) {\r\n    if (!template.includes('[')) {\r\n        return {\r\n            'tokenmap': {},\r\n            'sentence': template,\r\n            'sentenceHTML': template\r\n        }\r\n    }\r\n    context = context ? context : {}\r\n    let tokenMap = processTokenMap(parseTokens(template, context), context)\r\n    let sentence = ''\r\n    let sentenceHTML = ''\r\n    let map = tokenMap\r\n    for (let m in map) {\r\n        if (m > 0) {\r\n            let prev = map[m - 1]\r\n            if ((prev.token_type === 'condition' && prev.token_result) || (prev.token_type !== 'condition' && map[m].value)) {\r\n                if (map[m].token) {\r\n                    prev.value = map[m].value\r\n                    sentenceHTML += `<mark title='${m > 0 ? JSON.stringify(prev) : map[m].token}'>${map[m].value}</mark>`\r\n                    sentence += map[m].value\r\n                } else {\r\n                    sentenceHTML += map[m].value\r\n                    sentence += map[m].value\r\n                }\r\n            }\r\n        } else {\r\n            if (map[m].token && map[m].value) {\r\n                sentenceHTML += `<mark title='${map[m].token}'>${map[m].value}</mark>`\r\n                sentence += map[m].value\r\n            } else if (map[m].value) {\r\n                    sentenceHTML += map[m].value\r\n                    sentence += map[m].value\r\n            }\r\n        }\r\n    }\r\n    if (!sentence.includes('[')) {\r\n        return {\r\n            'tokenmap': tokenMap,\r\n            'sentence': sentence,\r\n            'sentenceHTML': sentenceHTML\r\n        }\r\n    } else {\r\n        return process(sentence, context)\r\n    }\r\n}\r\n\r\nfunction processTokenMap(tokenMap, context) {\r\n    let activeConditional = -1\r\n    for (let t in tokenMap) {\r\n        if (tokenMap[t].value === null) {\r\n            if (tokenMap[t].token) {\r\n                if (tokenMap[t].token.substring(0, 2) === '[*') {\r\n                    tokenMap[t].token_type = 'lookup'\r\n                    let id = tokenMap[t].token.substring(2, tokenMap[t].token.length - 1)\r\n                    if (!id.includes('[')) {\r\n                        tokenMap[t].value = get(id)\r\n                    }\r\n                } else if (tokenMap[t].token.substring(0, 2) === '[?') {\r\n                    tokenMap[t].token_type = 'condition'\r\n                    activeConditional = t\r\n                    let id = tokenMap[t].token.substring(2, tokenMap[t].token.length - 1)\r\n                    let paths = id.split('.')\r\n\r\n                    let room = null\r\n                    if (context.room) {\r\n                        room = rooms.getRoom(context.room)\r\n                    }\r\n\r\n                    if (paths.length === 3) {\r\n                        let contextName = paths[0]\r\n                        let contextProperty = paths[1]\r\n                        let comparison = paths[2]\r\n\r\n                        if (contextName === 'room' && room) {\r\n                            if (room[contextProperty]) {\r\n                                let comp = comparison.search(/[(=)(!=)(<)(>)(>=)(<=)]/)\r\n                                if (comp >= 0) {\r\n                                    let operation = comparison.substring(0, comp)\r\n                                    let opEnd = comparison.slice(comp).search(/[A-Za-z0-9_-]/)\r\n                                    if (opEnd < 0) {\r\n                                        opEnd = 1\r\n                                    }\r\n                                    let operator = comparison.substring(comp, comp + opEnd)\r\n                                    let value = comparison.substring(comp + 1, comparison.length)\r\n                                    tokenMap[t].token_operation = operation\r\n                                    tokenMap[t].token_operator = operator\r\n                                    tokenMap[t].token_compare_to = value\r\n                                    tokenMap[t].token_property = room[contextProperty]\r\n                                    tokenMap[t].token_result = compareOperation(room[contextProperty], operation, operator, value)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (paths.length === 1) {\r\n                        // If there's no path, try a die roll notation.\r\n                        let comparison = paths[0]\r\n                        let comp = comparison.search(/[(=)(!=)(<)(>)(>=)(<=)]/)\r\n                        if (comp >= 0) {\r\n                            let operation = comparison.substring(0, comp)\r\n                            let opEnd = comparison.slice(comp).search(/[A-Za-z0-9_-]/)\r\n                            if (opEnd < 0) {\r\n                                opEnd = 1\r\n                            }\r\n                            let operator = comparison.substring(comp, comp + opEnd)\r\n                            let value = parseInt(comparison.substring(comp + 1, comparison.length))\r\n                            let rl = roll(operation)\r\n                            tokenMap[t].die_roll = rl\r\n                            tokenMap[t].token_operation = operation\r\n                            tokenMap[t].token_operator = operator\r\n                            tokenMap[t].token_compare_to = value\r\n                            tokenMap[t].token_property = rl\r\n                            tokenMap[t].token_result = compareOperation(rl, operation, operator, value)\r\n                        }\r\n                    }\r\n                } else if (tokenMap[t].token.toLowerCase() === \"[else]\") {\r\n                    if (activeConditional >= 0) {\r\n                        tokenMap[t].token_operation = tokenMap[activeConditional].token_operation\r\n                        tokenMap[t].token_operator = tokenMap[activeConditional].token_operator\r\n                        tokenMap[t].token_compare_to = tokenMap[activeConditional].token_compare_to\r\n                        tokenMap[t].token_property = tokenMap[activeConditional].token_property\r\n                        tokenMap[t].token_type = 'condition'\r\n                        tokenMap[t].token_result = !compareOperation(tokenMap[t].token_property, tokenMap[t].token_operation, tokenMap[t].token_operator, tokenMap[t].token_compare_to)\r\n                        activeConditional = -1\r\n                    }\r\n                } else if (tokenMap[t].token.substring(0, 1) === '[') {\r\n                    tokenMap[t].value = tokenMap[t].token.replace('[', '').replace(']', '')\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return tokenMap\r\n}\r\n\r\n/**\r\n * Get the generated text of the specified template text.\r\n * @param {string} template Template text to generate from the dictionary.\r\n * @param {object} context JSON containing the list of contexts and their objects to execute under.\r\n * @returns {string} Evaluated text result.\r\n */\r\nfunction text(template, context) {\r\n    let sentence = []\r\n    let startPos = 0\r\n    // If there are any tokens to process in this template.\r\n    if (template.includes('[')) {\r\n        let paramStart = 0\r\n        let paramEnd = template.indexOf('[')\r\n        while(template.includes('[', startPos)) {\r\n            paramStart = template.indexOf('[', startPos)\r\n            paramEnd = template.indexOf(']', startPos)\r\n            //sentence.push(template.substring(startPos, paramStart))\r\n            let id = template.substring(paramStart, paramEnd + 1)\r\n            \r\n            let operator\r\n            if (id.includes('.')) {\r\n                let parts = id.split('.')\r\n                id = parts[0] + ']'\r\n                operator = parts[1].toLowerCase().substring(0, parts[1].length - 1)\r\n            }\r\n            if (id !== template) {\r\n                let txt = text(id)\r\n                sentence.push(txt)\r\n            } else {\r\n                let txt = get(id)\r\n                sentence.push(txt)\r\n            }\r\n            startPos = paramEnd + 1\r\n        }\r\n        if (startPos < template.length) {\r\n            sentence.push(template.substring(startPos, template.length))\r\n        }\r\n    } else {\r\n        let id = get(template)\r\n        return id ? id : `[not found:${id}]` \r\n    }\r\n\r\n    let ret = sentence.reduce((prev, next) => prev + next)\r\n    return ret.includes('[*') ? text(ret) : ret\r\n}\r\n\r\n/**\r\n * Sets the whole dictionary object to the json parameter.\r\n * @param {object} json \r\n */\r\nfunction setDictionary(json) {\r\n    grammar = json\r\n}\r\n\r\n/**\r\n * Loads the dictionary from a file buffer.\r\n * @param {buffer} buffer \r\n */\r\nfunction loadDictionary(buffer) {\r\n    grammar = JSON.parse(buffer.toString())\r\n}\r\n\r\nexport { loadDictionary, setDictionary, text, set, get, roll, randInt }","import { roll } from './grammar.js'\r\n\r\nvar teams = []\r\nvar teamIndex = 0\r\nvar phases = ['positioning', 'movement', 'active', 'siege', 'upkeep']\r\nvar phase = 0\r\n\r\nfunction addTeam(name, turnOrderRollDice) {\r\n    let team = {\r\n        name: name,\r\n        color: '#ccccccff',\r\n        order: roll(turnOrderRollDice)\r\n    }\r\n    teams.push(team)\r\n    teams.sort((a, b) => b.order - a.order)\r\n    return team\r\n}\r\n\r\nfunction getTeam(name) {\r\n    let team = teams.filter(f => f.name === name)\r\n    return team.length > 0 ? team[0] : null\r\n}\r\n\r\nfunction currentTeam() {\r\n    return teams[teamIndex]\r\n}\r\n\r\nfunction currentPhase() {\r\n    return phases[phase]\r\n}\r\n\r\nfunction nextPhase() {\r\n    phase++\r\n    phase = phase >= phases.length ? 0 : phase\r\n}\r\n\r\nfunction nextTeam() {\r\n    teamIndex++\r\n    teamIndex = teamIndex >= teams.length ? 0 : teamIndex\r\n}\r\n\r\nexport { addTeam, currentTeam, currentPhase, nextPhase, getTeam, nextTeam }","import Actor from \"./actor.js\"\r\nimport { getContext, drawImage } from \"./images.js\"\r\nimport { getTeam } from \"./teams.js\"\r\nimport { pointer } from \"./main.js\"\r\n\r\nvar map = null\r\n\r\nvar width = 36\r\nvar height = 24\r\n\r\nvar gridSize = 24\r\nvar gridOpacity = 0.3\r\n\r\nvar startAreaWidth = 10\r\nvar startAreaHeight = 24\r\n\r\nvar placingSprite = null\r\n\r\nvar units = []\r\n\r\nvar camera = {\r\n    x: 24,\r\n    y: 8.5 * gridDimensions().y,\r\n    //x: 0, y: 0,\r\n    w: 320 / gridDimensions().x, h: 200 / gridDimensions().y,\r\n    targetX: 24,\r\n    targetY: 8.5 * gridDimensions().y,\r\n}\r\n\r\nfunction getCamera() {\r\n    return { ...camera, cellX: () => parseInt(camera.x / gridDimensions().x), cellY: () => parseInt(camera.y / gridDimensions().y) }\r\n}\r\n\r\nfunction setPlacingSprite(sprite) {\r\n    placingSprite = sprite\r\n}\r\n\r\nfunction getPlacingSprite() {\r\n    return placingSprite\r\n}\r\n\r\nfunction triangleContains(ax, ay, bx, by, cx, cy, x, y) {\r\n\r\n    let det = (bx - ax) * (cy - ay) - (by - ay) * (cx - ax)\r\n\r\n    return  det * ((bx - ax) * (y - ay) - (by - ay) * (x - ax)) >= 0 &&\r\n            det * ((cx - bx) * (y - by) - (cy - by) * (x - bx)) >= 0 &&\r\n            det * ((ax - cx) * (y - cy) - (ay - cy) * (x - cx)) >= 0    \r\n\r\n}\r\n\r\nfunction addUnit(teamName, unit) {\r\n    let actor = new Actor({\r\n        team: getTeam(teamName),\r\n        name: unit.name,\r\n        character: unit,\r\n        spriteName: 'player',\r\n        x: 0,\r\n        y: 0\r\n    })\r\n    units.push(actor)\r\n    return actor\r\n}\r\n\r\nfunction getUnits(teamName) {\r\n    console.log(teamName, units)\r\n    if (teamName) {\r\n        return units.filter(f => f.team.name === teamName)\r\n    } else {\r\n        return units\r\n    }\r\n}\r\n\r\nfunction drawMap(delta) {\r\n    let ctx = getContext()\r\n    ctx.save()\r\n\r\n    //ctx.translate(-camera.x, -camera.y)\r\n\r\n    drawImage('mars-scape', 0, 0)\r\n\r\n    let ga = ctx.globalAlpha\r\n    ctx.globalAlpha = gridOpacity\r\n    let tiles = map.tiles\r\n    for (let t in tiles) {\r\n        let x = tiles[t][0] * gridDimensions().x\r\n        let y = tiles[t][1] * gridDimensions().y\r\n        drawImage('grid-white', x, y)\r\n    }\r\n\r\n    for (let t in map.teamA) {\r\n        let x = map.teamA[t][0] * gridDimensions().x\r\n        let y = map.teamA[t][1] * gridDimensions().y\r\n        drawImage('grid-yellow', x, y)\r\n    }\r\n    for (let t in map.teamB) {\r\n        let x = map.teamB[t][0] * gridDimensions().x\r\n        let y = map.teamB[t][1] * gridDimensions().y\r\n        drawImage('grid-yellow', x, y)\r\n    }\r\n    ctx.globalAlpha = ga\r\n\r\n    if (placingSprite) {\r\n        placingSprite.x = parseInt(((pointer.x) / gridDimensions().x)) * gridDimensions().x - 12\r\n        placingSprite.y = parseInt(((pointer.y) / gridDimensions().y)) * gridDimensions().y - 20\r\n        placingSprite.update(delta)\r\n        placingSprite.draw()\r\n        bfontjs.DrawText(getContext(), placingSprite.x + 8, placingSprite.y + 40, 'Unit Name', '#f1f1f1ff', font)\r\n    }\r\n\r\n    ctx.restore()\r\n}\r\n\r\nfunction gridDimensions() {\r\n    return { x: gridSize, y: gridSize }\r\n}\r\n\r\nfunction buildMap() {\r\n    var tiles = []\r\n    var teamATiles = []\r\n    var teamBTiles = []\r\n\r\n    for (let y = 0; y < height; y++) {\r\n        for (let x = 0; x < width; x++) {\r\n            tiles.push([x, y])\r\n            \r\n            if (triangleContains(0, parseInt(height / 2) - parseInt(startAreaHeight / 2), startAreaWidth, parseInt(height / 2), 0, parseInt(height / 2) + parseInt(startAreaHeight / 2), x, y)) {\r\n                teamATiles.push([x, y])\r\n            }\r\n            if (triangleContains(width, parseInt(height / 2) - parseInt(startAreaHeight / 2), width - startAreaWidth, parseInt(height / 2), width, parseInt(height / 2) + parseInt(startAreaHeight / 2), x, y)) {\r\n                teamBTiles.push([x, y])\r\n            }\r\n        }\r\n    }\r\n    map = {\r\n        tiles: tiles, teamA: teamATiles, teamB: teamBTiles, allTiles: tiles\r\n    }\r\n    map.hasTile = (x, y) => {\r\n        return map.tiles.filter(f => f[0] === x && f[1] === y).length > 0\r\n    }\r\n    map.hasTeamATile = (x, y) => {\r\n        return map.teamA.filter(f => f[0] === x && f[1] === y).length > 0\r\n    }\r\n    map.hasTeamBTile = (x, y) => {\r\n        return map.teamB.filter(f => f[0] === x && f[1] === y).length > 0\r\n    }\r\n    map.tiles = map.tiles.filter(f => !map.teamA.filter(a => a[0] === f[0] && a[1] === f[1]).length && !map.teamB.filter(b => f[0] === b[0] && f[1] === b[1]).length)\r\n    console.log('map =', map)\r\n    return map\r\n}\r\n\r\nexport { buildMap, drawMap, gridDimensions, addUnit, setPlacingSprite, getPlacingSprite, getUnits, getCamera }","import { gridDimensions } from \"./map.js\"\r\nimport { buildSprite } from \"./sprites.js\"\r\nimport { getContext } from \"./images.js\"\r\n\r\nclass Actor {\r\n    constructor(params) {\r\n        this.team = params.team\r\n        this.name = params.name\r\n        this.character = params.character\r\n        this.sprite = buildSprite(params.spriteName, params.x ? params.x : 0, params.y ? params.y : 0, 'idle')\r\n    }\r\n\r\n    Position() {\r\n        return { x: this.sprite.x, y: this.sprite.y }\r\n    }\r\n\r\n    MapCoords() {\r\n        return { x: parseInt(this.sprite.x / gridDimensions().x), y: parseInt(this.sprite.y / gridDimensions().y) }\r\n    }\r\n\r\n    Draw(delta) {\r\n        this.sprite.draw(delta)\r\n    }\r\n}\r\n\r\nexport default Actor\r\n","import { getContext, getImage } from \"./images.js\"\r\nimport { getCamera, drawMap, getUnits, setPlacingSprite, getPlacingSprite } from \"./map.js\"\r\nimport { currentPhase, currentTeam } from \"./teams.js\"\r\nimport { getPointer, gameMap } from \"./main.js\"\r\n\r\nlet imu = null\r\n\r\nlet ctx = null\r\n\r\nlet tooltip = ''\r\n\r\nfunction drawFrame(delta) {\r\n    if (!ctx) {\r\n        ctx = getContext()\r\n    }\r\n    ctx.clearRect(0, 0, 320, 200)\r\n\r\n    drawMap(delta)\r\n\r\n    drawUI(delta)\r\n}\r\n\r\nfunction handleAction() {\r\n    if (currentPhase() === 'positioning') {\r\n        let units = getUnits(currentTeam().name)\r\n        if (units.length > 0) {\r\n            console.log('setting place sprite for', currentTeam(), units[0].sprite)\r\n            setPlacingSprite(units[0].sprite)\r\n        }\r\n    }\r\n}\r\n\r\nfunction StartScene() {\r\n    handleAction()\r\n}\r\n\r\nfunction drawUI(delta) {\r\n    if (!imu) {\r\n        imu = new imui.ImUI(ctx.canvas)\r\n        imu.font = font\r\n\r\n        imu.onUpdate = (ui) => {\r\n            if (currentPhase() === 'positioning') {\r\n                let cellx = getPointer().cellX() + getCamera().cellX()\r\n                let celly = getPointer().cellY() + getCamera().cellY()\r\n                let bg = ui.Element({ id: 'lblBg', text: ``, rect: { x: 0, y: 0, w: 320, h: 200 }, color: '#f1f100ff', color: '#f1f100ff', bgcolor: '#00000000'})\r\n                if (bg.Hover() && getPlacingSprite() !== null) {\r\n                    if (gameMap.hasTeamATile(cellx, celly)) {\r\n                        tooltip = 'Place unit.'\r\n                    } else {\r\n                        tooltip = `Invalid location (${cellx},${celly}), place inside the yellow area.`\r\n                    }\r\n                }\r\n                if (bg.Clicked()) {\r\n                    setPlacingSprite(null)\r\n                    tooltip = `Placed at ${cellx}, ${celly}.`\r\n                }\r\n            }\r\n\r\n            let phase = currentPhase().slice(0, 1).toUpperCase() + currentPhase().slice(1)\r\n            ui.Element({ id: 'lblPhase', text: `${phase}: ${currentTeam().name}`, rect: { x: 10, y: 3, w: 300, h: 9 }, color: '#f1f100ff', color: '#f1f100ff', bgcolor: '#000000cc'})\r\n\r\n            ui.Element({ id: 'lblTooltip', text: tooltip, rect: { x: 0, y: 190, w: 240, h: 10 }, color: '#f1f1f1ff', highlight: '#f1f1f1ff', bgcolor: '#000000cc' })\r\n        }\r\n    }\r\n    imu.Draw()\r\n}\r\n\r\nexport { drawFrame, StartScene }","import maps from './keymapping.json'\r\n\r\nvar listening = false\r\n\r\nfunction handlerPressed (button) {\r\n  setState(button, true)\r\n}\r\n\r\nfunction handlerReleased (button) {\r\n  setState(button, false)\r\n  if (callbacks[button]) {\r\n    callbacks[button](button)\r\n  }\r\n}\r\n\r\nfunction GetInputKeys(inputType) {\r\n  inputType = inputType.toLowerCase()\r\n  return Object.keys(maps[inputType])\r\n}\r\n\r\nfunction GetInputValue(inputType, key) {\r\n  inputType = inputType.toLowerCase()\r\n  return maps[inputType][key]\r\n}\r\n\r\nvar inputState = {}\r\nvar callbacks = {}\r\n\r\nvar enabled = [ 'keyboard', 'gamepad' ]\r\n\r\nfunction setState(button, value) {\r\n  inputState[button] = value\r\n}\r\n\r\nfunction getState(button) {\r\n  if (!listening) {\r\n    return false\r\n  }\r\n  return inputState[button] ? inputState[button] : false\r\n}\r\n\r\nfunction listenerKeyDown(e) {\r\n  if (!listening) {\r\n    return\r\n  }\r\n  let inputs = Object.keys(maps.keyboard)\r\n  for (let i in inputs) {\r\n    if (e.key === maps.keyboard[inputs[i]]) {\r\n      handlerPressed(inputs[i])\r\n    }\r\n  }\r\n}\r\n\r\nfunction listenerKeyUp(e) {\r\n  if (!listening) {\r\n    return\r\n  }\r\n  let inputs = Object.keys(maps.keyboard)\r\n  for (let i in inputs) {\r\n    if (e.key === maps.keyboard[inputs[i]]) {\r\n      handlerReleased(inputs[i])\r\n    }\r\n  }\r\n}\r\n\r\nfunction init() {\r\n  inputState = {}\r\n  callbacks = {}\r\n  if (enabled.includes('keyboard')) {\r\n    window.removeEventListener('keydown', listenerKeyDown)\r\n    window.removeEventListener('keyup', listenerKeyUp)\r\n    window.addEventListener('keydown', listenerKeyDown)\r\n    window.addEventListener(\"keyup\", listenerKeyUp)\r\n  }\r\n  if (enabled.includes('gamepad')) {\r\n    gameControl.on('connect', function(gamepad) {\r\n      let inputs = Object.keys(maps.gamepad)\r\n      for (let i in inputs) {\r\n        gamepad.on(maps.gamepad[inputs[i]], () => {\r\n          \r\n        }).after(maps.gamepad[inputs[i]], () => {\r\n          handlerReleased(inputs[i])\r\n        })\r\n      }\r\n    })\r\n  }\r\n  listening = false\r\n}\r\n\r\ninit()\r\n\r\nvar input = {\r\n  listen: () => {\r\n    listening = true\r\n  },\r\n  unlisten: () => {\r\n    listening = false\r\n  },\r\n  released: (button, method) => {\r\n    callbacks[button] = method\r\n  }\r\n}\r\n\r\nexport default input\r\nexport { GetInputKeys, GetInputValue }","import { Pipeline } from './pipeline.js'\r\n\r\nimport characters from \"./characters.json\"\r\n\r\nclass Character {\r\n    constructor(name) {\r\n        // data property holds base class data from json\r\n        try {\r\n            this.data = characters.filter(f => f.name === name)[0]\r\n            this.data.maxHp = this.data.hp\r\n            this.name = this.data.name\r\n            this.equipment = []\r\n        } catch {\r\n            this.data = {}\r\n            console.error(`Could not locate template for ${name}.`)\r\n        }\r\n\r\n        // effectModifiers property holds active effect modifiers.\r\n        this.effectModifiers = {}\r\n\r\n        // Active effect modifiers, evaluated each phase and removed when\r\n        // expired.\r\n        this.effects = []\r\n    }\r\n\r\n    EquipItem(item) {\r\n        \r\n    }\r\n\r\n    /**\r\n     * Iterate over the effects currently active on this character and\r\n     * do housekeeping (decrement ttl, removing ttl = 0, etc.)\r\n     */\r\n    UpdateEffects() {\r\n        for (let e in this.effects) {\r\n            let effect = this.effects[e]\r\n            if (effect.ttl) {\r\n                effect.ttl--\r\n            }\r\n            if (effect.ttl <= 0) {\r\n                this.RemoveEffectModifier(effect)\r\n            }\r\n        }\r\n        this.effects = this.effects.filter(f => f.ttl > 0)\r\n    }\r\n\r\n    AddEffect(effect) {\r\n        if (effect.ttl) {\r\n            this.effects.push(effect)\r\n        }\r\n        if (effect.attribute !== undefined) {\r\n            this.AddEffectModifier(effect.attribute, effect.amount)\r\n        }\r\n    }\r\n    RemoveEffectModifier(effect) {\r\n        if (effect.attribute !== undefined) {\r\n            this.AddEffect(effect.attribute, effect.amount * -1)\r\n        }\r\n    }\r\n\r\n    AddEffectModifier(attribute, amount) {\r\n        if (this.effectModifiers[attribute] === undefined) {\r\n            this.effectModifiers[attribute] = 0\r\n        }\r\n        this.effectModifiers[attribute] += amount\r\n    }\r\n\r\n    EffectModifier(attribute) {\r\n        if (this.effectModifiers[attribute] !== undefined) {\r\n            return this.effectModifiers[attribute]\r\n        }\r\n        return 0\r\n    }\r\n\r\n    Name() {\r\n        return this.data.name\r\n    }\r\n\r\n    Cost() {\r\n        return this.data.Cost + this.EffectModifier('cost')\r\n    }\r\n\r\n    EquipmentAndAbilities(eqab) {\r\n        if (eqab !== undefined) {\r\n            this.data.equipAbilities = eqab\r\n        }\r\n        return this.data.equipAbilities + this.EffectModifier('equipAbilities')\r\n    }\r\n\r\n    GunnerySkill() {\r\n        return this.data.gunnerySkill + this.EffectModifier('gunnerySkill')\r\n    }\r\n\r\n    MeleeSkill() {\r\n        return this.data.meleeSkill + this.EffectModifier('meleeSkill')\r\n    }\r\n\r\n    Speed() {\r\n        return this.data.speed + this.EffectModifier('speed')\r\n    }\r\n\r\n    Hp() {\r\n        return this.data.hp + this.EffectModifier('hp')\r\n    }\r\n\r\n    MaxHp() {\r\n        return this.data.maxHp + this.EffectModifier('maxHp')\r\n    }\r\n}\r\n\r\n export { Character }","import { getImage } from '../images.js'\r\nimport characters from '../characters.json'\r\nimport menus from './menus.json'\r\nimport { Character } from '../character.js'\r\nimport { ChangeMenu } from '../menuScene.js'\r\n\r\nvar squad = []\r\nvar stars = 16\r\n\r\nlet menu = menus.filter(f => f.id === 'GameSetup')[0]\r\n\r\nfunction hireCharacter(name) {\r\n    let char = new Character(name)\r\n    if (stars - char.Cost() >= 0) {\r\n        squad.push(char)\r\n        stars -= char.Cost()\r\n    }\r\n}\r\n\r\nfunction fireCharacter(name) {\r\n    let char = new Character(name)\r\n    let charIndex = squad.findIndex(f => f.name === name)\r\n    if (charIndex > -1) {\r\n        stars += char.Cost()\r\n        squad = squad.filter((f, i) => i !== charIndex)\r\n    }\r\n}\r\n\r\nfunction onUpdate(ui) {\r\n    let paramsTealFrame = { innerRect: { x: 6, y: 8, w: 53 , h: 47 }, type: 'ButtonImage', color: '#122020ff', highlight: '#122020ff', bgcolor: '#000000cc', image: getImage('ui-frame-teal'), imageDown: getImage('ui-frame-teal'), imageHover: getImage('ui-frame-teal') }\r\n    let paramsTealButton = { innerRect: { x: 5, y: 4, w: 9, h: 2 }, type: 'ButtonImage', color: '#122020ff', highlight: '#fa6a0aff', bgcolor: '#000000cc', image: getImage('ui-button-teal'), imageDown: getImage('ui-button-teal-down'), imageHover: getImage('ui-button-teal') }\r\n    let paramsGreyButton = { innerRect: { x: 5, y: 4, w: 9, h: 2 }, type: 'ButtonImage', color: '#122020ff', highlight: '#122020ff', bgcolor: '#000000cc', image: getImage('ui-button-grey'), imageDown: getImage('ui-button-grey-down'), imageHover: getImage('ui-button-grey') }\r\n    let paramsLabel = { type: 'Element', color: '#cacacaff', highlight: '#cacacaff', bgcolor: '#00000000' }\r\n    let frameMenu = ui.Element({ id: 'frameMenu', rect: {x: 5, y: 28, w: 128, h: 160 }, ...paramsTealFrame,\r\n        anim: {\r\n            curve: 'bezier',\r\n            duration: 100,\r\n            params: {\r\n                y: -128\r\n            },\r\n            onComplete: (el) => { el }\r\n        }\r\n    })\r\n\r\n    let statsMenu = ui.Element({ id: 'frameStats', rect: {x: 135, y: 28, w: 128, h: 110 }, ...paramsTealFrame,\r\n        anim: {\r\n            curve: 'bezier',\r\n            duration: 100,\r\n            params: {\r\n                x: 260\r\n            },\r\n            onComplete: (el) => { el }\r\n        }\r\n    })\r\n\r\n    let buttonsMenu = ui.Element({ id: 'frameButtons', rect: {x: 135, y: 156, w: 128, h: 32 }, ...paramsTealFrame,\r\n        anim: {\r\n            curve: 'bezier',\r\n            duration: 100,\r\n            params: {\r\n                y: 190\r\n            },\r\n            onComplete: (el) => { el }\r\n        }\r\n    })\r\n\r\n    let classDescription = squad.length === 0 ? 'Hire your squad and click next\\nto continue.' : `Squad Size: ${squad.length}` + (stars === 0 ? `\\nNo stars remaining.\\nClick 'Next'.` : '')\r\n    if (!frameMenu.anim) {\r\n        let lblStars = ui.Element({ id: 'lblMenuStars', text: `${stars}`, rect: { x: 98, y: 10, w: 64, h: 11 }, ...paramsLabel}, frameMenu)\r\n        ui.Element({ id: 'imgStars', type: 'Image', x: 108, y: 8, image: getImage('star-icon') }, frameMenu)\r\n        let dy = 19\r\n        for (let o in menu.Options) {\r\n            let option = menu.Options[o].text\r\n            let name = option.split(' ')[0]\r\n            let character = characters.filter(f => f.name === name)[0]\r\n            option = option.replace('{0}', squad.filter(f => f.name === name).length)\r\n            let el = ui.Element({ id: 'lblMenu' + o, text: option, rect: {x: 16, y: dy + 2, w: 76, h: 14}, ...paramsLabel }, frameMenu)\r\n            let elAdd = ui.Element({ id: 'lblMenuAdd' + o, text: '+', rect: {x: 94, y: dy, w: 14, h: 14}, ...paramsGreyButton }, frameMenu)\r\n            if (elAdd.Clicked()) {\r\n                hireCharacter(name)\r\n            }\r\n            let elRemove = ui.Element({ id: 'lblMenuRem' + o, text: '-', rect: {x: 109, y: dy, w: 14, h: 14}, ...paramsGreyButton }, frameMenu)\r\n            if (elRemove.Clicked()) {\r\n                fireCharacter(name)\r\n            }\r\n\r\n            if (el.Hover() || elAdd.Hover() || elRemove.Hover()) {\r\n                classDescription = [\r\n                    `${name}`, `Cost: ${character.Cost}`, `Melee Skill: ${character.meleeSkill}`, `Gunnery Skill: ${character.gunnerySkill}`, `Speed: ${character.speed}`\r\n                    , `HP: ${character.speed}`, `Equipment/Abilities`, `Points: ${character.equipAbilities}`\r\n                ].join('\\n')\r\n            }\r\n\r\n            dy += 15\r\n        }\r\n    }\r\n\r\n    if (!buttonsMenu.anim) {\r\n        let btnNext = ui.Element({ id: 'btnNext', text: 'Next', rect: { x: 72, y: 8, w: 50, h: 16 }, ...paramsTealButton }, buttonsMenu)\r\n        if (btnNext.Hover()) {\r\n            classDescription = 'Accept squad and move\\non to outfitting equipment\\nand abilities.'\r\n        }\r\n        if (btnNext.Clicked()) {\r\n            transitionOut(frameMenu, statsMenu, buttonsMenu)\r\n        }\r\n    }\r\n\r\n    if (!statsMenu.anim) {\r\n        if (classDescription.length) {\r\n            let lblTooltip = ui.Element({ id: 'lblTooltip', text: classDescription, rect: { x: 8, y: 8, w: 110, h: 100 }, ...paramsLabel}, statsMenu)\r\n        }\r\n    }\r\n\r\n    function transitionOut(frameMenu, statsMenu, buttonsMenu) {\r\n            let toFrame = { ...frameMenu.Rect() }\r\n            toFrame.x = -130\r\n            frameMenu.Animate(190, { ...frameMenu.Rect() }, toFrame)\r\n            let toStats = { ...statsMenu.Rect() }\r\n            toStats.x = 320\r\n            statsMenu.Animate(190, { ...statsMenu.Rect() }, toStats)\r\n            let toButtons = buttonsMenu.Rect()\r\n            toButtons.y = 200\r\n            buttonsMenu.Animate(200, { ...buttonsMenu.Rect() }, toButtons, () => ChangeMenu('SetupEquipment'))\r\n    }\r\n}\r\n\r\nexport { onUpdate, squad }\r\n","import { getImage } from '../images.js'\r\nimport characters from '../characters.json'\r\nimport menus from './menus.json'\r\nimport { Character } from '../character.js'\r\nimport { ChangeMenu } from '../menuScene.js'\r\nimport { squad } from './gameSetup.js'\r\nimport equipment from '../equipment.json'\r\nimport { Start } from '../main.js'\r\nimport { buildMap } from '../map.js'\r\n\r\nlet selIndex = -1\r\nlet equip = []\r\nlet character = null\r\n\r\nfunction selCharacter(index) {\r\n    if (index < 0 || index > squad.length - 1) {\r\n        return\r\n    }\r\n    selIndex = index\r\n    character = squad[selIndex]\r\n    equip = getEquipment(squad[selIndex].name)\r\n}\r\n\r\nfunction getEquipment(characterType) {\r\n    return equipment.filter(f => f.characters.filter(c => c === characterType).length)\r\n}\r\n\r\nfunction onUpdate(ui) {\r\n    let paramsGreyListImage = {\r\n        bgcolor: '#122020ff',\r\n        color: '#cacacaff',\r\n        bgcolorSelected: '#122020ff',\r\n        colorSelected: '#f1f1f1ff',\r\n        highlight: '#f1f1f1ff',\r\n        scrollbarWidth: 9,\r\n        scrollAreaImage: {\r\n            image: getImage('ui-button-scroll-area'),\r\n            hover: getImage('ui-button-scroll-area'),\r\n            pressed: getImage('ui-button-scroll-area'),\r\n            innerRect: { x: 3, y: 4, w: 7, h: 40 }\r\n        },\r\n        caratImage: {\r\n            image: getImage('ui-button-carat'),\r\n            hover: getImage('ui-button-carat-hover'),\r\n            pressed: getImage('ui-button-carat-pressed')\r\n        },\r\n        upImage: {\r\n            image: getImage('ui-button-scroll-up'),\r\n            hover: getImage('ui-button-scroll-up-hover'),\r\n            pressed: getImage('ui-button-scroll-up-pressed')\r\n        },\r\n        downImage: {\r\n            image: getImage('ui-button-scroll-down'),\r\n            hover: getImage('ui-button-scroll-down-hover'),\r\n            pressed: getImage('ui-button-scroll-down-pressed')\r\n        }\r\n    }\r\n\r\n    let paramsGreyListImageMulti = { ...paramsGreyListImage, multiSelect: true,\r\n        checkboxImage: {\r\n            image: getImage('ui-checkbox'),\r\n            hover: getImage('ui-checkbox-hover'),\r\n            pressed: getImage('ui-checkbox-pressed')\r\n        }\r\n    }\r\n    paramsGreyListImage.bgcolorSelected = '#5daf8dff'\r\n    paramsGreyListImage.colorSelected = '#122020ff'\r\n\r\n    let paramsTealFrame = { innerRect: { x: 6, y: 8, w: 53 , h: 47 }, type: 'ButtonImage', color: '#122020ff', highlight: '#122020ff', bgcolor: '#000000cc', image: getImage('ui-frame-teal'), imageDown: getImage('ui-frame-teal'), imageHover: getImage('ui-frame-teal') }\r\n    let paramsTealButton = { innerRect: { x: 5, y: 4, w: 9, h: 2 }, type: 'ButtonImage', color: '#122020ff', highlight: '#fa6a0aff', bgcolor: '#000000cc', image: getImage('ui-button-teal'), imageDown: getImage('ui-button-teal-down'), imageHover: getImage('ui-button-teal') }\r\n    let paramsGreyButton = { innerRect: { x: 5, y: 4, w: 9, h: 2 }, type: 'ButtonImage', color: '#122020ff', highlight: '#122020ff', bgcolor: '#000000cc', image: getImage('ui-button-grey'), imageDown: getImage('ui-button-grey-down'), imageHover: getImage('ui-button-grey') }\r\n    let paramsLabel = { type: 'Element', color: '#cacacaff', highlight: '#cacacaff', bgcolor: '#00000000' }\r\n    let frameMenu = ui.Element({ id: 'frameMenuSquad', rect: {x: 5, y: 8, w: 72, h: 110 }, ...paramsTealFrame,\r\n        anim: {\r\n            curve: 'bezier',\r\n            duration: 100,\r\n            params: {\r\n                x: -100\r\n            },\r\n            onComplete: (el) => { el }\r\n        }\r\n    })\r\n    \r\n    if (!frameMenu.anim) {\r\n        let eqabMenu = ui.Element({ id: 'eqabMenu', rect: {x: 79, y: 8, w: 235, h: 110 }, ...paramsTealFrame,\r\n            anim: {\r\n                curve: 'bezier',\r\n                duration: 100,\r\n                params: {\r\n                    y: -140\r\n                },\r\n                onComplete: (el) => { el }\r\n            }\r\n        })\r\n        if (!eqabMenu.anim) {\r\n            let el = ui.Element({ id: 'charList', type: 'ListImage', list: squad.map(m => m.name), rect: {x: 8, y: 9, w: 55, h: 90 }, ...paramsGreyListImage}, frameMenu)\r\n            if (el.currentItem !== null && el.currentItem !== selIndex) {\r\n                selCharacter(el.currentItem)\r\n                if (listEquip) {\r\n                    listEquip.selectedList = []\r\n                }\r\n            }\r\n            if (selIndex > -1) {\r\n                ui.Element({ id: 'charEquip', text: 'Equipment:', rect: { x: 8, y: 8, w: 64, h: 9 }}, eqabMenu)\r\n                var listEquip = ui.Element({ id: 'charEquipList', type: 'ListImage', list: equip.map(m => m.name), rect: {x: 8, y: 19, w: 128, h: 80 }, ...paramsGreyListImageMulti}, eqabMenu)\r\n                let eq = equip[listEquip.hoverItem]\r\n                if (eq) {\r\n                    let classDescription = []\r\n                    if (eq.speed) {\r\n                        classDescription.push(`Speed ${eq.speed}`)\r\n                    }\r\n                    if (eq.range > 0) {\r\n                        classDescription.push(`Gunnery ${eq.damage}`)\r\n                        classDescription.push(`Range ${eq.range}`)\r\n                    } else {\r\n                        classDescription.push(`Melee ${eq.damage}`)\r\n                    }\r\n                    classDescription.push(`Cost ${eq.cost}`)\r\n                    ui.Element({ id: 'charEquipDescription', text: classDescription.join('\\n'), rect: { x: 140, y: 18, w: 64, h: 9 }}, eqabMenu)              \r\n                }\r\n            }\r\n\r\n            let buttonsMenu = ui.Element({ id: 'frameButtons', rect: {x: 165, y: 160, w: 128, h: 32 }, ...paramsTealFrame,\r\n                anim: {\r\n                    curve: 'bezier',\r\n                    duration: 100,\r\n                    params: {\r\n                        y: 190\r\n                    },\r\n                    onComplete: (el) => { el }\r\n                }\r\n            })\r\n            if (!buttonsMenu.anim) {\r\n                let btnNext = ui.Element({ id: 'btnNext', text: 'Next', rect: { x: 72, y: 8, w: 50, h: 16 }, ...paramsTealButton }, buttonsMenu)\r\n                if (btnNext.Clicked()) {\r\n                    equip = []\r\n                    transitionOut(frameMenu, eqabMenu, buttonsMenu, () => {\r\n                        Start(squad, buildMap())\r\n                    })\r\n                }\r\n                let btnPrev = ui.Element({ id: 'btnPrev', text: 'Back', rect: { x: 8, y: 8, w: 50, h: 16 }, ...paramsGreyButton }, buttonsMenu)\r\n                if (btnPrev.Clicked()) {\r\n                    equip = []\r\n                    transitionOut(frameMenu, eqabMenu, buttonsMenu, () => ChangeMenu('GameSetup'))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function transitionOut(frameMenu, eqabMenu, buttonsMenu, onComplete) {\r\n        let toButtons = buttonsMenu.Rect()\r\n        toButtons.y = 200\r\n        buttonsMenu.Animate(200, { ...buttonsMenu.Rect() }, toButtons, onComplete)\r\n    }\r\n}\r\n\r\nexport { onUpdate }\r\n","import input, { GetInputKeys, GetInputValue } from './input.js'\r\nimport { getContext, drawImage, getImage } from \"./images.js\"\r\nimport { Start, pointer } from './main.js'\r\nimport { Character } from './character.js'\r\nimport { buildSprite } from './sprites.js'\r\n\r\n//import menus from './menus.json'\r\nimport equipment from './equipment.json'\r\nimport { buildMap } from './map.js'\r\nimport { addTeam } from './teams.js'\r\n\r\nimport { onUpdate as onGameSetupUpdate } from './menus/gameSetup.js'\r\nimport { onUpdate as onEquipSetupUpdate } from './menus/equipSetup.js'\r\n\r\nlet imu = null\r\n\r\nlet ctx = null\r\n\r\nvar stars = 16\r\n\r\nvar squad = []\r\n\r\nvar background = buildSprite('background', 0, 0, 'idle')\r\n\r\nvar menu = null\r\nvar menuItems = []\r\nvar menuItem = {}\r\nvar currentMenuId = 'Main'\r\nvar currentMenuItem = 'Start'\r\nvar currentMenuColumn = 0\r\n\r\nvar currentCharacterEquip = null\r\n\r\n// var menuMethods = {\r\n//     callback_OnRenderStars: (text, replacements) => {\r\n//         return [stars.toString()]\r\n//     },\r\n//     callback_OnRenderHireSquad: (text, replacements) => {\r\n//         return [squad.length]\r\n//     },\r\n\r\n//     callback_OnRenderCharacter: (text, replacements) => {\r\n//         let name = text.split(' ')[0].replace('>', '')\r\n//         return [(squad.filter(f => f.name === name).length)]\r\n//     },\r\n\r\n//     callback_HireCharacter: (text) => {\r\n//         let name = text.split(' ')[0].replace('>', '')\r\n//         let char = new Character(name)\r\n//         if (stars - char.Cost() >= 0) {\r\n//             squad.push(char)\r\n//             stars -= char.Cost()\r\n//         }\r\n//     },\r\n\r\n//     callback_StartGame: () => {\r\n//         buildMap()\r\n//         Start(squad)\r\n//     },\r\n\r\n//     callback_SelectCharacterEquip: (text) => {\r\n//         currentCharacterEquip = text\r\n//     },\r\n\r\n//     callback_SetupEquipment: (text) => {\r\n//         ChangeMenu('SetupEquipment')\r\n//         let menu = menus.filter(f => f.id === 'SetupEquipment')[0]\r\n//         let nextIndex = menu.Options.findIndex(f => f.text === 'Next')\r\n//         menu.Options = [\r\n//             ...squad.map((m, i) => {\r\n//             return {\r\n//                 text: `${i + 1}. ${m.name}`,\r\n//                 onSelect: 'callback_SelectCharacterEquip',\r\n//                 width: 160,\r\n//                 column: 0\r\n//             }}),\r\n//             menu.Options[nextIndex]\r\n//         ]\r\n//     }\r\n// }\r\n\r\nlet menuDx = 39\r\nlet menuDy = 42\r\n\r\nfunction Action(actionId) {\r\n    if (actionId.includes('callback_')) {\r\n        return menuMethods[actionId] ? menuMethods[actionId] : () => {}\r\n    } else if (actionId.includes('menu_')) {\r\n        let action = actionId.split('_')\r\n        ChangeMenu(action[1])\r\n    }\r\n    return () => {}\r\n}\r\n\r\nfunction ChangeMenu(id) {\r\n    currentMenuColumn = 0\r\n    currentMenuId = id\r\n    imu.RemoveElements()\r\n\r\n    if (id === 'GameSetup') {\r\n        imu.onUpdate = onGameSetupUpdate\r\n    } if (id === 'SetupEquipment') {\r\n        imu.onUpdate = onEquipSetupUpdate\r\n    }\r\n}\r\n\r\n// function GetMenuItems(menuId) {\r\n//     let menu = GetMenu(menuId)\r\n//     let items = menu.Options.filter(f => f.onSelect && (f.column === undefined || f.column === currentMenuColumn))\r\n//     if (items.length > 0 && currentMenuItem === '') {\r\n//         currentMenuItem = items[0].text\r\n//     }\r\n//     return items\r\n// }\r\n\r\n// function GetMenu(id) {\r\n//     try {\r\n//         return menus.filter(f => f.id === id)[0]\r\n//     } catch { return null }\r\n// }\r\n\r\nfunction StartMenu(id) {\r\n    input.listen()\r\n\r\n    input.released('moveDown', () => {\r\n        menu = GetMenu(currentMenuId)\r\n        menuItems = GetMenuItems(currentMenuId) //menu.Options.filter(f => f.onSelect)\r\n        menuItem = menuItems.filter(f => f.text === currentMenuItem)[0]\r\n        let index = menuItems.findIndex(f => f.text === currentMenuItem)\r\n        index++\r\n        if (index >= menuItems.length) {\r\n            index = 0\r\n        }\r\n        currentMenuItem = menuItems[index].text\r\n    })\r\n    input.released('moveUp', () => {\r\n        menu = GetMenu(currentMenuId)\r\n        menuItems = GetMenuItems(currentMenuId)//menu.Options.filter(f => f.onSelect)\r\n        menuItem = menuItems.filter(f => f.text === currentMenuItem)[0]\r\n        let index = menuItems.findIndex(f => f.text === currentMenuItem)\r\n        index--\r\n        if (index < 0) {\r\n            index = menuItems.length - 1\r\n        }\r\n        currentMenuItem = menuItems[index].text\r\n    })\r\n    input.released('attack', () => {\r\n        menu = GetMenu(currentMenuId)\r\n        menuItems = GetMenuItems(currentMenuId) //menu.Options.filter(f => f.onSelect)\r\n        try {\r\n            menuItem = menuItems.filter(f => f.text === currentMenuItem)[0]    \r\n            if (menuItem.onSelect) {\r\n                Action(menuItem.onSelect)(menuItem.text)\r\n            }\r\n        } catch {}\r\n    })\r\n}\r\n\r\nfunction drawFrame(delta) {\r\n    if (!ctx) {\r\n        ctx = getContext()\r\n    }\r\n    background.draw(0, 0)\r\n    background.update(delta)\r\n    drawUI(delta)\r\n}\r\n\r\nfunction OnRender(text, onRender) {\r\n    let arr = text.split(/{[0-9]}/)\r\n    let replacements = []\r\n    for (let r in arr) {\r\n        replacements.push(`{${r}}`)\r\n    }\r\n    let values = Action(onRender)(text, arr)\r\n    for (let v in values) {\r\n        text = text.replace(replacements[v], values[v])\r\n    }\r\n    return text\r\n}\r\n\r\nfunction drawUI(delta) {\r\n    if (!imu) {\r\n        imu = new imui.ImUI(ctx.canvas)\r\n        imu.font = font\r\n\r\n        let paramsTealFrame = { innerRect: { x: 6, y: 8, w: 53 , h: 47 }, type: 'ButtonImage', color: '#122020ff', highlight: '#122020ff', bgcolor: '#000000cc', image: getImage('ui-frame-teal'), imageDown: getImage('ui-frame-teal'), imageHover: getImage('ui-frame-teal') }\r\n        let paramsTealButton = { innerRect: { x: 5, y: 4, w: 9, h: 2 }, type: 'ButtonImage', color: '#122020ff', highlight: '#fa6a0aff', bgcolor: '#000000cc', image: getImage('ui-button-teal'), imageDown: getImage('ui-button-teal-down'), imageHover: getImage('ui-button-teal') }\r\n\r\n        imu.onUpdate = (ui) => {\r\n            let frameMenu = ui.Element({ id: 'frameMenu', rect: {x: 38, y: 28, w: 97, h: 96}, ...paramsTealFrame,\r\n                anim: {\r\n                    curve: 'bezier',\r\n                    duration: 100,\r\n                    params: {\r\n                        w: 12, h: 12\r\n                    },\r\n                    onComplete: (el) => { el }\r\n                }\r\n            })\r\n\r\n            if (!frameMenu.anim) {\r\n                let el = ui.Element({ id: 'lblMenu', text: 'Start', rect: {x: 6, y: 10, w: 86, h: 19}, ...paramsTealButton, }, frameMenu)\r\n                if (el.Clicked()) {\r\n                    // frameMenu.anim = {\r\n                    //     curve: 'bezier',\r\n                    //     duration: 100,\r\n                    //     params: {x: 38, y: 28, w: 97, h: 96},\r\n                    //     onComplete: (el) => { ChangeMenu('GameSetup') }\r\n                    // }\r\n                    // frameMenu.rect = {x: -116, y: 10, w: 86, h: 19}\r\n                    frameMenu.Animate(100, frameMenu.Rect(),  {x: -116, y: 28, w: 12, h: 12 }, () => ChangeMenu('GameSetup'))   \r\n                }\r\n            }\r\n        }\r\n    }\r\n    imu.Draw()\r\n}\r\n\r\nexport { drawFrame, StartMenu, ChangeMenu }","import images from './images.js'\r\nimport sfx from './sfx.js'\r\nimport music from './music.js'\r\nimport sprites from './sprites.js'\r\nimport Actor from './actor.js'\r\nimport { setContext, loadAllImages } from './images.js'\r\nimport { drawFrame as drawMain, StartScene } from './mainScene.js'\r\nimport { drawFrame as drawMainMenu, StartMenu } from './menuScene.js'\r\nimport { set, setDictionary } from './grammar.js'\r\nimport input from './input.js'\r\nimport { addTeam, currentTeam } from './teams.js'\r\nimport { addUnit, gridDimensions } from './map.js'\r\n\r\nvar dateNow = Date.now()\r\nvar dateThen = Date.now()\r\n\r\nvar targetDelta = 16 // Roughly 60fps by default\r\n\r\nvar currentScene = 'mainMenu'\r\n\r\nvar pointer = { x: 0, y: 0 }\r\n\r\nvar gameMap = null\r\n\r\nfunction getPointer() {\r\n    return { ...pointer, cellX: () => parseInt(pointer.x / gridDimensions().x), cellY: () => parseInt(pointer.y / gridDimensions().y) }\r\n}\r\n\r\nfunction setTargetFrameRate(target) {\r\n    targetDelta = parseInt(1000 / target) // Number of ms divided by target fps\r\n}\r\n\r\nfunction requestAnimationFrame() {\r\n    dateNow = Date.now()\r\n    let delta = dateNow - dateThen\r\n    if (delta >= targetDelta) {\r\n        drawFrame(delta)\r\n        dateThen = dateNow\r\n    }\r\n    window.requestAnimationFrame(requestAnimationFrame)\r\n}\r\n\r\n/**\r\n * Draws the animation frame.\r\n * @param {number} delta Number of ms since last frame.\r\n */\r\nfunction drawFrame(delta) {\r\n    if (currentScene === 'mainMenu') {\r\n        drawMainMenu(delta)\r\n    } else if (currentScene === 'main') {\r\n        drawMain(delta)\r\n    }\r\n}\r\n\r\nasync function StartMainMenu() {\r\n    await loadAllImages()\r\n\r\n    let canvas = document.getElementById('maincanvas')\r\n    let ratio = canvas.width / canvas.height\r\n    canvas.style.height = window.innerHeight + 'px'\r\n    canvas.style.width = window.innerHeight * ratio + 'px'\r\n    window.addEventListener('resize', () => {\r\n        canvas.style.height = window.innerHeight + 'px'\r\n        canvas.style.width = window.innerHeight * ratio + 'px'\r\n      })\r\n        \r\n    canvas.addEventListener('mousemove', (e) => {\r\n        pointer.x = parseInt((e.clientX - canvas.offsetLeft) * (canvas.width / parseInt(canvas.style.width))) - 2\r\n        pointer.y = parseInt((e.clientY - canvas.offsetTop) * (canvas.height / parseInt(canvas.style.height)))\r\n    })\r\n\r\n    canvas.addEventListener('contextmenu', (e) => {\r\n        e.preventDefault()\r\n        return false\r\n    })     \r\n\r\n    setTargetFrameRate(60)\r\n    setContext(canvas.getContext('2d'))\r\n\r\n    StartMenu()\r\n\r\n    window.requestAnimationFrame(requestAnimationFrame)\r\n}\r\n\r\nasync function Start(squad, map) {\r\n\r\n    gameMap = map\r\n\r\n    input.unlisten()\r\n    let canvas = document.getElementById('maincanvas')\r\n    currentScene = 'main'\r\n\r\n    addTeam('Team Alpha', '2d10')\r\n    addTeam('Team Bravo', '1d1')\r\n    \r\n    for (let s in squad) {\r\n        addUnit('Team Alpha', squad[s])\r\n    }\r\n\r\n    setTargetFrameRate(60)\r\n    setContext(canvas.getContext('2d'))\r\n\r\n    StartScene()\r\n\r\n    window.requestAnimationFrame(requestAnimationFrame)\r\n}\r\n\r\nexport { Start, StartMainMenu, getPointer, pointer, gameMap }"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","ctx","setContext","context","getContext","getImage","name","img","f","length","image","drawImage","x","y","srcRect","w","h","getMsSinceMidnight","d","Date","setHours","buildSprite","pose","onComplete","Error","sprite","frames","framesImage","currentFrame","updateDelta","play","animation","animStartTime","anim","sprPose","default","filter","imageName","sfx","getSfx","offsetx","offsety","async","speed","Promise","resolve","reject","spr","ox","oy","spd","t","mx","my","handler","p","amt","start","end","setTimeout","update","delta","frameDelay","repeat","animDuration","SetAnimation","roll","dice","toLowerCase","includes","dieterm","split","times","min","max","Math","floor","random","teams","teamIndex","phases","phase","addTeam","turnOrderRollDice","team","color","order","push","sort","a","b","getTeam","currentTeam","currentPhase","map","width","height","gridSize","gridOpacity","startAreaWidth","startAreaHeight","placingSprite","units","camera","gridDimensions","targetX","targetY","getCamera","cellX","parseInt","cellY","setPlacingSprite","triangleContains","ax","ay","bx","by","cx","cy","det","addUnit","teamName","unit","actor","character","spriteName","getUnits","console","log","constructor","params","this","Position","MapCoords","Draw","draw","imu","tooltip","handleAction","listening","handlerReleased","button","setState","callbacks","inputState","enabled","listenerKeyDown","e","inputs","keys","i","listenerKeyUp","window","removeEventListener","addEventListener","gameControl","on","gamepad","after","listen","unlisten","released","method","Character","data","maxHp","hp","equipment","error","effectModifiers","effects","EquipItem","item","UpdateEffects","effect","ttl","RemoveEffectModifier","AddEffect","undefined","attribute","AddEffectModifier","amount","EffectModifier","Name","Cost","EquipmentAndAbilities","eqab","equipAbilities","GunnerySkill","gunnerySkill","MeleeSkill","meleeSkill","Speed","Hp","MaxHp","squad","stars","menu","id","hireCharacter","char","fireCharacter","charIndex","findIndex","onUpdate","ui","paramsTealFrame","innerRect","type","highlight","bgcolor","imageDown","imageHover","paramsTealButton","paramsGreyButton","paramsLabel","frameMenu","Element","rect","curve","duration","el","statsMenu","buttonsMenu","classDescription","text","dy","Options","option","replace","elAdd","Clicked","elRemove","Hover","join","btnNext","toFrame","Rect","Animate","toStats","toButtons","ChangeMenu","transitionOut","selIndex","equip","paramsGreyListImage","bgcolorSelected","colorSelected","scrollbarWidth","scrollAreaImage","hover","pressed","caratImage","upImage","downImage","paramsGreyListImageMulti","multiSelect","checkboxImage","eqabMenu","list","m","currentItem","index","characterType","characters","c","listEquip","selectedList","eq","hoverItem","range","damage","cost","Start","tiles","teamATiles","teamBTiles","teamA","teamB","allTiles","hasTile","hasTeamATile","hasTeamBTile","buildMap","background","menuItems","menuItem","currentMenuId","currentMenuItem","RemoveElements","dateNow","now","dateThen","targetDelta","currentScene","pointer","gameMap","getPointer","setTargetFrameRate","target","requestAnimationFrame","imui","ImUI","canvas","font","clearRect","save","ga","globalAlpha","bfontjs","DrawText","restore","drawMap","cellx","celly","bg","slice","toUpperCase","StartMainMenu","promises","loadImage","filename","Image","onload","onerror","src","then","r","catch","allSettled","loadAllImages","document","getElementById","ratio","style","innerHeight","clientX","offsetLeft","clientY","offsetTop","preventDefault","GetMenu","GetMenuItems","onSelect","actionId","menuMethods","s"],"sourceRoot":""}