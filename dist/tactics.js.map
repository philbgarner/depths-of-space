{"version":3,"file":"tactics.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAiB,QAAID,IAErBD,EAAc,QAAIC,GACnB,CATD,CASGK,MAAM,I,mBCRT,IAAIC,EAAsB,CCA1BA,EAAwB,CAACL,EAASM,KACjC,IAAI,IAAIC,KAAOD,EACXD,EAAoBG,EAAEF,EAAYC,KAASF,EAAoBG,EAAER,EAASO,IAC5EE,OAAOC,eAAeV,EAASO,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDF,EAAwB,CAACQ,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFT,EAAyBL,IACH,oBAAXkB,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeV,EAASkB,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeV,EAAS,aAAc,CAAEoB,OAAO,GAAO,G,6oFCH9D,IAAIC,EAAM,KAEV,SAASC,EAAWC,GAChBF,EAAME,CACV,CAEA,SAASC,IACL,OAAOH,CACX,CAEA,SAASI,EAASC,GACd,IAAIC,EAAM,UAAcC,GAAKA,EAAEF,OAASA,IACxC,OAAOC,EAAIE,OAAS,EAAIF,EAAI,GAAGG,MAAQ,IAC3C,CAMA,SAASC,EAAUL,EAAMM,EAAGC,EAAGC,EAASC,GACpC,IAAIR,EAAM,UAAcC,GAAKA,EAAEF,OAASA,IACpCC,EAAIE,OAAS,IACTK,EACIC,GACAd,EAAIe,OACJf,EAAIgB,OAAO,EAAG,GACdhB,EAAIU,UAAUJ,EAAI,GAAGG,MAAOI,EAAQF,EAAGE,EAAQD,EAAGC,EAAQI,EAAGJ,EAAQK,GAAIP,EAAIE,EAAQI,EAAGL,EAAGC,EAAQI,EAAGJ,EAAQK,GAC9GlB,EAAImB,WAEJnB,EAAIU,UAAUJ,EAAI,GAAGG,MAAOI,EAAQF,EAAGE,EAAQD,EAAGC,EAAQI,EAAGJ,EAAQK,EAAGP,EAAGC,EAAGC,EAAQI,EAAGJ,EAAQK,GAGjGJ,GACAd,EAAIe,OACJf,EAAIgB,OAAO,EAAG,GACdhB,EAAIU,UAAUJ,EAAI,GAAGG,MAAOE,EAAIE,EAAQI,EAAGL,EAAGC,EAAQI,EAAGJ,EAAQK,GACjElB,EAAImB,WAEJnB,EAAIU,UAAUJ,EAAI,GAAGG,MAAOE,EAAGC,GAI/C,C,qjBC1BA,SAASQ,EAAmBC,GAExB,OAAOA,EADC,IAAIC,KAAKD,GACJE,SAAS,EAAE,EAAE,EAAE,EAC5B,CAEJ,SAASC,EAAYnB,EAAMM,EAAGC,EAAGa,EAAMC,GACnC,IAAK,EAAWrB,GACZ,MAAM,IAAIsB,MAAM,qDAAqDtB,OAEzE,IAAIuB,EAAS,CACTvB,KAAMA,EACNM,EAAGA,EAAGC,EAAGA,EACTiB,OAAQ,GACRJ,KAAMA,EACNK,YAAa,KACbC,aAAc,EACdC,YAAa,EACbC,MAAM,EACNnB,SAAS,EAEbc,aAAsB,CAACM,EAAWT,EAAMC,KACpCE,EAAOO,cAAgBf,EAAmB,IAAIE,MAC9C,IAAIc,EAAO,EAAWF,GAItB,GAHIR,IACAE,EAAOF,WAAaA,GAEpBU,EAAM,CACN,IAAIC,EAAUD,EAAKE,QAAUF,EAAKE,QAAU,KAE5C,GADAD,EAAUD,EAAKX,GAAQW,EAAKX,GAAQY,EAChCA,EAAS,CAET,KD/BL,EC8B2BE,QAAOhC,GAAKA,EAAEF,OAASgC,EAAQG,YAC7ChC,OAAS,GAab,MAAM,IAAImB,MAAM,mBAAmBF,QAAWS,MAP9C,GALAN,EAAOC,OAASQ,EAAQR,OACxBD,EAAOG,aAAe,EACtBH,EAAOM,UAAYA,EACnBN,EAAOH,KAAOA,EACdG,EAAOE,YAAcO,EAAQG,UACzBH,EAAQI,IAAK,CACb,IAAIA,EAAMC,OAAOL,EAAQI,KACrBA,GACAA,EAAIR,MAEZ,CAIR,MACIL,EAAOC,OAAS,GAChBD,EAAOG,aAAe,EACtBH,EAAOM,UAAY,GACnBN,EAAOH,KAAO,GAElBG,EAAOK,MAAO,CAClB,GAEJL,KAAc,CAACe,EAASC,KACpBD,EAAUA,GAAoB,EAC9BC,EAAUA,GAAoB,EAC9BlC,EAAUkB,EAAOE,YAAaF,EAAOjB,EAAIgC,EAASf,EAAOhB,EAAIgC,EAAShB,EAAOC,OAAOD,EAAOG,cAAeH,EAAOd,QAAO,EAE5Hc,OAAgBiB,MAAOlC,EAAGC,EAAGkC,IAClB,IAAIC,SAAQF,MAAOG,EAASC,KAC/B,IAAIC,EAAMtB,EACNuB,EAAKD,EAAIvC,EACTyC,EAAKF,EAAItC,EACTyC,EAAMP,EACNQ,EAAI,EACG,IAACC,EAAIC,QAAJD,EAiBD5C,EAjBK6C,EAiBF5C,EAjBS,IAAImC,SAAQ,CAACC,EAASC,KACzC,IAAIQ,EAAU,KAEV,GADAH,GAAKD,EACDC,GAAK,EACLJ,EAAIvC,EAAIA,EACRuC,EAAItC,EAAIA,EACRoC,QACG,CACH,IAAIU,EAtFjB,CAAE/C,GAAI,GADkBgD,EAuF4CL,KAvFxDM,EAuFoB,CAAEjD,EAAGwC,EAAIvC,EAAGwC,IAtFzBzC,EAAEgD,GADFE,EAuF+B,CAAElD,EAAG4C,EAAI3C,EAAG4C,IAtFjC7C,EAAGC,GAAI,EAAE+C,GAAKC,EAAMhD,EAAE+C,EAAIE,EAAIjD,GAuF9CsC,EAAIvC,EAAI+C,EAAE/C,EACVuC,EAAItC,EAAI8C,EAAE9C,EACVkD,WAAWL,EAAS,GACxB,CA3FlB,IAAqBG,EAAOC,EAAKF,CA2Ff,EAEJG,WAAWL,EAAS,GAAE,KAI1BT,GAAQ,KAgChB,OA7BApB,EAAOF,WAAaA,GAA0B,CAACE,IAAD,GAC9CA,EAAOmC,OAAUC,IACb,IAAI3B,EAAU,EAAWT,EAAOM,WAAWN,EAAOH,MAC9CY,GAAWT,EAAOK,OACdL,EAAOI,YAAcK,EAAQ4B,YAC7BrC,EAAOG,eACHH,EAAOG,aAAeH,EAAOC,OAAOrB,OAAS,IACzC6B,EAAQ6B,QACRtC,EAAOG,aAAe,EACtBH,EAAOuC,aAAe/C,EAAmB,IAAIE,MAAUM,EAAOO,cAC9DP,EAAOF,WAAWE,KAElBA,EAAOuC,aAAe/C,EAAmB,IAAIE,MAAUM,EAAOO,cAC9DP,EAAOG,eACPH,EAAOK,MAAO,EACdL,EAAOF,WAAWE,IAElBS,EAAQX,YACRW,EAAQX,WAAWE,IAG3BA,EAAOI,YAAc,GAErBJ,EAAOI,aAAegC,EAE9B,EAEJpC,EAAOwC,aAAa/D,EAAMoB,GAEnBG,CACX,CCjIA,SAASyC,EAAKC,GAEV,IADAA,EAAOA,EAAKC,eACFC,SAAS,KAEZ,CACH,IAAIC,EAAUH,EAAKI,MAAM,KACrBf,EAAM,EACV,IAAK,IAAIgB,EAAQ,EAAGA,EAAQF,EAAQ,GAAIE,IACpChB,IAbKiB,EAaU,EAbLC,EAaQJ,EAAQ,GAX3BK,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAahD,OAAOjB,CACX,CAhBJ,IAAiBiB,EAAKC,EAQd,MAAM,IAAIlD,MAAM,qDASxB,CChBA,IAAIsD,EAAQ,GACRC,EAAY,EACZC,EAAS,CAAC,cAAe,WAAY,SAAU,QAAS,UACxDC,EAAQ,EAEZ,SAASC,EAAQhF,EAAMiF,GACnB,IAAIC,EAAO,CACPlF,KAAMA,EACNmF,MAAO,YACPC,MAAOpB,EAAKiB,GACZI,aAAc,CAAE/E,EAAG,GAAIC,EAAG,IAAM+E,IAAiB/E,IAOrD,OALIqE,EAAMzE,OAAS,GAAM,IACrB+E,EAAKG,aAAe,CAAE/E,EAAG,IAAKC,EAAG,IAAM+E,IAAiB/E,IAE5DqE,EAAMW,KAAKL,GACXN,EAAMY,MAAK,CAACC,EAAGC,IAAMA,EAAEN,MAAQK,EAAEL,QAC1BF,CACX,CAEA,SAASS,EAAQ3F,GACb,IAAIkF,EAAON,EAAM1C,QAAOhC,GAAKA,EAAEF,OAASA,IACxC,OAAOkF,EAAK/E,OAAS,EAAI+E,EAAK,GAAK,IACvC,CAMA,SAASU,IACL,OAAOhB,EAAMC,EACjB,CAEA,SAASgB,IACL,OAAOf,EAAOC,EAClB,CAOA,SAASe,IAELjB,IADAA,GACyBD,EAAMzE,OAAS,EAAI0E,CAChD,CC3CA,IAAIkB,EAAM,KAEN,EAAM,KAENC,EAAU,GAEVC,EAAc,KAyBlB,SAASC,IACL,GAAuB,gBAAnBL,IAAkC,CAClC,IAAIM,EAAQC,EAASR,IAAc5F,MAAMkC,QAAOhC,IAAMA,EAAEmG,SACxD,GAAIF,EAAMhG,OAAS,EACf8F,EAAcE,EAAM,GACpBG,EAAiBH,EAAM,GAAG5E,aACvB,GAAI6E,IAAWlE,QAAOhC,IAAMA,EAAEmG,SAAQlG,OAAS,EAAG,CACrD2F,IACA,IAAIS,EAAOX,IAAcP,aACzBmB,IAAYC,UAAUF,EAAKjG,EAAGiG,EAAKhG,EAAG,MACtC2F,GACJ,MDLJnB,IADAA,GACiBD,EAAO3E,OAAS,EAAI4E,CCQrC,CACJ,CC7CA,IAAI2B,EAAM,KAENC,EAAQ,GACRC,EAAS,GAETC,EAAW,GACXC,EAAc,GAEdC,EAAiB,GACjBC,EAAkB,GAElBC,EAAgB,KAEhBC,EAAgB,GAChBC,EAAe,GAEfhB,EAAQ,GAERiB,EAAS,CACT9G,EAAG,GACHC,EAAG,IAAM+E,IAAiB/E,EAE1BK,EAAG+F,EAAQrB,IAAiBhF,EAAGO,EAAG+F,EAAStB,IAAiB/E,EAC5D8G,QAAS,GACTC,QAAS,IAAMhC,IAAiB/E,EAChCgH,aAAc,GACdC,aAAc,IAAMlC,IAAiB/E,EACrCkH,eAAgB,EAChBC,cAAe,GAGnB,SAASC,IACL,OAAOR,CACX,CAEA,SAASS,EAAkBC,EAAMC,EAAOC,GAoBpC,SAASC,EAAkBC,EAAGC,EAAKC,GAC/B,OAAO1D,KAAK2D,IAAKH,EAAE3H,EAAI4H,GAAOzD,KAAK2D,IAAKH,EAAE1H,EACtC4H,EACR,CAEA,SAASE,EAAaJ,EAAGK,EAAIC,EAAIL,EAAKC,GAClC,IAAIK,EAAI,CAAElI,EAAG2H,EAAE3H,EAAIgI,EAAI/H,EAAG0H,EAAE1H,EAAIgI,EAAIE,OAAQR,EAAGS,EAAGT,EAAES,EAAIV,EAAkBC,EAAGA,EAAE3H,EAAIgI,EAAIL,EAAE1H,EAAIgI,GAAK1H,EAAGmH,EAAkB,CAAE1H,EAAG2H,EAAE3H,EAAIgI,EAAI/H,EAAG0H,EAAE1H,EAAIgI,GAAML,EAAKC,IAE1J,OADAK,EAAEtI,EAAIsI,EAAEE,EAAIF,EAAE3H,EACP2H,CACX,CA5BAtB,EAAgB,GAChBC,EAAe,GAEf,SAASwB,EAAWC,EAAIC,EAAIC,EAAOC,IAC/BA,EAAOC,WAAWD,IACP,GAIa,IADTD,EAAM5G,QAAOhC,GAAKA,EAAEI,IAAMsI,GAAM1I,EAAEK,IAAMsI,IAC1C1I,SACT2I,EAAMvD,KAAK,CAACqD,EAAIC,IAChBF,EAAWC,EAAK,EAAGC,EAAIC,EAAOC,EAAO,GACrCJ,EAAWC,EAAIC,EAAK,EAAGC,EAAOC,EAAO,GACrCJ,EAAWC,EAAK,EAAGC,EAAIC,EAAOC,EAAO,GACrCJ,EAAWC,EAAIC,EAAK,EAAGC,EAAOC,EAAO,GAE7C,CACAJ,CAAWd,EAAKvH,EAAGuH,EAAKtH,EAAG2G,EAAeW,EAAKoB,UAAUC,SAoFzD/B,EAvEA,SAAe2B,EAAOK,EAAQC,EAAQlB,EAAKC,EAAKkB,GAC5C,IAAKP,EACD,MAAO,GAEX,GAAIK,IAAWjB,GAAOkB,IAAWjB,EAC7B,MAAO,GAEX,GAA+D,IAA3DW,EAAM5G,QAAOhC,GAAKA,EAAE,KAAOgI,GAAOhI,EAAE,KAAOiI,IAAKhI,OAChD,MAAO,GAGX,IAAImJ,EAAO,GACPC,EAAS,GAEb,IADAD,EAAK/D,KAAK,CAAEjF,EAAG6I,EAAQ5I,EAAG6I,EAAQX,OAAQ,KAAMC,EAAG,EAAG7H,EAAG,EAAGX,EAAG,IACxDoJ,EAAKnJ,OAAS,GAAG,CACpB,IAAI8H,EAAIqB,EAAK9D,MAAK,CAACC,EAAGC,IAAMD,EAAEvF,EAAIwF,EAAExF,IAAG,GAEvCoJ,EAAOA,EAAKpH,QAAOhC,GAAKA,EAAEI,IAAM2H,EAAE3H,GAAKJ,EAAEK,IAAM0H,EAAE1H,IAEjD,IAAIiJ,EAAa,GAEbV,EAAM5G,QAAOhC,GAAKA,EAAE,KAAO+H,EAAE3H,EAAI,GAAKJ,EAAE,KAAO+H,EAAE1H,IAAGJ,OAAS,GAC7DqJ,EAAWjE,KAAK8C,EAAaJ,EAAG,EAAG,EAAGC,EAAKC,IAE3CW,EAAM5G,QAAOhC,GAAKA,EAAE,KAAO+H,EAAE3H,EAAI,GAAKJ,EAAE,KAAO+H,EAAE1H,IAAGJ,OAAS,GAC7DqJ,EAAWjE,KAAK8C,EAAaJ,GAAI,EAAG,EAAGC,EAAKC,IAE5CW,EAAM5G,QAAOhC,GAAKA,EAAE,KAAO+H,EAAE3H,GAAKJ,EAAE,KAAO+H,EAAE1H,EAAI,IAAGJ,OAAS,GAC7DqJ,EAAWjE,KAAK8C,EAAaJ,EAAG,EAAG,EAAGC,EAAKC,IAE3CW,EAAM5G,QAAOhC,GAAKA,EAAE,KAAO+H,EAAE3H,GAAKJ,EAAE,KAAO+H,EAAE1H,EAAI,IAAGJ,OAAS,GAC7DqJ,EAAWjE,KAAK8C,EAAaJ,EAAG,GAAI,EAAGC,EAAKC,IAEhD,IAAK,IAAIsB,KAASD,EAAY,CAC1B,IAAIhB,EAAIgB,EAAWC,GAEnB,GADAjB,EAAEtI,EAAIsI,EAAEE,EAAIF,EAAE3H,EACV2H,EAAElI,IAAM4H,GAAOM,EAAEjI,IAAM4H,EAAK,CAE5B,IAAIuB,EAAOlB,EACPmB,EAAO,GACX,KAAgB,OAATD,GACHC,EAAKpE,KAAKmE,GACVA,EAAOA,EAAKjB,OAEhB,OAAIkB,EAAKxJ,OAASkJ,EAAK,EACZ,GAEJM,CACX,CAG0B,IADTJ,EAAOrH,QAAOhC,GAAKA,EAAEI,IAAMkI,EAAElI,GAAKJ,EAAEK,IAAMiI,EAAEjI,GAAKL,EAAEA,EAAIsI,EAAEtI,IAC3DC,QACXmJ,EAAK/D,KAAKiD,EAElB,CAEA,GADAe,EAAOhE,KAAK0C,GACRsB,EAAOpJ,OAAS2I,EAAM3I,OAAQ,CAE9B,IAAIuJ,EAAOzB,EACP0B,EAAO,GACX,KAAgB,OAATD,GACHA,EAAKxJ,EAAI+H,EAAES,EAAIV,EAAkB0B,EAAMxB,EAAKC,GAC5CwB,EAAKpE,KAAKmE,GACVA,EAAOA,EAAKjB,OAEhB,OAAOkB,CACX,CACJ,CACA,OAAOL,CACX,CAEeM,CAAM1C,EAAeW,EAAKvH,EAAGuH,EAAKtH,EAAGuH,EAAOC,EAAOF,EAAKoB,UAAUC,SACjFW,QAAQC,IAAI,eAAgB3C,EAChC,CAMA,SAAS4C,EAAY9G,GAEjB,OAAOA,EAAIA,GAAK,EAAM,EAAMA,EAChC,CAEA,SAASuD,IACL,MAAO,IAAKY,EAAQ4C,MAAO,IAAMC,SAAS7C,EAAO9G,EAAIgF,IAAiBhF,GAAI4J,MAAO,IAAMD,SAAS7C,EAAO7G,EAAI+E,IAAiB/E,GACxHkG,UAAW,CAACnG,EAAGC,EAAG4J,KACd/C,EAAOG,aAAeH,EAAO9G,EAC7B8G,EAAOI,aAAeJ,EAAO7G,EAC7B6G,EAAOC,QAAU/G,EACjB8G,EAAOE,QAAU/G,EACjB6G,EAAOK,eAAiB0C,EACxB/C,EAAOM,cAAgB,GAGnC,CAEA,SAASpB,EAAiB/E,GACtB0F,EAAgB1F,CACpB,CAMA,SAAS6I,EAAiBC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIpK,EAAGC,GAEjD,IAAIoK,GAAOJ,EAAKF,IAAOK,EAAKJ,IAAOE,EAAKF,IAAOG,EAAKJ,GAEpD,OAAQM,IAAQJ,EAAKF,IAAO9J,EAAI+J,IAAOE,EAAKF,IAAOhK,EAAI+J,KAAQ,GACvDM,IAAQF,EAAKF,IAAOhK,EAAIiK,IAAOE,EAAKF,IAAOlK,EAAIiK,KAAQ,GACvDI,IAAQN,EAAKI,IAAOlK,EAAImK,IAAOJ,EAAKI,IAAOpK,EAAImK,KAAQ,CAEnE,CAEA,SAASG,EAAQC,EAAUhD,EAAMpH,GAC7B,IAAIqK,EAAQ,IAAI,EAAM,CAClB5F,KAAMS,EAAQkF,GACd7K,KAAM6H,EAAK7H,KACXiJ,UAAWpB,EACXkD,WAAY,SACZzK,EAAG,EACHC,EAAG,IAMP,OAJIE,IACAqK,EAAMvJ,OAAOd,QAAUA,GAE3B0F,EAAMZ,KAAKuF,GACJA,CACX,CAEA,SAAS1E,EAASyE,GACd,OAAIA,EACO1E,EAAMjE,QAAOhC,GAAKA,EAAEgF,KAAKlF,OAAS6K,IAElC1E,CAEf,CA4FA,SAASb,IACL,MAAO,CAAEhF,EAAGuG,EAAUtG,EAAGsG,EAC7B,CChRA,QA3BA,MACImE,YAAYC,GACRC,KAAKhG,KAAO+F,EAAO/F,KACnBgG,KAAKlL,KAAOiL,EAAOjL,KACnBkL,KAAKjC,UAAYgC,EAAOhC,UACxBiC,KAAK7E,QAAS,EACd6E,KAAK3J,OAASJ,EAAY8J,EAAOF,WAAYE,EAAO3K,EAAI2K,EAAO3K,EAAI,EAAG2K,EAAO1K,EAAI0K,EAAO1K,EAAI,EAAG,QAC/F2K,KAAK3J,OAAOuJ,MAAQI,IACxB,CAEAC,cACI,MAAO,CAAE7K,EAAG2J,SAASiB,KAAK3J,OAAOjB,EAAIgF,IAAiBhF,GAAIC,EAAG0J,SAASiB,KAAK3J,OAAOhB,EAAI+E,IAAiB/E,GAC3G,CAEA6K,WACI,MAAO,CAAE9K,EAAG4K,KAAK3J,OAAOjB,EAAGC,EAAG2K,KAAK3J,OAAOhB,EAC9C,CAEA8K,YACI,MAAO,CAAE/K,EAAG2J,SAASiB,KAAK3J,OAAOjB,EAAIgF,IAAiBhF,GAAIC,EAAG0J,SAASiB,KAAK3J,OAAOhB,EAAI+E,IAAiB/E,GAC3G,CAEA+K,KAAK3H,GACDuH,KAAK3J,OAAOgK,KAAK5H,EACrB,G,wTC1BJ,IAAI6H,GAAY,EAMhB,SAASC,EAAiBC,GACxBC,GAASD,GAAQ,GACbE,EAAUF,IACZE,EAAUF,GAAQA,EAEtB,CAYA,IAAIG,EAAa,CAAC,EACdD,EAAY,CAAC,EAEbE,EAAU,CAAE,WAAY,WAE5B,SAASH,GAASD,EAAQhM,GACxBmM,EAAWH,GAAUhM,CACvB,CASA,SAASqM,GAAgBC,GACvB,IAAKR,EACH,OAEF,IAAIS,EAASlN,OAAOmN,KAAK,KACzB,IAAK,IAAIC,KAAKF,EACRD,EAAEnN,MAAQ,IAAcoN,EAAOE,KA1CrCR,GA2CmBM,EAAOE,IA3CT,EA8CnB,CAEA,SAASC,GAAcJ,GACrB,IAAKR,EACH,OAEF,IAAIS,EAASlN,OAAOmN,KAAK,KACzB,IAAK,IAAIC,KAAKF,EACRD,EAAEnN,MAAQ,IAAcoN,EAAOE,KACjCV,EAAgBQ,EAAOE,GAG7B,CAGEN,EAAa,CAAC,EACdD,EAAY,CAAC,EACTE,EAAQ3H,SAAS,cACnBkI,OAAOC,oBAAoB,UAAWP,IACtCM,OAAOC,oBAAoB,QAASF,IACpCC,OAAOE,iBAAiB,UAAWR,IACnCM,OAAOE,iBAAiB,QAASH,KAE/BN,EAAQ3H,SAAS,YACnBqI,YAAYC,GAAG,WAAW,SAASC,GACjC,IAAIT,EAASlN,OAAOmN,KAAK,KACzB,IAAK,IAAIC,KAAKF,EACZS,EAAQD,GAAG,IAAaR,EAAOE,KAAK,SAEjCQ,MAAM,IAAaV,EAAOE,KAAK,KAChCV,EAAgBQ,EAAOE,GAAE,GAG/B,IAEFX,GAAY,EAiBd,SAZY,CACVoB,OAAQ,KACNpB,GAAY,GAEdqB,SAAU,KACRrB,GAAY,GAEdsB,SAAU,CAACpB,EAAQqB,KACjBnB,EAAUF,GAAUqB,I,g4BC/FxB,MAAMC,GACFhC,YAAYhL,GAER,IACIkL,KAAK+B,KAAO,WAAkB/M,GAAKA,EAAEF,OAASA,IAAM,GACpDkL,KAAK+B,KAAKC,MAAQhC,KAAK+B,KAAKE,GAC5BjC,KAAKlL,KAAOkL,KAAK+B,KAAKjN,KACtBkL,KAAKkC,UAAY,EACrB,CAAE,MACElC,KAAK+B,KAAO,CAAC,EACbpD,QAAQwD,MAAM,iCAAiCrN,KACnD,CAGAkL,KAAKoC,gBAAkB,CAAC,EAIxBpC,KAAKqC,QAAU,EACnB,CAEAC,UAAUC,GAEV,CAMAC,gBACI,IAAK,IAAI1B,KAAKd,KAAKqC,QAAS,CACxB,IAAII,EAASzC,KAAKqC,QAAQvB,GACtB2B,EAAOC,KACPD,EAAOC,MAEPD,EAAOC,KAAO,GACd1C,KAAK2C,qBAAqBF,EAElC,CACAzC,KAAKqC,QAAUrC,KAAKqC,QAAQrL,QAAOhC,GAAKA,EAAE0N,IAAM,GACpD,CAEAE,UAAUH,GACFA,EAAOC,KACP1C,KAAKqC,QAAQhI,KAAKoI,QAEGI,IAArBJ,EAAOK,WACP9C,KAAK+C,kBAAkBN,EAAOK,UAAWL,EAAOO,OAExD,CACAL,qBAAqBF,QACQI,IAArBJ,EAAOK,WACP9C,KAAK4C,UAAUH,EAAOK,WAA4B,EAAjBL,EAAOO,OAEhD,CAEAD,kBAAkBD,EAAWE,QACeH,IAApC7C,KAAKoC,gBAAgBU,KACrB9C,KAAKoC,gBAAgBU,GAAa,GAEtC9C,KAAKoC,gBAAgBU,IAAcE,CACvC,CAEAC,eAAeH,GACX,YAAwCD,IAApC7C,KAAKoC,gBAAgBU,GACd9C,KAAKoC,gBAAgBU,GAEzB,CACX,CAEAI,OACI,OAAOlD,KAAK+B,KAAKjN,IACrB,CAEAqO,OACI,OAAOnD,KAAK+B,KAAKoB,KAAOnD,KAAKiD,eAAe,OAChD,CAEAG,sBAAsBC,GAIlB,YAHaR,IAATQ,IACArD,KAAK+B,KAAKuB,eAAiBD,GAExBrD,KAAK+B,KAAKuB,eAAiBtD,KAAKiD,eAAe,iBAC1D,CAEAM,eACI,OAAOvD,KAAK+B,KAAKyB,aAAexD,KAAKiD,eAAe,eACxD,CAEAQ,aACI,OAAOzD,KAAK+B,KAAK2B,WAAa1D,KAAKiD,eAAe,aACtD,CAEAjF,QACI,OAAOgC,KAAK+B,KAAKxK,MAAQyI,KAAKiD,eAAe,QACjD,CAEAU,KACI,OAAO3D,KAAK+B,KAAKE,GAAKjC,KAAKiD,eAAe,KAC9C,CAEAW,QACI,OAAO5D,KAAK+B,KAAKC,MAAQhC,KAAKiD,eAAe,QACjD,E,+mLCrGJ,IAAIY,GAAQ,GACRC,GAAQ,GAEZ,IAAIC,GAAO,WAAa/O,GAAc,cAATA,EAAEgP,KAAoB,GAEnD,SAASC,GAAcnP,GACnB,IAAIoP,EAAO,IAAIpC,GAAUhN,GACrBgP,GAAQI,EAAKf,QAAU,IACvBU,GAAMxJ,KAAK6J,GACXJ,IAASI,EAAKf,OAEtB,CAEA,SAASgB,GAAcrP,GACnB,IAAIoP,EAAO,IAAIpC,GAAUhN,GACrBsP,EAAYP,GAAMQ,WAAUrP,GAAKA,EAAEF,OAASA,IAC5CsP,GAAa,IACbN,IAASI,EAAKf,OACdU,GAAQA,GAAM7M,QAAO,CAAChC,EAAGiM,IAAMA,IAAMmD,IAE7C,CAEA,SAASE,GAASC,GACd,IAAIC,EAAkB,CAAEC,UAAW,CAAErP,EAAG,EAAGC,EAAG,EAAGK,EAAG,GAAKC,EAAG,IAAM+O,KAAM,cAAezK,MAAO,YAAa0K,UAAW,YAAaC,QAAS,YAAa1P,MAAOL,EAAS,iBAAkBgQ,UAAWhQ,EAAS,iBAAkBiQ,WAAYjQ,EAAS,kBAClPkQ,EAAmB,CAAEN,UAAW,CAAErP,EAAG,EAAGC,EAAG,EAAGK,EAAG,EAAGC,EAAG,GAAK+O,KAAM,cAAezK,MAAO,YAAa0K,UAAW,YAAaC,QAAS,YAAa1P,MAAOL,EAAS,kBAAmBgQ,UAAWhQ,EAAS,uBAAwBiQ,WAAYjQ,EAAS,mBACvPmQ,EAAmB,CAAEP,UAAW,CAAErP,EAAG,EAAGC,EAAG,EAAGK,EAAG,EAAGC,EAAG,GAAK+O,KAAM,cAAezK,MAAO,YAAa0K,UAAW,YAAaC,QAAS,YAAa1P,MAAOL,EAAS,kBAAmBgQ,UAAWhQ,EAAS,uBAAwBiQ,WAAYjQ,EAAS,mBACvPoQ,EAAc,CAAEP,KAAM,UAAWzK,MAAO,YAAa0K,UAAW,YAAaC,QAAS,aACtFM,EAAYX,EAAGY,QAAQ,CAAEnB,GAAI,YAAaoB,KAAM,CAAChQ,EAAG,EAAGC,EAAG,GAAIK,EAAG,IAAKC,EAAG,QAAU6O,EACnF3N,KAAM,CACFwO,MAAO,SACPpG,SAAU,IACVc,OAAQ,CACJ1K,GAAI,KAERc,WAAamP,IAASA,KAI1BC,EAAYhB,EAAGY,QAAQ,CAAEnB,GAAI,aAAcoB,KAAM,CAAChQ,EAAG,IAAKC,EAAG,GAAIK,EAAG,IAAKC,EAAG,QAAU6O,EACtF3N,KAAM,CACFwO,MAAO,SACPpG,SAAU,IACVc,OAAQ,CACJ3K,EAAG,KAEPe,WAAamP,IAASA,KAI1BE,EAAcjB,EAAGY,QAAQ,CAAEnB,GAAI,eAAgBoB,KAAM,CAAChQ,EAAG,IAAKC,EAAG,IAAKK,EAAG,IAAKC,EAAG,OAAS6O,EAC1F3N,KAAM,CACFwO,MAAO,SACPpG,SAAU,IACVc,OAAQ,CACJ1K,EAAG,KAEPc,WAAamP,IAASA,KAI1BG,EAAoC,IAAjB5B,GAAM5O,OAAe,+CAAiD,eAAe4O,GAAM5O,UAAsB,IAAV6O,GAAc,uCAAyC,IACrL,IAAKoB,EAAUrO,KAAM,CACF0N,EAAGY,QAAQ,CAAEnB,GAAI,eAAgB0B,KAAM,GAAG5B,KAASsB,KAAM,CAAEhQ,EAAG,GAAIC,EAAG,GAAIK,EAAG,GAAIC,EAAG,OAASsP,GAAcC,GACzHX,EAAGY,QAAQ,CAAEnB,GAAI,WAAYU,KAAM,QAAStP,EAAG,IAAKC,EAAG,EAAGH,MAAOL,EAAS,cAAgBqQ,GAC1F,IAAI7H,EAAK,GACT,IAAK,IAAIzJ,KAAKmQ,GAAK4B,QAAS,CACxB,IAAIC,EAAS7B,GAAK4B,QAAQ/R,GAAG8R,KACzB5Q,EAAO8Q,EAAOzM,MAAM,KAAK,GACzB4E,EAAY,WAAkB/I,GAAKA,EAAEF,OAASA,IAAM,GACxD8Q,EAASA,EAAOC,QAAQ,MAAOhC,GAAM7M,QAAOhC,GAAKA,EAAEF,OAASA,IAAMG,QAClE,IAAIqQ,EAAKf,EAAGY,QAAQ,CAAEnB,GAAI,UAAYpQ,EAAG8R,KAAME,EAAQR,KAAM,CAAChQ,EAAG,GAAIC,EAAGgI,EAAK,EAAG3H,EAAG,GAAIC,EAAG,OAAQsP,GAAeC,GAC7GY,EAAQvB,EAAGY,QAAQ,CAAEnB,GAAI,aAAepQ,EAAG8R,KAAM,IAAKN,KAAM,CAAChQ,EAAG,GAAIC,EAAGgI,EAAI3H,EAAG,GAAIC,EAAG,OAAQqP,GAAoBE,GACjHY,EAAMC,WACN9B,GAAcnP,GAElB,IAAIkR,EAAWzB,EAAGY,QAAQ,CAAEnB,GAAI,aAAepQ,EAAG8R,KAAM,IAAKN,KAAM,CAAChQ,EAAG,IAAKC,EAAGgI,EAAI3H,EAAG,GAAIC,EAAG,OAAQqP,GAAoBE,GACrHc,EAASD,WACT5B,GAAcrP,IAGdwQ,EAAGW,SAAWH,EAAMG,SAAWD,EAASC,WACxCR,EAAmB,CACf,GAAG3Q,IAAQ,SAASiJ,EAAUoF,OAAQ,gBAAgBpF,EAAU2F,aAAc,kBAAkB3F,EAAUyF,eAAgB,UAAUzF,EAAUxG,QAC5I,OAAOwG,EAAUxG,QAAS,sBAAuB,WAAWwG,EAAUuF,kBAC1E4C,KAAK,OAGX7I,GAAM,EACV,CACJ,CAEA,IAAKmI,EAAY3O,KAAM,CACnB,IAAIsP,EAAU5B,EAAGY,QAAQ,CAAEnB,GAAI,UAAW0B,KAAM,OAAQN,KAAM,CAAEhQ,EAAG,GAAIC,EAAG,EAAGK,EAAG,GAAIC,EAAG,OAASoP,GAAoBS,GAChHW,EAAQF,UACRR,EAAmB,qEAEnBU,EAAQJ,WAWhB,SAAuBb,EAAWK,EAAWC,GACrC,IAAIY,EAAU,IAAKlB,EAAUmB,QAC7BD,EAAQhR,GAAK,IACb8P,EAAUoB,QAAQ,IAAK,IAAKpB,EAAUmB,QAAUD,GAChD,IAAIG,EAAU,IAAKhB,EAAUc,QAC7BE,EAAQnR,EAAI,IACZmQ,EAAUe,QAAQ,IAAK,IAAKf,EAAUc,QAAUE,GAChD,IAAIC,EAAYhB,EAAYa,OAC5BG,EAAUnR,EAAI,IACdmQ,EAAYc,QAAQ,IAAK,IAAKd,EAAYa,QAAUG,GAAW,IAAMC,GAAW,mBACxF,CApBQC,CAAcxB,EAAWK,EAAWC,EAE5C,EAEKD,EAAU1O,MACP4O,EAAiBxQ,QACAsP,EAAGY,QAAQ,CAAEnB,GAAI,aAAc0B,KAAMD,EAAkBL,KAAM,CAAEhQ,EAAG,EAAGC,EAAG,EAAGK,EAAG,IAAKC,EAAG,QAAUsP,GAAcM,EAe3I,CClHA,IAAIoB,IAAY,EACZC,GAAQ,GACR7I,GAAY,KAehB,SAAS,GAASwG,GACd,IAAIsC,EAAsB,CACtBjC,QAAS,YACT3K,MAAO,YACP6M,gBAAiB,YACjBC,cAAe,YACfpC,UAAW,YACXqC,eAAgB,EAChBC,gBAAiB,CACb/R,MAAOL,EAAS,yBAChBqS,MAAOrS,EAAS,yBAChBsS,QAAStS,EAAS,yBAClB4P,UAAW,CAAErP,EAAG,EAAGC,EAAG,EAAGK,EAAG,EAAGC,EAAG,KAEtCyR,WAAY,CACRlS,MAAOL,EAAS,mBAChBqS,MAAOrS,EAAS,yBAChBsS,QAAStS,EAAS,4BAEtBwS,QAAS,CACLnS,MAAOL,EAAS,uBAChBqS,MAAOrS,EAAS,6BAChBsS,QAAStS,EAAS,gCAEtByS,UAAW,CACPpS,MAAOL,EAAS,yBAChBqS,MAAOrS,EAAS,+BAChBsS,QAAStS,EAAS,mCAItB0S,EAA2B,IAAKV,EAAqBW,aAAa,EAClEC,cAAe,CACXvS,MAAOL,EAAS,eAChBqS,MAAOrS,EAAS,qBAChBsS,QAAStS,EAAS,yBAG1BgS,EAAoBC,gBAAkB,YACtCD,EAAoBE,cAAgB,YAEpC,IAAIvC,EAAkB,CAAEC,UAAW,CAAErP,EAAG,EAAGC,EAAG,EAAGK,EAAG,GAAKC,EAAG,IAAM+O,KAAM,cAAezK,MAAO,YAAa0K,UAAW,YAAaC,QAAS,YAAa1P,MAAOL,EAAS,iBAAkBgQ,UAAWhQ,EAAS,iBAAkBiQ,WAAYjQ,EAAS,kBAClPkQ,EAAmB,CAAEN,UAAW,CAAErP,EAAG,EAAGC,EAAG,EAAGK,EAAG,EAAGC,EAAG,GAAK+O,KAAM,cAAezK,MAAO,YAAa0K,UAAW,YAAaC,QAAS,YAAa1P,MAAOL,EAAS,kBAAmBgQ,UAAWhQ,EAAS,uBAAwBiQ,WAAYjQ,EAAS,mBACvPmQ,EAAmB,CAAEP,UAAW,CAAErP,EAAG,EAAGC,EAAG,EAAGK,EAAG,EAAGC,EAAG,GAAK+O,KAAM,cAAezK,MAAO,YAAa0K,UAAW,YAAaC,QAAS,YAAa1P,MAAOL,EAAS,kBAAmBgQ,UAAWhQ,EAAS,uBAAwBiQ,WAAYjQ,EAAS,mBAEvPqQ,EAAYX,EAAGY,QAAQ,CAAEnB,GAAI,iBAAkBoB,KAAM,CAAChQ,EAAG,EAAGC,EAAG,EAAGK,EAAG,GAAIC,EAAG,QAAU6O,EACtF3N,KAAM,CACFwO,MAAO,SACPpG,SAAU,IACVc,OAAQ,CACJ3K,GAAI,KAERe,WAAamP,IAASA,KAI9B,IAAKJ,EAAUrO,KAAM,CACjB,IAAI6Q,EAAWnD,EAAGY,QAAQ,CAAEnB,GAAI,WAAYoB,KAAM,CAAChQ,EAAG,GAAIC,EAAG,EAAGK,EAAG,IAAKC,EAAG,QAAU6O,EACjF3N,KAAM,CACFwO,MAAO,SACPpG,SAAU,IACVc,OAAQ,CACJ1K,GAAI,KAERc,WAAamP,IAASA,KAG9B,IAAKoC,EAAS7Q,KAAM,CAChB,IAAIyO,EAAKf,EAAGY,QAAQ,CAAEnB,GAAI,WAAYU,KAAM,YAAaiD,KAAM9D,GAAMrI,KAAIoM,GAAKA,EAAE9S,OAAOsQ,KAAM,CAAChQ,EAAG,EAAGC,EAAG,EAAGK,EAAG,GAAIC,EAAG,OAASkR,GAAsB3B,GAOnJ,GANuB,OAAnBI,EAAGuC,aAAwBvC,EAAGuC,cAAgBlB,MAlFxCpI,EAmFO+G,EAAGuC,aAlFhB,GAAKtJ,EAAQsF,GAAM5O,OAAS,IAGxC0R,GAAWpI,EACXR,GAAY8F,GAAM8C,IAIAmB,EAHGjE,GAAM8C,IAAU7R,KAArC8R,GAIO,WAAiB5R,GAAKA,EAAE+S,WAAW/Q,QAAOgR,GAAKA,IAAMF,IAAe7S,UA0E3DgT,IACAA,EAAUC,aAAe,KAG7BvB,IAAY,EAAG,CACfpC,EAAGY,QAAQ,CAAEnB,GAAI,YAAa0B,KAAM,aAAcN,KAAM,CAAEhQ,EAAG,EAAGC,EAAG,EAAGK,EAAG,GAAIC,EAAG,IAAM+R,GACtF,IAAIO,EAAY1D,EAAGY,QAAQ,CAAEnB,GAAI,gBAAiBU,KAAM,YAAaiD,KAAMf,GAAMpL,KAAIoM,GAAKA,EAAE9S,OAAOsQ,KAAM,CAAChQ,EAAG,EAAGC,EAAG,GAAIK,EAAG,IAAKC,EAAG,OAAS4R,GAA2BG,GACtK,IAAIS,EAAKvB,GAAMqB,EAAUG,WACzB,GAAID,EAAI,CACJ,IAAI1C,EAAmB,GACnB0C,EAAG5Q,OACHkO,EAAiBpL,KAAK,SAAS8N,EAAG5Q,SAElC4Q,EAAGE,MAAQ,GACX5C,EAAiBpL,KAAK,WAAW8N,EAAGG,UACpC7C,EAAiBpL,KAAK,SAAS8N,EAAGE,UAElC5C,EAAiBpL,KAAK,SAAS8N,EAAGG,UAEtC7C,EAAiBpL,KAAK,QAAQ8N,EAAGI,QACjChE,EAAGY,QAAQ,CAAEnB,GAAI,uBAAwB0B,KAAMD,EAAiBS,KAAK,MAAOd,KAAM,CAAEhQ,EAAG,IAAKC,EAAG,GAAIK,EAAG,GAAIC,EAAG,IAAM+R,EACvH,CACJ,CAEA,IAAIlC,EAAcjB,EAAGY,QAAQ,CAAEnB,GAAI,eAAgBoB,KAAM,CAAChQ,EAAG,IAAKC,EAAG,IAAKK,EAAG,IAAKC,EAAG,OAAS6O,EAC1F3N,KAAM,CACFwO,MAAO,SACPpG,SAAU,IACVc,OAAQ,CACJ1K,EAAG,KAEPc,WAAamP,IAASA,KAGzBE,EAAY3O,OACC0N,EAAGY,QAAQ,CAAEnB,GAAI,UAAW0B,KAAM,OAAQN,KAAM,CAAEhQ,EAAG,GAAIC,EAAG,EAAGK,EAAG,GAAIC,EAAG,OAASoP,GAAoBS,GACxGO,YACRa,GAAQ,GACRF,EAAcxB,EAAWwC,EAAUlC,GAAa,KAC5CgD,GAAM3E,GLwK9B,WACI,IAAIjG,EAAQ,GACR6K,EAAa,GACbC,EAAa,GAEjB,IAAK,IAAIrT,EAAI,EAAGA,EAAIqG,EAAQrG,IACxB,IAAK,IAAID,EAAI,EAAGA,EAAIqG,EAAOrG,IACvBwI,EAAMvD,KAAK,CAACjF,EAAGC,IAEX6J,EAAiB,EAAGH,SAASrD,EAAS,GAAKqD,SAASjD,EAAkB,GAAID,EAAgBkD,SAASrD,EAAS,GAAI,EAAGqD,SAASrD,EAAS,GAAKqD,SAASjD,EAAkB,GAAI1G,EAAGC,IAC5KoT,EAAWpO,KAAK,CAACjF,EAAGC,IAGpB6J,EAAiBzD,EAAOsD,SAASrD,EAAS,GAAKqD,SAASjD,EAAkB,GAAIL,EAAQI,EAAgBkD,SAASrD,EAAS,GAAID,EAAOsD,SAASrD,EAAS,GAAKqD,SAASjD,EAAkB,GAAI1G,EAAGC,IAC5LqT,EAAWrO,KAAK,CAACjF,EAAGC,IAkBhC,OAdAmG,EAAM,CACFoC,MAAOA,EAAO+K,MAAOF,EAAYG,MAAOF,EAAYG,SAAUjL,IAE9DkL,QAAU,CAAC1T,EAAGC,IACPmG,EAAIoC,MAAM5G,QAAOhC,GAAKA,EAAE,KAAOI,GAAKJ,EAAE,KAAOK,IAAGJ,OAAS,EAEpEuG,EAAIuN,aAAe,CAAC3T,EAAGC,IACZmG,EAAImN,MAAM3R,QAAOhC,GAAKA,EAAE,KAAOI,GAAKJ,EAAE,KAAOK,IAAGJ,OAAS,EAEpEuG,EAAIwN,aAAe,CAAC5T,EAAGC,IACZmG,EAAIoN,MAAM5R,QAAOhC,GAAKA,EAAE,KAAOI,GAAKJ,EAAE,KAAOK,IAAGJ,OAAS,EAEpEuG,EAAIoC,MAAQpC,EAAIoC,MAAM5G,QAAOhC,IAAMwG,EAAImN,MAAM3R,QAAOuD,GAAKA,EAAE,KAAOvF,EAAE,IAAMuF,EAAE,KAAOvF,EAAE,KAAIC,SAAWuG,EAAIoN,MAAM5R,QAAOwD,GAAKxF,EAAE,KAAOwF,EAAE,IAAMxF,EAAE,KAAOwF,EAAE,KAAIvF,SAC1J0J,QAAQC,IAAI,QAASpD,GACdA,CACX,CKzMqCyN,GAAU,KAGjB1E,EAAGY,QAAQ,CAAEnB,GAAI,UAAW0B,KAAM,OAAQN,KAAM,CAAEhQ,EAAG,EAAGC,EAAG,EAAGK,EAAG,GAAIC,EAAG,OAASqP,GAAoBQ,GACvGO,YACRa,GAAQ,GACRF,EAAcxB,EAAWwC,EAAUlC,GAAa,IAAMiB,GAAW,gBAG7E,CACJ,CArIJ,IAAsBlI,EASAuJ,EA8HlB,SAASpB,EAAcxB,EAAWwC,EAAUlC,EAAarP,GACrD,IAAIqQ,EAAYhB,EAAYa,OAC5BG,EAAUnR,EAAI,IACdmQ,EAAYc,QAAQ,IAAK,IAAKd,EAAYa,QAAUG,EAAWrQ,EACnE,CACJ,CC5IA,IAAI,GAAM,KAEN,GAAM,KAEV,IAII+S,GAAajT,EAAY,aAAc,EAAG,EAAG,QAG7CkT,GAAY,GACZC,GAAW,CAAC,EACZC,GAAgB,OAChBC,GAAkB,QAkEtB,SAAS7C,GAAWzC,GAEhBqF,GAAgBrF,EAChB,GAAIuF,iBAEO,cAAPvF,IACA,GAAIM,SAAW,IACN,mBAAPN,IACF,GAAIM,SAAW,GAEvB,CC3FA,IAAIkF,GAAUzT,KAAK0T,MACfC,GAAW3T,KAAK0T,MAEhBE,GAAc,GAEdC,GAAe,WAEfC,GAAU,CAAEzU,EAAG,EAAGC,EAAG,GAErByU,GAAU,KAEd,SAASC,KACL,MAAO,IAAKF,GAAS/K,MAAO,IAAMC,SAAS8K,GAAQzU,EAAIgF,IAAiBhF,GAAI4J,MAAO,IAAMD,SAAS8K,GAAQxU,EAAI+E,IAAiB/E,GACnI,CAEA,SAAS2U,GAAmBC,GACxBN,GAAc5K,SAAS,IAAOkL,EAClC,CAEA,SAASC,KAEL,IAAIzR,GADJ+Q,GAAUzT,KAAK0T,OACOC,GAClBjR,GAASkR,KAWjB,SAAmBlR,GACM,aAAjBmR,GD+GR,SAAmBnR,GACV,KACD,GAAM7D,KAEVsU,GAAW7I,KAAK,EAAG,GACnB6I,GAAW1Q,OAAOC,GAiBtB,SAAgBA,GACZ,IAAK,GAAK,CACN,GAAM,IAAI0R,KAAKC,KAAK,GAAIC,QACxB,GAAIC,KAAOA,KAEX,IAAI9F,EAAkB,CAAEC,UAAW,CAAErP,EAAG,EAAGC,EAAG,EAAGK,EAAG,GAAKC,EAAG,IAAM+O,KAAM,cAAezK,MAAO,YAAa0K,UAAW,YAAaC,QAAS,YAAa1P,MAAOL,EAAS,iBAAkBgQ,UAAWhQ,EAAS,iBAAkBiQ,WAAYjQ,EAAS,kBAClPkQ,EAAmB,CAAEN,UAAW,CAAErP,EAAG,EAAGC,EAAG,EAAGK,EAAG,EAAGC,EAAG,GAAK+O,KAAM,cAAezK,MAAO,YAAa0K,UAAW,YAAaC,QAAS,YAAa1P,MAAOL,EAAS,kBAAmBgQ,UAAWhQ,EAAS,uBAAwBiQ,WAAYjQ,EAAS,mBAE3P,GAAIyP,SAAYC,IACZ,IAAIW,EAAYX,EAAGY,QAAQ,CAAEnB,GAAI,YAAaoB,KAAM,CAAChQ,EAAG,GAAIC,EAAG,GAAIK,EAAG,GAAIC,EAAG,OAAQ6O,EACjF3N,KAAM,CACFwO,MAAO,SACPpG,SAAU,IACVc,OAAQ,CACJrK,EAAG,GAAIC,EAAG,IAEdQ,WAAamP,IAASA,KAIzBJ,EAAUrO,MACF0N,EAAGY,QAAQ,CAAEnB,GAAI,UAAW0B,KAAM,QAASN,KAAM,CAAChQ,EAAG,EAAGC,EAAG,GAAIK,EAAG,GAAIC,EAAG,OAAQoP,GAAqBG,GACxGa,WAQHb,EAAUoB,QAAQ,IAAKpB,EAAUmB,OAAS,CAACjR,GAAI,IAAKC,EAAG,GAAIK,EAAG,GAAIC,EAAG,KAAM,IAAM8Q,GAAW,cAEpG,CAER,CACA,GAAIrG,MACR,CApDI,EACJ,CCrHQ,CAAa3H,GACW,SAAjBmR,IRxBf,SAAmBnR,GACV,IACD,EAAM7D,KAEV,EAAI2V,UAAU,EAAG,EAAG,IAAK,KC2L7B,SAAiB9R,GACb,IAAIhE,EAAMG,IACVH,EAAIe,OAEJf,EAAI+V,WAAWtO,EAAO9G,GAAI8G,EAAO7G,GAEjCF,EAAU,aAAc,EAAG,GAE3B,IAAIsV,EAAQ1L,UAAUgL,KAAa3U,EAAIkG,IAAYlG,GAAKgF,IAAiBhF,GACrEsV,EAAQ3L,UAAUgL,KAAa1U,EAAIiG,IAAYjG,GAAK+E,IAAiB/E,GAEzE,GAAuB,gBAAnBsF,IAAkC,CAClC,IAAIgQ,EAAKlW,EAAImW,YACbnW,EAAImW,YAAchP,EAElB,IAAIgC,EAAQpC,EAAIoC,MAChB,IAAK,IAAI7F,KAAK6F,EAGVzI,EAAU,aAFFyI,EAAM7F,GAAG,GAAKqC,IAAiBhF,EAC/BwI,EAAM7F,GAAG,GAAKqC,IAAiB/E,GAI3C,IAAK,IAAI0C,KAAKyD,EAAImN,MAGdxT,EAAU,cAFFqG,EAAImN,MAAM5Q,GAAG,GAAKqC,IAAiBhF,EACnCoG,EAAImN,MAAM5Q,GAAG,GAAKqC,IAAiB/E,GAG/C,IAAK,IAAI0C,KAAKyD,EAAIoN,MAGdzT,EAAU,cAFFqG,EAAIoN,MAAM7Q,GAAG,GAAKqC,IAAiBhF,EACnCoG,EAAIoN,MAAM7Q,GAAG,GAAKqC,IAAiB/E,GAG/CZ,EAAImW,YAAcD,CACtB,CAEA3O,EAAc6O,SAAQ9S,GAAK5C,EAAU,aAAc4C,EAAE,GAAKqC,IAAiBhF,EAAG2C,EAAE,GAAKqC,IAAiB/E,KAElGoH,IAAoBxH,OAAS,GAC7BwH,IAAoBoO,SAAQC,IACxB3V,EAAU,gBAAiB2V,EAAI1V,EAAIgF,IAAiBhF,EAAG0V,EAAIzV,EAAI+E,IAAiB/E,EAAC,IAKzFF,EAAU,gBAAiBsV,EAAQrQ,IAAiBhF,EAAGsV,EAAQtQ,IAAiB/E,GAE5E0G,IACAA,EAAc3G,EAAIqV,EAAQrQ,IAAiBhF,EAAI,GAC/C2G,EAAc1G,EAAIqV,EAAQtQ,IAAiB/E,EAAI,GAC/C0G,EAAcvD,OAAOC,GACrBsD,EAAcsE,OACd0K,QAAQC,SAASpW,IAAcmH,EAAc3G,EAAI,GAAI2G,EAAc1G,EAAI,GAAI0G,EAAc6D,MAAM9K,KAAM,YAAawV,MAClHS,QAAQC,SAASpW,IAAcmH,EAAc3G,EAAI,GAAI2G,EAAc1G,EAAI,GAAI0G,EAAc6D,MAAM9K,KAAM,YAAawV,OF/O/G5Q,EEkPImR,SAAQ7Q,IACf,IAAIiB,EAAQC,EAASlB,EAAKlF,MAAMkC,QAAOhC,GAAKA,EAAEmG,SAC9C,IAAK,IAAI8P,KAAKhQ,EAAO,CACjBA,EAAMgQ,GAAG5U,OAAOmC,OAAOC,GACvB,IAAIyS,EAAO,YDrQZnQ,ICsQ0BE,EAAMgQ,KAC3BC,EAAO,YACP/V,EAAU,gBAAiB8F,EAAMgQ,GAAG7V,EAAIgF,IAAiBhF,EAAG6F,EAAMgQ,GAAG5V,EAAI+E,IAAiB/E,IAE9F4F,EAAMgQ,GAAG5U,OAAOgK,OAChB0K,QAAQC,SAASpW,IAAcqG,EAAMgQ,GAAG5U,OAAOjB,EAAI,GAAI6F,EAAMgQ,GAAG5U,OAAOhB,EAAI,GAAI4F,EAAMgQ,GAAGnW,KAAM,YAAawV,MAC3GS,QAAQC,SAASpW,IAAcqG,EAAMgQ,GAAG5U,OAAOjB,EAAI,GAAI6F,EAAMgQ,GAAG5U,OAAOhB,EAAI,GAAI4F,EAAMgQ,GAAGnW,KAAMoW,EAAMZ,KACxG,KAGJ7V,EAAImB,UAEAsG,EAAOK,eAAiB,IAExBL,EAAO9G,EAAI2J,SAAS7C,EAAOG,cAAgBH,EAAOC,QAAUD,EAAOG,cAAgBwC,EAAY3C,EAAOM,cAAgBN,EAAOK,iBAC7HL,EAAO7G,EAAI0J,SAAS7C,EAAOI,cAAgBJ,EAAOE,QAAUF,EAAOI,cAAgBuC,EAAY3C,EAAOM,cAAgBN,EAAOK,iBAC7HL,EAAOM,eAAiB/D,EACpByD,EAAOM,eAAiBN,EAAOK,iBAC/BL,EAAOK,eAAiB,EACxBL,EAAO9G,EAAI8G,EAAOC,QAClBD,EAAO7G,EAAI6G,EAAOE,SAG9B,CD5QI+O,CAAQ1S,GA2BHoC,IACDA,EAAM,IAAIsP,KAAKC,KAAK,EAAIC,QACxBxP,EAAIyP,KAAOA,KAEXzP,EAAIyJ,SAAYC,IACZ,IAAIkG,EAAQ1L,UAAUgL,KAAa3U,EAAIkG,IAAYlG,GAAKgF,IAAiBhF,GACrEsV,EAAQ3L,UAAUgL,KAAa1U,EAAIiG,IAAYjG,GAAK+E,IAAiB/E,GACrE+V,EAAK7G,EAAGY,QAAQ,CAAEnB,GAAI,QAAS0B,KAAM,GAAIN,KAAM,CAAEhQ,EAAG,EAAGC,EAAG,EAAGK,EAAG,IAAKC,EAAG,KAAOsE,MAAO,YAAaA,MAAO,YAAa2K,QAAS,cACpI,GAAuB,gBAAnBjK,KAQA,GAPIyQ,EAAGnF,SAAWlL,IAEVD,EADAgP,GAAQf,aAAa0B,EAAOC,GAClB,cAEA,qBAAqBD,KAASC,qCAG5CU,EAAGrF,WAAahL,EAAa,CAC7BA,EAAY3F,EAAIqV,EAChB1P,EAAY1F,EAAIqV,EAChB3P,EAAY1E,OAAOjB,EAAIqV,EAAQrQ,IAAiBhF,EAAI,GACpD2F,EAAY1E,OAAOhB,EAAIqV,EAAQtQ,IAAiB/E,EAAI,GACpD0F,EAAYI,QAAS,EACrBC,EAAiB,MACjBL,EAAc,KACdD,EAAU,aAAa2P,MAAUC,KACjC9P,IACA,IAAIS,EAAOX,IAAcP,aACzBmB,IAAYC,UAAUF,EAAKjG,EAAGiG,EAAKhG,EAAG,MAnE/C,IAAImC,SAAQ,CAACC,EAASC,KACzBa,YAAW,KACPd,GAAQ,GAkEM,IAjER,IAiEa4T,MAAK,IAAMrQ,KAC1B,OACG,GAAuB,aAAnBL,IACP,GAAIyQ,EAAGrF,WAA6B,OAAhBhL,EAAsB,CACtC,IAAI4B,ECyHxB,SAAiBvH,EAAGC,GAChB,IAAIsH,EAAO1B,EAAMjE,QAAOhC,GAAKA,EAAEI,IAAMA,GAAKJ,EAAEK,IAAMA,IAClD,OAAOsH,EAAK1H,OAAS,EAAI0H,EAAK,GAAK,IACvC,CD5H+B2O,CAAQb,EAAOC,GACtB/N,IACA5B,EAAc4B,EACdD,EAAkBC,EAAM8N,EAAOC,GAEvC,MAAWU,EAAGrF,WAAahL,GACvBA,EAAc,KCoD9BiB,EAAgB,IDlDOoP,EAAGnF,SAAWlL,GACrB2B,EAAkB3B,EAAa0P,EAAOC,GAI9C,IAAI7Q,EAAQc,IAAe4Q,MAAM,EAAG,GAAGC,cAAgB7Q,IAAe4Q,MAAM,GAC5EhH,EAAGY,QAAQ,CAAEnB,GAAI,WAAY0B,KAAM,GAAG7L,MAAUa,IAAc5F,OAAQsQ,KAAM,CAAEhQ,EAAG,GAAIC,EAAG,EAAGK,EAAG,IAAKC,EAAG,GAAKsE,MAAO,YAAaA,MAAO,YAAa2K,QAAS,cAE5JL,EAAGY,QAAQ,CAAEnB,GAAI,aAAc0B,KAAM5K,EAASsK,KAAM,CAAEhQ,EAAG,EAAGC,EAAG,IAAKK,EAAG,IAAKC,EAAG,IAAMsE,MAAO,YAAa0K,UAAW,YAAaC,QAAS,aAAa,GAG/J/J,EAAIuF,MA3ER,CQgBQ,CAAS3H,EAEjB,CAhBQ,CAAUA,GACViR,GAAWF,IAEfrI,OAAO+I,sBAAsBA,GACjC,CAcA5S,eAAemU,WZYf,WACI,IAAIC,EAAW,GACf,IAAK,IAAIzK,KAAK,EAAQ,CAClB,IAAI/L,EAAQ,EAAO+L,GACnByK,EAASrR,KAAK,IAAI7C,SAAQ,CAACC,EAASC,KAAWiU,OAxBpCC,EAwB8C1W,EAAM0W,SAvB5D,IAAIpU,SAAQ,CAACC,EAASC,KACzB,IAAI3C,EAAM,IAAI8W,MACd9W,EAAI+W,OAAUhL,IACVrJ,EAAQ1C,EAAG,EAEfA,EAAIgX,QAAWjL,IACXnC,QAAQwD,MAAM,uBAAuByJ,KAAa9K,GAClDpJ,EAAO,KAAI,EAEH,UAAc1C,GAAKA,EAAE4W,WAAaA,IACpC3W,OAAS,EACfF,EAAIiX,IAAMJ,GAEVjN,QAAQwD,MAAM,sCAAsCyJ,gBACpDlU,EAAO,MACX,KAQyE2T,MAAKY,IAC1E/W,EAAMA,MAAQ+W,EACdxU,EAAQwU,EAAC,IACVC,OAAMpL,GAAKnC,QAAQwD,MAAM,iBAAkBjN,EAAM0W,SAAU9K,KA3BtE,IAAmB8K,CA2BsD,IACrE,CACA,OAAOpU,QAAQ2U,WAAWT,EAC9B,CYrBUU,GAEN,IAAI/B,EAASgC,SAASC,eAAe,cACjCC,EAAQlC,EAAO5O,MAAQ4O,EAAO3O,OAClC2O,EAAOmC,MAAM9Q,OAASyF,OAAOsL,YAAc,KAC3CpC,EAAOmC,MAAM/Q,MAAQ0F,OAAOsL,YAAcF,EAAQ,KAClDpL,OAAOE,iBAAiB,UAAU,KAC9BgJ,EAAOmC,MAAM9Q,OAASyF,OAAOsL,YAAc,KAC3CpC,EAAOmC,MAAM/Q,MAAQ0F,OAAOsL,YAAcF,EAAQ,QAGtDlC,EAAOhJ,iBAAiB,aAAcP,IAClC+I,GAAQzU,EAAI2J,UAAU+B,EAAE4L,QAAUrC,EAAOsC,aAAetC,EAAO5O,MAAQsD,SAASsL,EAAOmC,MAAM/Q,SAAW,EACxGoO,GAAQxU,EAAI0J,UAAU+B,EAAE8L,QAAUvC,EAAOwC,YAAcxC,EAAO3O,OAASqD,SAASsL,EAAOmC,MAAM9Q,SAAQ,IAGzG2O,EAAOhJ,iBAAiB,eAAgBP,IACpCA,EAAEgM,kBACK,KAGX9C,GAAmB,IACnBtV,EAAW2V,EAAOzV,WAAW,OD6C7B,YAEA,YAAe,YAAY,KAChBmY,QAAQ1D,IACfF,GAAY6D,aAAa3D,IACzBD,GAAWD,GAAUnS,QAAOhC,GAAKA,EAAE0Q,OAAS4D,KAAiB,GAC7D,IAAI/K,EAAQ4K,GAAU9E,WAAUrP,GAAKA,EAAE0Q,OAAS4D,KAChD/K,IACIA,GAAS4K,GAAUlU,SACnBsJ,EAAQ,GAEZ+K,GAAkBH,GAAU5K,GAAOmH,QAEvC,YAAe,UAAU,KACdqH,QAAQ1D,IACfF,GAAY6D,aAAa3D,IACzBD,GAAWD,GAAUnS,QAAOhC,GAAKA,EAAE0Q,OAAS4D,KAAiB,GAC7D,IAAI/K,EAAQ4K,GAAU9E,WAAUrP,GAAKA,EAAE0Q,OAAS4D,KAChD/K,IACIA,EAAQ,IACRA,EAAQ4K,GAAUlU,OAAS,GAE/BqU,GAAkBH,GAAU5K,GAAOmH,QAEvC,YAAe,UAAU,KACdqH,QAAQ1D,IACfF,GAAY6D,aAAa3D,IACzB,KACID,GAAWD,GAAUnS,QAAOhC,GAAKA,EAAE0Q,OAAS4D,KAAiB,IAChD2D,YAnETC,EAoEO9D,GAAS6D,UAnEfhU,SAAS,aACXkU,YAAYD,GAAYC,YAAYD,GAAY,QAChDA,EAASjU,SAAS,UAEzBwN,GADayG,EAAS/T,MAAM,KACV,IAEf,SA6D+BiQ,GAAS1D,KAE3C,CAAE,MAAO,CAtEjB,IAAgBwH,CAsEC,ICzEb/L,OAAO+I,sBAAsBA,GACjC,CAEA5S,eAAekR,GAAM3E,EAAOrI,GAExBsO,GAAUtO,EAEV,cACA,IAAI6O,EAASgC,SAASC,eAAe,cACrC1C,GAAe,OAEf9P,EAAQ,aAAc,QACtBA,EAAQ,aAAc,OAEtB,IAAK,IAAIwD,KAAKuG,EACVnE,EAAQ,aAAcmE,EAAMvG,IAAI,GAChCoC,EAAQ,aAAc0N,KAAKC,MAAMD,KAAKE,UAAUzJ,EAAMvG,MAAM,GAGhE0M,GAAmB,IACnBtV,EAAW2V,EAAOzV,WAAW,OR/C7BoG,IQmDAmG,OAAO+I,sBAAsBA,GACjC,C","sources":["webpack://tactics/webpack/universalModuleDefinition","webpack://tactics/webpack/bootstrap","webpack://tactics/webpack/runtime/define property getters","webpack://tactics/webpack/runtime/hasOwnProperty shorthand","webpack://tactics/webpack/runtime/make namespace object","webpack://tactics/./src/images.js","webpack://tactics/./src/sprites.js","webpack://tactics/./src/grammar.js","webpack://tactics/./src/teams.js","webpack://tactics/./src/mainScene.js","webpack://tactics/./src/map.js","webpack://tactics/./src/actor.js","webpack://tactics/./src/input.js","webpack://tactics/./src/character.js","webpack://tactics/./src/menus/gameSetup.js","webpack://tactics/./src/menus/equipSetup.js","webpack://tactics/./src/menuScene.js","webpack://tactics/./src/main.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tactics\"] = factory();\n\telse\n\t\troot[\"tactics\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import images from './images.json'\r\n\r\nvar ctx = null\r\n\r\nfunction setContext(context) {\r\n    ctx = context\r\n}\r\n\r\nfunction getContext() {\r\n    return ctx\r\n}\r\n\r\nfunction getImage(name) {\r\n    let img = images.filter(f => f.name === name)\r\n    return img.length > 0 ? img[0].image : null\r\n}\r\n\r\nfunction getImages() {\r\n    return images\r\n}\r\n\r\nfunction drawImage(name, x, y, srcRect, flipped) {\r\n    let img = images.filter(f => f.name === name)\r\n    if (img.length > 0) {\r\n        if (srcRect) {\r\n            if (flipped) {\r\n                ctx.save()\r\n                ctx.scale(-1, 1)\r\n                ctx.drawImage(img[0].image, srcRect.x, srcRect.y, srcRect.w, srcRect.h, -x - srcRect.w, y, srcRect.w, srcRect.h)    \r\n                ctx.restore()\r\n            } else {\r\n                ctx.drawImage(img[0].image, srcRect.x, srcRect.y, srcRect.w, srcRect.h, x, y, srcRect.w, srcRect.h)    \r\n            }\r\n        } else {\r\n            if (flipped) {\r\n                ctx.save()\r\n                ctx.scale(-1, 1)\r\n                ctx.drawImage(img[0].image, x - srcRect.w, y, srcRect.w, srcRect.h)    \r\n                ctx.restore()\r\n            } else {\r\n                ctx.drawImage(img[0].image, x, y)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction loadImage(filename) {\r\n    return new Promise((resolve, reject) => {\r\n        let img = new Image()\r\n        img.onload = (e) => {\r\n            resolve(img)\r\n        }\r\n        img.onerror = (e) => {\r\n            console.error(`Failed to load file ${filename}:`, e)\r\n            reject(null)\r\n        }\r\n        let image = images.filter(f => f.filename === filename)\r\n        if (image.length > 0) {\r\n            img.src = filename\r\n        } else {\r\n            console.error(`Image definition matching filename ${filename} not found.`)\r\n            reject(null)\r\n        }\r\n    })\r\n}\r\n\r\nfunction loadAllImages() {\r\n    let promises = []\r\n    for (let i in images) {\r\n        let image = images[i]\r\n        promises.push(new Promise((resolve, reject) => loadImage(image.filename).then(r => {\r\n            image.image = r\r\n            resolve(r)\r\n        }).catch(e => console.error('Failed to load', image.filename, e))))\r\n    }\r\n    return Promise.allSettled(promises)\r\n}\r\n\r\nexport { loadAllImages, loadImage, drawImage, getImage, getImages, setContext, getContext }\r\n","import { drawImage, getContext, getImages } from './images.js'\r\nimport animations from './sprites.json'\r\n\r\nfunction lerp (start, end, amt){\r\n    return (1-amt)*start+amt*end\r\n  }\r\n  function lerpCoords (start, end, amt){\r\n    return { x: (1-amt)*start.x+amt*end.x, y: (1-amt)*start.y+amt*end.y }\r\n  }\r\n\r\nfunction removeSprite(name) {\r\n    let index = sprites.findIndex(f => f.name === name)\r\n    if (index >= 0) {\r\n        sprites[index] = undefined\r\n    }\r\n    sprites = sprites.filter(f => f !== undefined)\r\n}\r\n\r\nfunction getMsSinceMidnight(d) {\r\n    var e = new Date(d);\r\n    return d - e.setHours(0,0,0,0)\r\n    }\r\n\r\nfunction buildSprite(name, x, y, pose, onComplete) {\r\n    if (!animations[name]) {\r\n        throw new Error(`Can't build sprite, missing animation definition '${name}'.`)\r\n    }\r\n    let sprite = {\r\n        name: name,\r\n        x: x, y: y,\r\n        frames: [],\r\n        pose: pose,\r\n        framesImage: null,\r\n        currentFrame: 0,\r\n        updateDelta: 0,\r\n        play: true,\r\n        flipped: false\r\n    }\r\n    sprite.SetAnimation = (animation, pose, onComplete) => {\r\n        sprite.animStartTime = getMsSinceMidnight(new Date())\r\n        let anim = animations[animation]\r\n        if (onComplete) {\r\n            sprite.onComplete = onComplete\r\n        }\r\n        if (anim) {\r\n            let sprPose = anim.default ? anim.default : null\r\n            sprPose = anim[pose] ? anim[pose] : sprPose\r\n            if (sprPose) {\r\n                let img = getImages().filter(f => f.name === sprPose.imageName)\r\n                if (img.length > 0) {\r\n                    sprite.frames = sprPose.frames\r\n                    sprite.currentFrame = 0\r\n                    sprite.animation = animation\r\n                    sprite.pose = pose\r\n                    sprite.framesImage = sprPose.imageName\r\n                    if (sprPose.sfx) {\r\n                        let sfx = getSfx(sprPose.sfx)\r\n                        if (sfx) {\r\n                            sfx.play()\r\n                        }\r\n                    }\r\n                } else {\r\n                    throw new Error(`Can't find pose ${pose} in ${animation}.`)\r\n                }\r\n            } else {\r\n                sprite.frames = []\r\n                sprite.currentFrame = 0\r\n                sprite.animation = ''\r\n                sprite.pose = ''\r\n            }\r\n            sprite.play = true\r\n        }\r\n    }\r\n    sprite.draw = (offsetx, offsety) => {\r\n        offsetx = offsetx ? offsetx : 0\r\n        offsety = offsety ? offsety : 0\r\n        drawImage(sprite.framesImage, sprite.x + offsetx, sprite.y + offsety, sprite.frames[sprite.currentFrame], sprite.flipped)\r\n    }\r\n    sprite.moveTo = async (x, y, speed) => {\r\n        return new Promise(async (resolve, reject) => {\r\n            let spr = sprite\r\n            let ox = spr.x\r\n            let oy = spr.y\r\n            let spd = speed\r\n            let t = 0\r\n            let move = (mx, my) => new Promise((resolve, reject) => {\r\n                let handler = () => {\r\n                    t += spd\r\n                    if (t >= 1) {\r\n                        spr.x = x\r\n                        spr.y = y\r\n                        resolve()\r\n                    } else {\r\n                        let p = lerpCoords({ x: ox, y: oy }, { x: mx, y: my }, t)\r\n                        spr.x = p.x\r\n                        spr.y = p.y\r\n                        setTimeout(handler, 16)\r\n                    }\r\n                }\r\n                setTimeout(handler, 16)\r\n            })\r\n    \r\n            await move(x, y)\r\n            resolve()\r\n        })\r\n    }\r\n    sprite.onComplete = onComplete ? onComplete : (sprite) => {}\r\n    sprite.update = (delta) => {\r\n        let sprPose = animations[sprite.animation][sprite.pose]\r\n        if (sprPose && sprite.play) {\r\n            if (sprite.updateDelta > sprPose.frameDelay) {\r\n                sprite.currentFrame++\r\n                if (sprite.currentFrame > sprite.frames.length - 1) {\r\n                    if (sprPose.repeat) {\r\n                        sprite.currentFrame = 0\r\n                        sprite.animDuration = getMsSinceMidnight(new Date()) - sprite.animStartTime\r\n                        sprite.onComplete(sprite)\r\n                    } else {\r\n                        sprite.animDuration = getMsSinceMidnight(new Date()) - sprite.animStartTime\r\n                        sprite.currentFrame--\r\n                        sprite.play = false\r\n                        sprite.onComplete(sprite)\r\n                    }\r\n                    if (sprPose.onComplete) {\r\n                        sprPose.onComplete(sprite)\r\n                    }\r\n                }\r\n                sprite.updateDelta = 0\r\n            } else {\r\n                sprite.updateDelta += delta\r\n            }\r\n        }\r\n    }\r\n    sprite.SetAnimation(name, pose)\r\n\r\n    return sprite\r\n}\r\n\r\nfunction getAnimation(animation) {\r\n    try {\r\n        return animations[animation]\r\n    } catch {}\r\n    return {}\r\n}\r\n\r\nexport { buildSprite, removeSprite, getAnimation, getMsSinceMidnight }","let grammar = {}\r\n\r\nfunction randInt(min, max) {\r\n    //return Math.floor(ROT.RNG.getUniform() * (max - min + 1) + min)\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n  }\r\n\r\nfunction roll(dice) {\r\n    dice = dice.toLowerCase();\r\n    if (!dice.includes('d')) {\r\n        throw new Error('At least one term must specify the number of dice.')\r\n    } else {\r\n        let dieterm = dice.split('d')\r\n        let amt = 0\r\n        for (let times = 0; times < dieterm[0]; times++) {\r\n            amt += randInt(1, dieterm[1])\r\n        }\r\n        return amt\r\n    }\r\n}\r\n\r\n/**\r\n * The value for the key specified as the id parameter. Value is either an array of strings or a string reference to an array of strings.\r\n * @param {string} id \r\n * @returns {string|array} Returns either the value of the key matching 'id', or an empty string.\r\n */\r\nfunction get(id) {\r\n    if (!id) {\r\n        return ''\r\n    }\r\n    if (typeof id === 'string') {\r\n        id = id.replace('[*', '').replace(']', '')\r\n    }\r\n    let item = grammar[id]\r\n    if (item) {\r\n        if (typeof item === 'string') {\r\n            return item\r\n        } else if (typeof item === 'object') {\r\n            return item[randInt(0, item.length - 1)]\r\n        }\r\n    }\r\n    return id //`[not found:${id}]`\r\n}\r\n\r\n/**\r\n * Set the value for the key specified as the id parameter. Value is either an array of strings or a string reference to an array of strings.\r\n * @param {string} id \r\n * @param {string|array} value \r\n */\r\nfunction set(id, value) {\r\n    grammar[id] = value\r\n}\r\n\r\n/**\r\n * Processes any operators on the text about to be added to the sentence chain.\r\n * @param {string} txt \r\n * @param {string} operator \r\n * @returns \r\n */\r\nfunction operatorText(txt, operator) {\r\n    if (operator === 'capital') {\r\n        txt = txt.charAt(0).toUpperCase() + txt.slice(1)\r\n    }\r\n    return txt\r\n}\r\n\r\nfunction parseTokens(template, context) {\r\n    if (template.includes('[')) {\r\n        let startPos = 0\r\n        let tokenMap = []\r\n        while(template.includes('[', startPos)) {\r\n            let paramStart = template.indexOf('[', startPos)\r\n            if (paramStart > startPos) {\r\n                tokenMap.push({ start: startPos, end: paramStart, token: null, value: template.substring(startPos, paramStart) })    \r\n            }\r\n            let paramEnd = template.indexOf(']', startPos)\r\n            let token = template.substring(paramStart, paramEnd + 1)\r\n            tokenMap.push({ start: paramStart, end: paramEnd, token: token, value: null })\r\n            startPos = paramEnd + 1\r\n        }\r\n        if (startPos < template.length) {\r\n            tokenMap.push({ start: startPos, end: template.length - 1, token: null, value: template.substring(startPos, template.length)})\r\n        }\r\n        return tokenMap\r\n    } else {\r\n        return [template]\r\n    }\r\n}\r\n\r\nfunction compareOperation(property, operation, operator, value) {\r\n    if (operation === \"is\") {\r\n        if (operator === '=') {\r\n            return property === value\r\n        }\r\n    } else if (operation === \"has\") {\r\n        if (operator === \"=\") {\r\n            return property[value] !== undefined\r\n        }\r\n    } else {\r\n        if (typeof property === 'object' && [\"=\", \"!=\", \">=\", \"<=\", \"<\", \">\"].includes(operator)) {\r\n            if ([\"=\", \"!=\"].includes(operator)) {\r\n                return operator === \"=\" ? property[operation] === value : property[operation] !== value\r\n            } else if ([\">=\", \"<=\"].includes(operator)) {\r\n                return operator === \">=\" ? property[operation] >= value : property[operation] <= value\r\n            } else if ([\">\", \"<\"].includes(operator)) {\r\n                return operator === \">\" ? property[operation] > value : property[operation] < value\r\n            }            \r\n        } else if (typeof property === 'number' && [\"=\", \"!=\", \">=\", \"<=\", \"<\", \">\"].includes(operator)) {\r\n            if ([\"=\", \"!=\"].includes(operator)) {\r\n                return operator === \"=\" ? property === value : property !== value\r\n            } else if ([\">=\", \"<=\"].includes(operator)) {\r\n                return operator === \">=\" ? property >= value : property <= value\r\n            } else if ([\">\", \"<\"].includes(operator)) {\r\n                return operator === \">\" ? property > value : property < value\r\n            }            \r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction process(template, context) {\r\n    if (!template.includes('[')) {\r\n        return {\r\n            'tokenmap': {},\r\n            'sentence': template,\r\n            'sentenceHTML': template\r\n        }\r\n    }\r\n    context = context ? context : {}\r\n    let tokenMap = processTokenMap(parseTokens(template, context), context)\r\n    let sentence = ''\r\n    let sentenceHTML = ''\r\n    let map = tokenMap\r\n    for (let m in map) {\r\n        if (m > 0) {\r\n            let prev = map[m - 1]\r\n            if ((prev.token_type === 'condition' && prev.token_result) || (prev.token_type !== 'condition' && map[m].value)) {\r\n                if (map[m].token) {\r\n                    prev.value = map[m].value\r\n                    sentenceHTML += `<mark title='${m > 0 ? JSON.stringify(prev) : map[m].token}'>${map[m].value}</mark>`\r\n                    sentence += map[m].value\r\n                } else {\r\n                    sentenceHTML += map[m].value\r\n                    sentence += map[m].value\r\n                }\r\n            }\r\n        } else {\r\n            if (map[m].token && map[m].value) {\r\n                sentenceHTML += `<mark title='${map[m].token}'>${map[m].value}</mark>`\r\n                sentence += map[m].value\r\n            } else if (map[m].value) {\r\n                    sentenceHTML += map[m].value\r\n                    sentence += map[m].value\r\n            }\r\n        }\r\n    }\r\n    if (!sentence.includes('[')) {\r\n        return {\r\n            'tokenmap': tokenMap,\r\n            'sentence': sentence,\r\n            'sentenceHTML': sentenceHTML\r\n        }\r\n    } else {\r\n        return process(sentence, context)\r\n    }\r\n}\r\n\r\nfunction processTokenMap(tokenMap, context) {\r\n    let activeConditional = -1\r\n    for (let t in tokenMap) {\r\n        if (tokenMap[t].value === null) {\r\n            if (tokenMap[t].token) {\r\n                if (tokenMap[t].token.substring(0, 2) === '[*') {\r\n                    tokenMap[t].token_type = 'lookup'\r\n                    let id = tokenMap[t].token.substring(2, tokenMap[t].token.length - 1)\r\n                    if (!id.includes('[')) {\r\n                        tokenMap[t].value = get(id)\r\n                    }\r\n                } else if (tokenMap[t].token.substring(0, 2) === '[?') {\r\n                    tokenMap[t].token_type = 'condition'\r\n                    activeConditional = t\r\n                    let id = tokenMap[t].token.substring(2, tokenMap[t].token.length - 1)\r\n                    let paths = id.split('.')\r\n\r\n                    let room = null\r\n                    if (context.room) {\r\n                        room = rooms.getRoom(context.room)\r\n                    }\r\n\r\n                    if (paths.length === 3) {\r\n                        let contextName = paths[0]\r\n                        let contextProperty = paths[1]\r\n                        let comparison = paths[2]\r\n\r\n                        if (contextName === 'room' && room) {\r\n                            if (room[contextProperty]) {\r\n                                let comp = comparison.search(/[(=)(!=)(<)(>)(>=)(<=)]/)\r\n                                if (comp >= 0) {\r\n                                    let operation = comparison.substring(0, comp)\r\n                                    let opEnd = comparison.slice(comp).search(/[A-Za-z0-9_-]/)\r\n                                    if (opEnd < 0) {\r\n                                        opEnd = 1\r\n                                    }\r\n                                    let operator = comparison.substring(comp, comp + opEnd)\r\n                                    let value = comparison.substring(comp + 1, comparison.length)\r\n                                    tokenMap[t].token_operation = operation\r\n                                    tokenMap[t].token_operator = operator\r\n                                    tokenMap[t].token_compare_to = value\r\n                                    tokenMap[t].token_property = room[contextProperty]\r\n                                    tokenMap[t].token_result = compareOperation(room[contextProperty], operation, operator, value)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (paths.length === 1) {\r\n                        // If there's no path, try a die roll notation.\r\n                        let comparison = paths[0]\r\n                        let comp = comparison.search(/[(=)(!=)(<)(>)(>=)(<=)]/)\r\n                        if (comp >= 0) {\r\n                            let operation = comparison.substring(0, comp)\r\n                            let opEnd = comparison.slice(comp).search(/[A-Za-z0-9_-]/)\r\n                            if (opEnd < 0) {\r\n                                opEnd = 1\r\n                            }\r\n                            let operator = comparison.substring(comp, comp + opEnd)\r\n                            let value = parseInt(comparison.substring(comp + 1, comparison.length))\r\n                            let rl = roll(operation)\r\n                            tokenMap[t].die_roll = rl\r\n                            tokenMap[t].token_operation = operation\r\n                            tokenMap[t].token_operator = operator\r\n                            tokenMap[t].token_compare_to = value\r\n                            tokenMap[t].token_property = rl\r\n                            tokenMap[t].token_result = compareOperation(rl, operation, operator, value)\r\n                        }\r\n                    }\r\n                } else if (tokenMap[t].token.toLowerCase() === \"[else]\") {\r\n                    if (activeConditional >= 0) {\r\n                        tokenMap[t].token_operation = tokenMap[activeConditional].token_operation\r\n                        tokenMap[t].token_operator = tokenMap[activeConditional].token_operator\r\n                        tokenMap[t].token_compare_to = tokenMap[activeConditional].token_compare_to\r\n                        tokenMap[t].token_property = tokenMap[activeConditional].token_property\r\n                        tokenMap[t].token_type = 'condition'\r\n                        tokenMap[t].token_result = !compareOperation(tokenMap[t].token_property, tokenMap[t].token_operation, tokenMap[t].token_operator, tokenMap[t].token_compare_to)\r\n                        activeConditional = -1\r\n                    }\r\n                } else if (tokenMap[t].token.substring(0, 1) === '[') {\r\n                    tokenMap[t].value = tokenMap[t].token.replace('[', '').replace(']', '')\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return tokenMap\r\n}\r\n\r\n/**\r\n * Get the generated text of the specified template text.\r\n * @param {string} template Template text to generate from the dictionary.\r\n * @param {object} context JSON containing the list of contexts and their objects to execute under.\r\n * @returns {string} Evaluated text result.\r\n */\r\nfunction text(template, context) {\r\n    let sentence = []\r\n    let startPos = 0\r\n    // If there are any tokens to process in this template.\r\n    if (template.includes('[')) {\r\n        let paramStart = 0\r\n        let paramEnd = template.indexOf('[')\r\n        while(template.includes('[', startPos)) {\r\n            paramStart = template.indexOf('[', startPos)\r\n            paramEnd = template.indexOf(']', startPos)\r\n            //sentence.push(template.substring(startPos, paramStart))\r\n            let id = template.substring(paramStart, paramEnd + 1)\r\n            \r\n            let operator\r\n            if (id.includes('.')) {\r\n                let parts = id.split('.')\r\n                id = parts[0] + ']'\r\n                operator = parts[1].toLowerCase().substring(0, parts[1].length - 1)\r\n            }\r\n            if (id !== template) {\r\n                let txt = text(id)\r\n                sentence.push(txt)\r\n            } else {\r\n                let txt = get(id)\r\n                sentence.push(txt)\r\n            }\r\n            startPos = paramEnd + 1\r\n        }\r\n        if (startPos < template.length) {\r\n            sentence.push(template.substring(startPos, template.length))\r\n        }\r\n    } else {\r\n        let id = get(template)\r\n        return id ? id : `[not found:${id}]` \r\n    }\r\n\r\n    let ret = sentence.reduce((prev, next) => prev + next)\r\n    return ret.includes('[*') ? text(ret) : ret\r\n}\r\n\r\n/**\r\n * Sets the whole dictionary object to the json parameter.\r\n * @param {object} json \r\n */\r\nfunction setDictionary(json) {\r\n    grammar = json\r\n}\r\n\r\n/**\r\n * Loads the dictionary from a file buffer.\r\n * @param {buffer} buffer \r\n */\r\nfunction loadDictionary(buffer) {\r\n    grammar = JSON.parse(buffer.toString())\r\n}\r\n\r\nexport { loadDictionary, setDictionary, text, set, get, roll, randInt }","import { roll } from './grammar.js'\r\nimport { gridDimensions } from './map.js'\r\n\r\nvar teams = []\r\nvar teamIndex = 0\r\nvar phases = ['positioning', 'movement', 'active', 'siege', 'upkeep']\r\nvar phase = 0\r\n\r\nfunction addTeam(name, turnOrderRollDice) {\r\n    let team = {\r\n        name: name,\r\n        color: '#ccccccff',\r\n        order: roll(turnOrderRollDice),\r\n        homePosition: { x: 24, y: 8.5 * gridDimensions().y }\r\n    }\r\n    if (teams.length % 2 === 1) {\r\n        team.homePosition = { x: 600, y: 8.5 * gridDimensions().y }\r\n    }\r\n    teams.push(team)\r\n    teams.sort((a, b) => b.order - a.order)\r\n    return team\r\n}\r\n\r\nfunction getTeam(name) {\r\n    let team = teams.filter(f => f.name === name)\r\n    return team.length > 0 ? team[0] : null\r\n}\r\n\r\nfunction getTeams() {\r\n    return teams\r\n}\r\n\r\nfunction currentTeam() {\r\n    return teams[teamIndex]\r\n}\r\n\r\nfunction currentPhase() {\r\n    return phases[phase]\r\n}\r\n\r\nfunction nextPhase() {\r\n    phase++\r\n    phase = phase >= phases.length ? 0 : phase\r\n}\r\n\r\nfunction nextTeam() {\r\n    teamIndex++\r\n    teamIndex = teamIndex >= teams.length ? 0 : teamIndex\r\n}\r\n\r\nexport { addTeam, currentTeam, currentPhase, nextPhase, getTeam, nextTeam, getTeams }","import { drawImage, getContext, getImage } from \"./images.js\"\r\nimport { getCamera, drawMap, getUnit, getUnits, setPlacingSprite, getPlacingSprite, gridDimensions, setPotentialMoves, clearPotentialMoves, getPotentialMoves } from \"./map.js\"\r\nimport { currentPhase, currentTeam, nextPhase, nextTeam } from \"./teams.js\"\r\nimport { getPointer, gameMap } from \"./main.js\"\r\n\r\nlet imu = null\r\n\r\nlet ctx = null\r\n\r\nlet tooltip = ''\r\n\r\nlet currentUnit = null\r\n\r\nfunction getCurrentUnit() {\r\n    return currentUnit\r\n}\r\n\r\nfunction delay(timeout) {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            resolve()\r\n        }, timeout)\r\n    })\r\n}\r\n\r\nfunction drawFrame(delta) {\r\n    if (!ctx) {\r\n        ctx = getContext()\r\n    }\r\n    ctx.clearRect(0, 0, 320, 200)\r\n\r\n    drawMap(delta)\r\n\r\n    drawUI(delta)\r\n}\r\n\r\nfunction handleAction() {\r\n    if (currentPhase() === 'positioning') {\r\n        let units = getUnits(currentTeam().name).filter(f => !f.placed)\r\n        if (units.length > 0) {\r\n            currentUnit = units[0]\r\n            setPlacingSprite(units[0].sprite)\r\n        } else if (getUnits().filter(f => !f.placed).length > 0) {\r\n            nextTeam()\r\n            let home = currentTeam().homePosition\r\n            getCamera().setTarget(home.x, home.y, 1500)\r\n            handleAction()\r\n        } else {\r\n            nextPhase()\r\n        }\r\n    }\r\n}\r\n\r\nfunction StartScene() {\r\n    handleAction()\r\n}\r\n\r\nfunction drawUI(delta) {\r\n    if (!imu) {\r\n        imu = new imui.ImUI(ctx.canvas)\r\n        imu.font = font\r\n\r\n        imu.onUpdate = (ui) => {\r\n            let cellx = parseInt((getPointer().x + getCamera().x) / gridDimensions().x)\r\n            let celly = parseInt((getPointer().y + getCamera().y) / gridDimensions().y)\r\n            let bg = ui.Element({ id: 'lblBg', text: ``, rect: { x: 0, y: 0, w: 320, h: 200 }, color: '#f1f100ff', color: '#f1f100ff', bgcolor: '#00000000'})\r\n            if (currentPhase() === 'positioning') {\r\n                if (bg.Hover() && currentUnit) {\r\n                    if (gameMap.hasTeamATile(cellx, celly)) {\r\n                        tooltip = 'Place unit.'\r\n                    } else {\r\n                        tooltip = `Invalid location (${cellx},${celly}), place inside the yellow area.`\r\n                    }\r\n                }\r\n                if (bg.Clicked() && currentUnit) {\r\n                    currentUnit.x = cellx\r\n                    currentUnit.y = celly\r\n                    currentUnit.sprite.x = cellx * gridDimensions().x - 12\r\n                    currentUnit.sprite.y = celly * gridDimensions().y - 20\r\n                    currentUnit.placed = true\r\n                    setPlacingSprite(null)\r\n                    currentUnit = null\r\n                    tooltip = `Placed at ${cellx}, ${celly}.`\r\n                    nextTeam()\r\n                    let home = currentTeam().homePosition\r\n                    getCamera().setTarget(home.x, home.y, 1500)        \r\n                    delay(300).then(() => handleAction())\r\n                }\r\n            } else if (currentPhase() === 'movement') {\r\n                if (bg.Clicked() && currentUnit === null) {\r\n                    let unit = getUnit(cellx, celly)\r\n                    if (unit) {\r\n                        currentUnit = unit\r\n                        setPotentialMoves(unit, cellx, celly)\r\n                    }\r\n                } else if (bg.Clicked() && currentUnit) {\r\n                    currentUnit = null\r\n                    clearPotentialMoves()\r\n                } else if (bg.Hover() && currentUnit) {\r\n                    setPotentialMoves(currentUnit, cellx, celly)\r\n                }\r\n            }\r\n\r\n            let phase = currentPhase().slice(0, 1).toUpperCase() + currentPhase().slice(1)\r\n            ui.Element({ id: 'lblPhase', text: `${phase}: ${currentTeam().name}`, rect: { x: 10, y: 3, w: 300, h: 9 }, color: '#f1f100ff', color: '#f1f100ff', bgcolor: '#000000cc'})\r\n\r\n            ui.Element({ id: 'lblTooltip', text: tooltip, rect: { x: 0, y: 190, w: 240, h: 10 }, color: '#f1f1f1ff', highlight: '#f1f1f1ff', bgcolor: '#000000cc' })\r\n        }\r\n    }\r\n    imu.Draw()\r\n}\r\n\r\nexport { drawFrame, StartScene, getCurrentUnit }","import Actor from \"./actor.js\"\r\nimport { getContext, drawImage } from \"./images.js\"\r\nimport { currentPhase, getTeam, getTeams } from \"./teams.js\"\r\nimport { getPointer } from \"./main.js\"\r\nimport { getCurrentUnit } from \"./mainScene.js\"\r\n\r\nvar map = null\r\n\r\nvar width = 36\r\nvar height = 24\r\n\r\nvar gridSize = 24\r\nvar gridOpacity = 0.3\r\n\r\nvar startAreaWidth = 10\r\nvar startAreaHeight = 24\r\n\r\nvar placingSprite = null\r\n\r\nvar movementTiles = []\r\nvar movementPath = []\r\n\r\nvar units = []\r\n\r\nvar camera = {\r\n    x: 24,\r\n    y: 8.5 * gridDimensions().y,\r\n    // x: 0, y: 0,\r\n    w: width * gridDimensions().x, h: height * gridDimensions().y,\r\n    targetX: 24,\r\n    targetY: 8.5 * gridDimensions().y,\r\n    targetStartX: 24,\r\n    targetStartY: 8.5 * gridDimensions().y,\r\n    targetDuration: 0,\r\n    targetElapsed: 0\r\n}\r\n\r\nfunction getPotentialMoves() {\r\n    return movementPath\r\n}\r\n\r\nfunction setPotentialMoves(unit, destX, destY) {\r\n    movementTiles = []\r\n    movementPath = []\r\n    \r\n    function handleMove(tx, ty, tiles, dist) {\r\n        dist = parseFloat(dist)\r\n        if (dist < 0) {\r\n            return\r\n        }\r\n        let tileList = tiles.filter(f => f.x === tx && f.y === ty)\r\n        if (tileList.length === 0) {\r\n            tiles.push([tx, ty])\r\n            handleMove(tx + 1, ty, tiles, dist - 1)\r\n            handleMove(tx, ty - 1, tiles, dist - 1)\r\n            handleMove(tx - 1, ty, tiles, dist - 1)\r\n            handleMove(tx, ty + 1, tiles, dist - 1)\r\n        }\r\n    }\r\n    handleMove(unit.x, unit.y, movementTiles, unit.character.Speed())\r\n\r\n    function manhattanDistance(q, toX, toY) {\r\n        return Math.abs (q.x - toX) + Math.abs (q.y -\r\n            toY)\r\n    }\r\n\r\n    function getSuccessor(q, dx, dy, toX, toY) {\r\n        let s = { x: q.x + dx, y: q.y + dy, parent: q, g: q.g + manhattanDistance(q, q.x + dx, q.y + dy), h: manhattanDistance({ x: q.x + dx, y: q.y + dy }, toX, toY)}\r\n        s.f = s.g + s.h\r\n        return s\r\n    }\r\n\r\n    function astar(tiles, startX, startY, toX, toY, mv) {\r\n        if (!tiles) {\r\n            return []\r\n        }\r\n        if (startX === toX && startY === toY) {\r\n            return []\r\n        }\r\n        if (tiles.filter(f => f[0] === toX && f[1] === toY).length === 0) {\r\n            return []\r\n        }\r\n\r\n        let open = []\r\n        let closed = []\r\n        open.push({ x: startX, y: startY, parent: null, g: 0, h: 0, f: 0 })\r\n        while (open.length > 0) {\r\n            let q = open.sort((a, b) => a.f - b.f)[0]\r\n            \r\n            open = open.filter(f => f.x !== q.x && f.y !== q.y)\r\n\r\n            let successors = []\r\n            \r\n            if (tiles.filter(f => f[0] === q.x + 1 && f[1] === q.y).length > 0) {\r\n                successors.push(getSuccessor(q, 1, 0, toX, toY))\r\n            }\r\n            if (tiles.filter(f => f[0] === q.x - 1 && f[1] === q.y).length > 0) {\r\n                successors.push(getSuccessor(q, -1, 0, toX, toY))\r\n            }    \r\n            if (tiles.filter(f => f[0] === q.x && f[1] === q.y + 1).length > 0) {\r\n                successors.push(getSuccessor(q, 0, 1, toX, toY))\r\n            }\r\n            if (tiles.filter(f => f[0] === q.x && f[1] === q.y - 1).length > 0) {\r\n                successors.push(getSuccessor(q, 0, -1, toX, toY))\r\n            }\r\n            for (let index in successors) {\r\n                let s = successors[index]\r\n                s.f = s.g + s.h\r\n                if (s.x === toX && s.y === toY) {\r\n                    // Goal\r\n                    let curr = s\r\n                    let path = []\r\n                    while (curr !== null) {\r\n                        path.push(curr)\r\n                        curr = curr.parent\r\n                    }\r\n                    if (path.length > mv + 1) {\r\n                        return []\r\n                    }\r\n                    return path\r\n                }\r\n                \r\n                let closedNode = closed.filter(f => f.x === s.x && f.y === s.y && f.f > s.f)\r\n                if (closedNode.length === 0) {\r\n                    open.push(s)\r\n                }\r\n            }\r\n            closed.push(q)\r\n            if (closed.length > tiles.length) {\r\n                // console.error('Error: More closed tiles than possible tiles in the list. Dumping current path.')\r\n                let curr = q\r\n                let path = []\r\n                while (curr !== null) {\r\n                    curr.f = q.g + manhattanDistance(curr, toX, toY)\r\n                    path.push(curr)\r\n                    curr = curr.parent\r\n                }\r\n                return path\r\n            }\r\n        }\r\n        return open\r\n    }\r\n\r\n    movementPath = astar(movementTiles, unit.x, unit.y, destX, destY, unit.character.Speed())\r\n    console.log('movementPath', movementPath)\r\n}\r\n\r\nfunction clearPotentialMoves() {\r\n    movementTiles = []\r\n}\r\n\r\nfunction BezierBlend(t)\r\n{\r\n    return t * t * (3.0 - 2.0 * t)\r\n}\r\n\r\nfunction getCamera() {\r\n    return { ...camera, cellX: () => parseInt(camera.x / gridDimensions().x), cellY: () => parseInt(camera.y / gridDimensions().y),\r\n        setTarget: (x, y, duration) => {\r\n            camera.targetStartX = camera.x\r\n            camera.targetStartY = camera.y\r\n            camera.targetX = x\r\n            camera.targetY = y\r\n            camera.targetDuration = duration\r\n            camera.targetElapsed = 0\r\n        }\r\n    }\r\n}\r\n\r\nfunction setPlacingSprite(sprite) {\r\n    placingSprite = sprite\r\n}\r\n\r\nfunction getPlacingSprite() {\r\n    return placingSprite\r\n}\r\n\r\nfunction triangleContains(ax, ay, bx, by, cx, cy, x, y) {\r\n\r\n    let det = (bx - ax) * (cy - ay) - (by - ay) * (cx - ax)\r\n\r\n    return  det * ((bx - ax) * (y - ay) - (by - ay) * (x - ax)) >= 0 &&\r\n            det * ((cx - bx) * (y - by) - (cy - by) * (x - bx)) >= 0 &&\r\n            det * ((ax - cx) * (y - cy) - (ay - cy) * (x - cx)) >= 0    \r\n\r\n}\r\n\r\nfunction addUnit(teamName, unit, flipped) {\r\n    let actor = new Actor({\r\n        team: getTeam(teamName),\r\n        name: unit.name,\r\n        character: unit,\r\n        spriteName: 'player',\r\n        x: 0,\r\n        y: 0\r\n    })\r\n    if (flipped) {\r\n        actor.sprite.flipped = flipped\r\n    }\r\n    units.push(actor)\r\n    return actor\r\n}\r\n\r\nfunction getUnits(teamName) {\r\n    if (teamName) {\r\n        return units.filter(f => f.team.name === teamName)\r\n    } else {\r\n        return units\r\n    }\r\n}\r\n\r\nfunction getUnit(x, y) {\r\n    let unit = units.filter(f => f.x === x && f.y === y)\r\n    return unit.length > 0 ? unit[0] : null\r\n}\r\n\r\nfunction drawMap(delta) {\r\n    let ctx = getContext()\r\n    ctx.save()\r\n\r\n    ctx.translate(-camera.x, -camera.y)\r\n\r\n    drawImage('mars-scape', 0, 0)\r\n\r\n    let cellx = parseInt((getPointer().x + getCamera().x) / gridDimensions().x)\r\n    let celly = parseInt((getPointer().y + getCamera().y) / gridDimensions().y)\r\n\r\n    if (currentPhase() === 'positioning') {\r\n        let ga = ctx.globalAlpha\r\n        ctx.globalAlpha = gridOpacity\r\n        \r\n        let tiles = map.tiles\r\n        for (let t in tiles) {\r\n            let x = tiles[t][0] * gridDimensions().x\r\n            let y = tiles[t][1] * gridDimensions().y\r\n            drawImage('grid-white', x, y)\r\n        }\r\n\r\n        for (let t in map.teamA) {\r\n            let x = map.teamA[t][0] * gridDimensions().x\r\n            let y = map.teamA[t][1] * gridDimensions().y\r\n            drawImage('grid-yellow', x, y)\r\n        }\r\n        for (let t in map.teamB) {\r\n            let x = map.teamB[t][0] * gridDimensions().x\r\n            let y = map.teamB[t][1] * gridDimensions().y\r\n            drawImage('grid-yellow', x, y)\r\n        }\r\n        ctx.globalAlpha = ga\r\n    }\r\n\r\n    movementTiles.forEach(t => drawImage('grid-green', t[0] * gridDimensions().x, t[1] * gridDimensions().y))\r\n   \r\n    if (getPotentialMoves().length > 0) {\r\n        getPotentialMoves().forEach(loc => {\r\n            drawImage('grid-selected', loc.x * gridDimensions().x, loc.y * gridDimensions().y)\r\n        })\r\n    }\r\n\r\n    // Highlighted mouse cell.\r\n    drawImage('grid-selected', cellx * gridDimensions().x, celly * gridDimensions().y)\r\n\r\n    if (placingSprite) {\r\n        placingSprite.x = cellx * gridDimensions().x - 12\r\n        placingSprite.y = celly * gridDimensions().y - 20\r\n        placingSprite.update(delta)\r\n        placingSprite.draw()\r\n        bfontjs.DrawText(getContext(), placingSprite.x + 12, placingSprite.y + 44, placingSprite.actor.name, '#000000cc', font)\r\n        bfontjs.DrawText(getContext(), placingSprite.x + 12, placingSprite.y + 43, placingSprite.actor.name, '#f1f1f1ff', font)\r\n    }\r\n\r\n    getTeams().forEach(team => {\r\n        let units = getUnits(team.name).filter(f => f.placed)\r\n        for (let u in units) {\r\n            units[u].sprite.update(delta)\r\n            let colr = '#f1f1f1cc'\r\n            if (getCurrentUnit() === units[u]) {\r\n                colr = '#f1f1f1ff'\r\n                drawImage('unit-selected', units[u].x * gridDimensions().x, units[u].y * gridDimensions().y)\r\n            }\r\n            units[u].sprite.draw()\r\n            bfontjs.DrawText(getContext(), units[u].sprite.x + 12, units[u].sprite.y + 44, units[u].name, '#000000cc', font)\r\n            bfontjs.DrawText(getContext(), units[u].sprite.x + 12, units[u].sprite.y + 43, units[u].name, colr, font)\r\n        }\r\n    })\r\n\r\n    ctx.restore()\r\n\r\n    if (camera.targetDuration > 0) {\r\n        //parseInt(startVal + (this.anim.destination[param] - startVal) * BezierBlend(this.anim.elapsed / this.anim.duration))\r\n        camera.x = parseInt(camera.targetStartX + (camera.targetX - camera.targetStartX) * BezierBlend(camera.targetElapsed / camera.targetDuration))\r\n        camera.y = parseInt(camera.targetStartY + (camera.targetY - camera.targetStartY) * BezierBlend(camera.targetElapsed / camera.targetDuration))\r\n        camera.targetElapsed += delta\r\n        if (camera.targetElapsed >= camera.targetDuration) {\r\n            camera.targetDuration = 0\r\n            camera.x = camera.targetX\r\n            camera.y = camera.targetY\r\n        }\r\n    }\r\n}\r\n\r\nfunction gridDimensions() {\r\n    return { x: gridSize, y: gridSize }\r\n}\r\n\r\nfunction buildMap() {\r\n    var tiles = []\r\n    var teamATiles = []\r\n    var teamBTiles = []\r\n\r\n    for (let y = 0; y < height; y++) {\r\n        for (let x = 0; x < width; x++) {\r\n            tiles.push([x, y])\r\n            \r\n            if (triangleContains(0, parseInt(height / 2) - parseInt(startAreaHeight / 2), startAreaWidth, parseInt(height / 2), 0, parseInt(height / 2) + parseInt(startAreaHeight / 2), x, y)) {\r\n                teamATiles.push([x, y])\r\n            }\r\n            //if (triangleContains(width, parseInt(height / 2) - parseInt(startAreaHeight / 2), width - startAreaWidth, parseInt(height / 2), width, parseInt(height / 2) + parseInt(startAreaHeight / 2), x, y)) {\r\n            if (triangleContains(width, parseInt(height / 2) - parseInt(startAreaHeight / 2), width - startAreaWidth, parseInt(height / 2), width, parseInt(height / 2) + parseInt(startAreaHeight / 2), x, y)) {\r\n                teamBTiles.push([x, y])\r\n            }\r\n        }\r\n    }\r\n    map = {\r\n        tiles: tiles, teamA: teamATiles, teamB: teamBTiles, allTiles: tiles\r\n    }\r\n    map.hasTile = (x, y) => {\r\n        return map.tiles.filter(f => f[0] === x && f[1] === y).length > 0\r\n    }\r\n    map.hasTeamATile = (x, y) => {\r\n        return map.teamA.filter(f => f[0] === x && f[1] === y).length > 0\r\n    }\r\n    map.hasTeamBTile = (x, y) => {\r\n        return map.teamB.filter(f => f[0] === x && f[1] === y).length > 0\r\n    }\r\n    map.tiles = map.tiles.filter(f => !map.teamA.filter(a => a[0] === f[0] && a[1] === f[1]).length && !map.teamB.filter(b => f[0] === b[0] && f[1] === b[1]).length)\r\n    console.log('map =', map)\r\n    return map\r\n}\r\n\r\nexport { buildMap, drawMap, gridDimensions, addUnit, setPlacingSprite, getPlacingSprite, getUnits, getUnit, getCamera, setPotentialMoves, clearPotentialMoves, getPotentialMoves }","import { gridDimensions } from \"./map.js\"\r\nimport { buildSprite } from \"./sprites.js\"\r\nimport { getContext } from \"./images.js\"\r\n\r\nclass Actor {\r\n    constructor(params) {\r\n        this.team = params.team\r\n        this.name = params.name\r\n        this.character = params.character\r\n        this.placed = false\r\n        this.sprite = buildSprite(params.spriteName, params.x ? params.x : 0, params.y ? params.y : 0, 'idle')\r\n        this.sprite.actor = this\r\n    }\r\n\r\n    MapPosition() {\r\n        return { x: parseInt(this.sprite.x / gridDimensions().x), y: parseInt(this.sprite.y / gridDimensions().y) }\r\n    }\r\n\r\n    Position() {\r\n        return { x: this.sprite.x, y: this.sprite.y }\r\n    }\r\n\r\n    MapCoords() {\r\n        return { x: parseInt(this.sprite.x / gridDimensions().x), y: parseInt(this.sprite.y / gridDimensions().y) }\r\n    }\r\n\r\n    Draw(delta) {\r\n        this.sprite.draw(delta)\r\n    }\r\n}\r\n\r\nexport default Actor\r\n","import maps from './keymapping.json'\r\n\r\nvar listening = false\r\n\r\nfunction handlerPressed (button) {\r\n  setState(button, true)\r\n}\r\n\r\nfunction handlerReleased (button) {\r\n  setState(button, false)\r\n  if (callbacks[button]) {\r\n    callbacks[button](button)\r\n  }\r\n}\r\n\r\nfunction GetInputKeys(inputType) {\r\n  inputType = inputType.toLowerCase()\r\n  return Object.keys(maps[inputType])\r\n}\r\n\r\nfunction GetInputValue(inputType, key) {\r\n  inputType = inputType.toLowerCase()\r\n  return maps[inputType][key]\r\n}\r\n\r\nvar inputState = {}\r\nvar callbacks = {}\r\n\r\nvar enabled = [ 'keyboard', 'gamepad' ]\r\n\r\nfunction setState(button, value) {\r\n  inputState[button] = value\r\n}\r\n\r\nfunction getState(button) {\r\n  if (!listening) {\r\n    return false\r\n  }\r\n  return inputState[button] ? inputState[button] : false\r\n}\r\n\r\nfunction listenerKeyDown(e) {\r\n  if (!listening) {\r\n    return\r\n  }\r\n  let inputs = Object.keys(maps.keyboard)\r\n  for (let i in inputs) {\r\n    if (e.key === maps.keyboard[inputs[i]]) {\r\n      handlerPressed(inputs[i])\r\n    }\r\n  }\r\n}\r\n\r\nfunction listenerKeyUp(e) {\r\n  if (!listening) {\r\n    return\r\n  }\r\n  let inputs = Object.keys(maps.keyboard)\r\n  for (let i in inputs) {\r\n    if (e.key === maps.keyboard[inputs[i]]) {\r\n      handlerReleased(inputs[i])\r\n    }\r\n  }\r\n}\r\n\r\nfunction init() {\r\n  inputState = {}\r\n  callbacks = {}\r\n  if (enabled.includes('keyboard')) {\r\n    window.removeEventListener('keydown', listenerKeyDown)\r\n    window.removeEventListener('keyup', listenerKeyUp)\r\n    window.addEventListener('keydown', listenerKeyDown)\r\n    window.addEventListener(\"keyup\", listenerKeyUp)\r\n  }\r\n  if (enabled.includes('gamepad')) {\r\n    gameControl.on('connect', function(gamepad) {\r\n      let inputs = Object.keys(maps.gamepad)\r\n      for (let i in inputs) {\r\n        gamepad.on(maps.gamepad[inputs[i]], () => {\r\n          \r\n        }).after(maps.gamepad[inputs[i]], () => {\r\n          handlerReleased(inputs[i])\r\n        })\r\n      }\r\n    })\r\n  }\r\n  listening = false\r\n}\r\n\r\ninit()\r\n\r\nvar input = {\r\n  listen: () => {\r\n    listening = true\r\n  },\r\n  unlisten: () => {\r\n    listening = false\r\n  },\r\n  released: (button, method) => {\r\n    callbacks[button] = method\r\n  }\r\n}\r\n\r\nexport default input\r\nexport { GetInputKeys, GetInputValue }","import { Pipeline } from './pipeline.js'\r\n\r\nimport characters from \"./characters.json\"\r\n\r\nclass Character {\r\n    constructor(name) {\r\n        // data property holds base class data from json\r\n        try {\r\n            this.data = characters.filter(f => f.name === name)[0]\r\n            this.data.maxHp = this.data.hp\r\n            this.name = this.data.name\r\n            this.equipment = []\r\n        } catch {\r\n            this.data = {}\r\n            console.error(`Could not locate template for ${name}.`)\r\n        }\r\n\r\n        // effectModifiers property holds active effect modifiers.\r\n        this.effectModifiers = {}\r\n\r\n        // Active effect modifiers, evaluated each phase and removed when\r\n        // expired.\r\n        this.effects = []\r\n    }\r\n\r\n    EquipItem(item) {\r\n        \r\n    }\r\n\r\n    /**\r\n     * Iterate over the effects currently active on this character and\r\n     * do housekeeping (decrement ttl, removing ttl = 0, etc.)\r\n     */\r\n    UpdateEffects() {\r\n        for (let e in this.effects) {\r\n            let effect = this.effects[e]\r\n            if (effect.ttl) {\r\n                effect.ttl--\r\n            }\r\n            if (effect.ttl <= 0) {\r\n                this.RemoveEffectModifier(effect)\r\n            }\r\n        }\r\n        this.effects = this.effects.filter(f => f.ttl > 0)\r\n    }\r\n\r\n    AddEffect(effect) {\r\n        if (effect.ttl) {\r\n            this.effects.push(effect)\r\n        }\r\n        if (effect.attribute !== undefined) {\r\n            this.AddEffectModifier(effect.attribute, effect.amount)\r\n        }\r\n    }\r\n    RemoveEffectModifier(effect) {\r\n        if (effect.attribute !== undefined) {\r\n            this.AddEffect(effect.attribute, effect.amount * -1)\r\n        }\r\n    }\r\n\r\n    AddEffectModifier(attribute, amount) {\r\n        if (this.effectModifiers[attribute] === undefined) {\r\n            this.effectModifiers[attribute] = 0\r\n        }\r\n        this.effectModifiers[attribute] += amount\r\n    }\r\n\r\n    EffectModifier(attribute) {\r\n        if (this.effectModifiers[attribute] !== undefined) {\r\n            return this.effectModifiers[attribute]\r\n        }\r\n        return 0\r\n    }\r\n\r\n    Name() {\r\n        return this.data.name\r\n    }\r\n\r\n    Cost() {\r\n        return this.data.Cost + this.EffectModifier('cost')\r\n    }\r\n\r\n    EquipmentAndAbilities(eqab) {\r\n        if (eqab !== undefined) {\r\n            this.data.equipAbilities = eqab\r\n        }\r\n        return this.data.equipAbilities + this.EffectModifier('equipAbilities')\r\n    }\r\n\r\n    GunnerySkill() {\r\n        return this.data.gunnerySkill + this.EffectModifier('gunnerySkill')\r\n    }\r\n\r\n    MeleeSkill() {\r\n        return this.data.meleeSkill + this.EffectModifier('meleeSkill')\r\n    }\r\n\r\n    Speed() {\r\n        return this.data.speed + this.EffectModifier('speed')\r\n    }\r\n\r\n    Hp() {\r\n        return this.data.hp + this.EffectModifier('hp')\r\n    }\r\n\r\n    MaxHp() {\r\n        return this.data.maxHp + this.EffectModifier('maxHp')\r\n    }\r\n}\r\n\r\n export { Character }","import { getImage } from '../images.js'\r\nimport characters from '../characters.json'\r\nimport menus from './menus.json'\r\nimport { Character } from '../character.js'\r\nimport { ChangeMenu } from '../menuScene.js'\r\n\r\nvar squad = []\r\nvar stars = 16\r\n\r\nlet menu = menus.filter(f => f.id === 'GameSetup')[0]\r\n\r\nfunction hireCharacter(name) {\r\n    let char = new Character(name)\r\n    if (stars - char.Cost() >= 0) {\r\n        squad.push(char)\r\n        stars -= char.Cost()\r\n    }\r\n}\r\n\r\nfunction fireCharacter(name) {\r\n    let char = new Character(name)\r\n    let charIndex = squad.findIndex(f => f.name === name)\r\n    if (charIndex > -1) {\r\n        stars += char.Cost()\r\n        squad = squad.filter((f, i) => i !== charIndex)\r\n    }\r\n}\r\n\r\nfunction onUpdate(ui) {\r\n    let paramsTealFrame = { innerRect: { x: 6, y: 8, w: 53 , h: 47 }, type: 'ButtonImage', color: '#122020ff', highlight: '#122020ff', bgcolor: '#000000cc', image: getImage('ui-frame-teal'), imageDown: getImage('ui-frame-teal'), imageHover: getImage('ui-frame-teal') }\r\n    let paramsTealButton = { innerRect: { x: 5, y: 4, w: 9, h: 2 }, type: 'ButtonImage', color: '#122020ff', highlight: '#fa6a0aff', bgcolor: '#000000cc', image: getImage('ui-button-teal'), imageDown: getImage('ui-button-teal-down'), imageHover: getImage('ui-button-teal') }\r\n    let paramsGreyButton = { innerRect: { x: 5, y: 4, w: 9, h: 2 }, type: 'ButtonImage', color: '#122020ff', highlight: '#122020ff', bgcolor: '#000000cc', image: getImage('ui-button-grey'), imageDown: getImage('ui-button-grey-down'), imageHover: getImage('ui-button-grey') }\r\n    let paramsLabel = { type: 'Element', color: '#cacacaff', highlight: '#cacacaff', bgcolor: '#00000000' }\r\n    let frameMenu = ui.Element({ id: 'frameMenu', rect: {x: 5, y: 28, w: 128, h: 160 }, ...paramsTealFrame,\r\n        anim: {\r\n            curve: 'bezier',\r\n            duration: 100,\r\n            params: {\r\n                y: -128\r\n            },\r\n            onComplete: (el) => { el }\r\n        }\r\n    })\r\n\r\n    let statsMenu = ui.Element({ id: 'frameStats', rect: {x: 135, y: 28, w: 128, h: 110 }, ...paramsTealFrame,\r\n        anim: {\r\n            curve: 'bezier',\r\n            duration: 100,\r\n            params: {\r\n                x: 260\r\n            },\r\n            onComplete: (el) => { el }\r\n        }\r\n    })\r\n\r\n    let buttonsMenu = ui.Element({ id: 'frameButtons', rect: {x: 135, y: 156, w: 128, h: 32 }, ...paramsTealFrame,\r\n        anim: {\r\n            curve: 'bezier',\r\n            duration: 100,\r\n            params: {\r\n                y: 190\r\n            },\r\n            onComplete: (el) => { el }\r\n        }\r\n    })\r\n\r\n    let classDescription = squad.length === 0 ? 'Hire your squad and click next\\nto continue.' : `Squad Size: ${squad.length}` + (stars === 0 ? `\\nNo stars remaining.\\nClick 'Next'.` : '')\r\n    if (!frameMenu.anim) {\r\n        let lblStars = ui.Element({ id: 'lblMenuStars', text: `${stars}`, rect: { x: 98, y: 10, w: 64, h: 11 }, ...paramsLabel}, frameMenu)\r\n        ui.Element({ id: 'imgStars', type: 'Image', x: 108, y: 8, image: getImage('star-icon') }, frameMenu)\r\n        let dy = 19\r\n        for (let o in menu.Options) {\r\n            let option = menu.Options[o].text\r\n            let name = option.split(' ')[0]\r\n            let character = characters.filter(f => f.name === name)[0]\r\n            option = option.replace('{0}', squad.filter(f => f.name === name).length)\r\n            let el = ui.Element({ id: 'lblMenu' + o, text: option, rect: {x: 16, y: dy + 2, w: 76, h: 14}, ...paramsLabel }, frameMenu)\r\n            let elAdd = ui.Element({ id: 'lblMenuAdd' + o, text: '+', rect: {x: 94, y: dy, w: 14, h: 14}, ...paramsGreyButton }, frameMenu)\r\n            if (elAdd.Clicked()) {\r\n                hireCharacter(name)\r\n            }\r\n            let elRemove = ui.Element({ id: 'lblMenuRem' + o, text: '-', rect: {x: 109, y: dy, w: 14, h: 14}, ...paramsGreyButton }, frameMenu)\r\n            if (elRemove.Clicked()) {\r\n                fireCharacter(name)\r\n            }\r\n\r\n            if (el.Hover() || elAdd.Hover() || elRemove.Hover()) {\r\n                classDescription = [\r\n                    `${name}`, `Cost: ${character.Cost}`, `Melee Skill: ${character.meleeSkill}`, `Gunnery Skill: ${character.gunnerySkill}`, `Speed: ${character.speed}`\r\n                    , `HP: ${character.speed}`, `Equipment/Abilities`, `Points: ${character.equipAbilities}`\r\n                ].join('\\n')\r\n            }\r\n\r\n            dy += 15\r\n        }\r\n    }\r\n\r\n    if (!buttonsMenu.anim) {\r\n        let btnNext = ui.Element({ id: 'btnNext', text: 'Next', rect: { x: 72, y: 8, w: 50, h: 16 }, ...paramsTealButton }, buttonsMenu)\r\n        if (btnNext.Hover()) {\r\n            classDescription = 'Accept squad and move\\non to outfitting equipment\\nand abilities.'\r\n        }\r\n        if (btnNext.Clicked()) {\r\n            transitionOut(frameMenu, statsMenu, buttonsMenu)\r\n        }\r\n    }\r\n\r\n    if (!statsMenu.anim) {\r\n        if (classDescription.length) {\r\n            let lblTooltip = ui.Element({ id: 'lblTooltip', text: classDescription, rect: { x: 8, y: 8, w: 110, h: 100 }, ...paramsLabel}, statsMenu)\r\n        }\r\n    }\r\n\r\n    function transitionOut(frameMenu, statsMenu, buttonsMenu) {\r\n            let toFrame = { ...frameMenu.Rect() }\r\n            toFrame.x = -130\r\n            frameMenu.Animate(190, { ...frameMenu.Rect() }, toFrame)\r\n            let toStats = { ...statsMenu.Rect() }\r\n            toStats.x = 320\r\n            statsMenu.Animate(190, { ...statsMenu.Rect() }, toStats)\r\n            let toButtons = buttonsMenu.Rect()\r\n            toButtons.y = 200\r\n            buttonsMenu.Animate(200, { ...buttonsMenu.Rect() }, toButtons, () => ChangeMenu('SetupEquipment'))\r\n    }\r\n}\r\n\r\nexport { onUpdate, squad }\r\n","import { getImage } from '../images.js'\r\nimport characters from '../characters.json'\r\nimport menus from './menus.json'\r\nimport { Character } from '../character.js'\r\nimport { ChangeMenu } from '../menuScene.js'\r\nimport { squad } from './gameSetup.js'\r\nimport equipment from '../equipment.json'\r\nimport { Start } from '../main.js'\r\nimport { buildMap } from '../map.js'\r\n\r\nlet selIndex = -1\r\nlet equip = []\r\nlet character = null\r\n\r\nfunction selCharacter(index) {\r\n    if (index < 0 || index > squad.length - 1) {\r\n        return\r\n    }\r\n    selIndex = index\r\n    character = squad[selIndex]\r\n    equip = getEquipment(squad[selIndex].name)\r\n}\r\n\r\nfunction getEquipment(characterType) {\r\n    return equipment.filter(f => f.characters.filter(c => c === characterType).length)\r\n}\r\n\r\nfunction onUpdate(ui) {\r\n    let paramsGreyListImage = {\r\n        bgcolor: '#122020ff',\r\n        color: '#cacacaff',\r\n        bgcolorSelected: '#122020ff',\r\n        colorSelected: '#f1f1f1ff',\r\n        highlight: '#f1f1f1ff',\r\n        scrollbarWidth: 9,\r\n        scrollAreaImage: {\r\n            image: getImage('ui-button-scroll-area'),\r\n            hover: getImage('ui-button-scroll-area'),\r\n            pressed: getImage('ui-button-scroll-area'),\r\n            innerRect: { x: 3, y: 4, w: 7, h: 40 }\r\n        },\r\n        caratImage: {\r\n            image: getImage('ui-button-carat'),\r\n            hover: getImage('ui-button-carat-hover'),\r\n            pressed: getImage('ui-button-carat-pressed')\r\n        },\r\n        upImage: {\r\n            image: getImage('ui-button-scroll-up'),\r\n            hover: getImage('ui-button-scroll-up-hover'),\r\n            pressed: getImage('ui-button-scroll-up-pressed')\r\n        },\r\n        downImage: {\r\n            image: getImage('ui-button-scroll-down'),\r\n            hover: getImage('ui-button-scroll-down-hover'),\r\n            pressed: getImage('ui-button-scroll-down-pressed')\r\n        }\r\n    }\r\n\r\n    let paramsGreyListImageMulti = { ...paramsGreyListImage, multiSelect: true,\r\n        checkboxImage: {\r\n            image: getImage('ui-checkbox'),\r\n            hover: getImage('ui-checkbox-hover'),\r\n            pressed: getImage('ui-checkbox-pressed')\r\n        }\r\n    }\r\n    paramsGreyListImage.bgcolorSelected = '#5daf8dff'\r\n    paramsGreyListImage.colorSelected = '#122020ff'\r\n\r\n    let paramsTealFrame = { innerRect: { x: 6, y: 8, w: 53 , h: 47 }, type: 'ButtonImage', color: '#122020ff', highlight: '#122020ff', bgcolor: '#000000cc', image: getImage('ui-frame-teal'), imageDown: getImage('ui-frame-teal'), imageHover: getImage('ui-frame-teal') }\r\n    let paramsTealButton = { innerRect: { x: 5, y: 4, w: 9, h: 2 }, type: 'ButtonImage', color: '#122020ff', highlight: '#fa6a0aff', bgcolor: '#000000cc', image: getImage('ui-button-teal'), imageDown: getImage('ui-button-teal-down'), imageHover: getImage('ui-button-teal') }\r\n    let paramsGreyButton = { innerRect: { x: 5, y: 4, w: 9, h: 2 }, type: 'ButtonImage', color: '#122020ff', highlight: '#122020ff', bgcolor: '#000000cc', image: getImage('ui-button-grey'), imageDown: getImage('ui-button-grey-down'), imageHover: getImage('ui-button-grey') }\r\n    let paramsLabel = { type: 'Element', color: '#cacacaff', highlight: '#cacacaff', bgcolor: '#00000000' }\r\n    let frameMenu = ui.Element({ id: 'frameMenuSquad', rect: {x: 5, y: 8, w: 72, h: 110 }, ...paramsTealFrame,\r\n        anim: {\r\n            curve: 'bezier',\r\n            duration: 100,\r\n            params: {\r\n                x: -100\r\n            },\r\n            onComplete: (el) => { el }\r\n        }\r\n    })\r\n    \r\n    if (!frameMenu.anim) {\r\n        let eqabMenu = ui.Element({ id: 'eqabMenu', rect: {x: 79, y: 8, w: 235, h: 110 }, ...paramsTealFrame,\r\n            anim: {\r\n                curve: 'bezier',\r\n                duration: 100,\r\n                params: {\r\n                    y: -140\r\n                },\r\n                onComplete: (el) => { el }\r\n            }\r\n        })\r\n        if (!eqabMenu.anim) {\r\n            let el = ui.Element({ id: 'charList', type: 'ListImage', list: squad.map(m => m.name), rect: {x: 8, y: 9, w: 55, h: 90 }, ...paramsGreyListImage}, frameMenu)\r\n            if (el.currentItem !== null && el.currentItem !== selIndex) {\r\n                selCharacter(el.currentItem)\r\n                if (listEquip) {\r\n                    listEquip.selectedList = []\r\n                }\r\n            }\r\n            if (selIndex > -1) {\r\n                ui.Element({ id: 'charEquip', text: 'Equipment:', rect: { x: 8, y: 8, w: 64, h: 9 }}, eqabMenu)\r\n                var listEquip = ui.Element({ id: 'charEquipList', type: 'ListImage', list: equip.map(m => m.name), rect: {x: 8, y: 19, w: 128, h: 80 }, ...paramsGreyListImageMulti}, eqabMenu)\r\n                let eq = equip[listEquip.hoverItem]\r\n                if (eq) {\r\n                    let classDescription = []\r\n                    if (eq.speed) {\r\n                        classDescription.push(`Speed ${eq.speed}`)\r\n                    }\r\n                    if (eq.range > 0) {\r\n                        classDescription.push(`Gunnery ${eq.damage}`)\r\n                        classDescription.push(`Range ${eq.range}`)\r\n                    } else {\r\n                        classDescription.push(`Melee ${eq.damage}`)\r\n                    }\r\n                    classDescription.push(`Cost ${eq.cost}`)\r\n                    ui.Element({ id: 'charEquipDescription', text: classDescription.join('\\n'), rect: { x: 140, y: 18, w: 64, h: 9 }}, eqabMenu)              \r\n                }\r\n            }\r\n\r\n            let buttonsMenu = ui.Element({ id: 'frameButtons', rect: {x: 165, y: 160, w: 128, h: 32 }, ...paramsTealFrame,\r\n                anim: {\r\n                    curve: 'bezier',\r\n                    duration: 100,\r\n                    params: {\r\n                        y: 190\r\n                    },\r\n                    onComplete: (el) => { el }\r\n                }\r\n            })\r\n            if (!buttonsMenu.anim) {\r\n                let btnNext = ui.Element({ id: 'btnNext', text: 'Next', rect: { x: 72, y: 8, w: 50, h: 16 }, ...paramsTealButton }, buttonsMenu)\r\n                if (btnNext.Clicked()) {\r\n                    equip = []\r\n                    transitionOut(frameMenu, eqabMenu, buttonsMenu, () => {\r\n                        Start(squad, buildMap())\r\n                    })\r\n                }\r\n                let btnPrev = ui.Element({ id: 'btnPrev', text: 'Back', rect: { x: 8, y: 8, w: 50, h: 16 }, ...paramsGreyButton }, buttonsMenu)\r\n                if (btnPrev.Clicked()) {\r\n                    equip = []\r\n                    transitionOut(frameMenu, eqabMenu, buttonsMenu, () => ChangeMenu('GameSetup'))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function transitionOut(frameMenu, eqabMenu, buttonsMenu, onComplete) {\r\n        let toButtons = buttonsMenu.Rect()\r\n        toButtons.y = 200\r\n        buttonsMenu.Animate(200, { ...buttonsMenu.Rect() }, toButtons, onComplete)\r\n    }\r\n}\r\n\r\nexport { onUpdate }\r\n","import input, { GetInputKeys, GetInputValue } from './input.js'\r\nimport { getContext, drawImage, getImage } from \"./images.js\"\r\nimport { Start, pointer } from './main.js'\r\nimport { Character } from './character.js'\r\nimport { buildSprite } from './sprites.js'\r\n\r\n//import menus from './menus.json'\r\nimport equipment from './equipment.json'\r\nimport { buildMap } from './map.js'\r\nimport { addTeam } from './teams.js'\r\n\r\nimport { onUpdate as onGameSetupUpdate } from './menus/gameSetup.js'\r\nimport { onUpdate as onEquipSetupUpdate } from './menus/equipSetup.js'\r\n\r\nlet imu = null\r\n\r\nlet ctx = null\r\n\r\nvar stars = 16\r\n\r\nvar squad = []\r\n\r\nvar background = buildSprite('background', 0, 0, 'idle')\r\n\r\nvar menu = null\r\nvar menuItems = []\r\nvar menuItem = {}\r\nvar currentMenuId = 'Main'\r\nvar currentMenuItem = 'Start'\r\nvar currentMenuColumn = 0\r\n\r\nvar currentCharacterEquip = null\r\n\r\n// var menuMethods = {\r\n//     callback_OnRenderStars: (text, replacements) => {\r\n//         return [stars.toString()]\r\n//     },\r\n//     callback_OnRenderHireSquad: (text, replacements) => {\r\n//         return [squad.length]\r\n//     },\r\n\r\n//     callback_OnRenderCharacter: (text, replacements) => {\r\n//         let name = text.split(' ')[0].replace('>', '')\r\n//         return [(squad.filter(f => f.name === name).length)]\r\n//     },\r\n\r\n//     callback_HireCharacter: (text) => {\r\n//         let name = text.split(' ')[0].replace('>', '')\r\n//         let char = new Character(name)\r\n//         if (stars - char.Cost() >= 0) {\r\n//             squad.push(char)\r\n//             stars -= char.Cost()\r\n//         }\r\n//     },\r\n\r\n//     callback_StartGame: () => {\r\n//         buildMap()\r\n//         Start(squad)\r\n//     },\r\n\r\n//     callback_SelectCharacterEquip: (text) => {\r\n//         currentCharacterEquip = text\r\n//     },\r\n\r\n//     callback_SetupEquipment: (text) => {\r\n//         ChangeMenu('SetupEquipment')\r\n//         let menu = menus.filter(f => f.id === 'SetupEquipment')[0]\r\n//         let nextIndex = menu.Options.findIndex(f => f.text === 'Next')\r\n//         menu.Options = [\r\n//             ...squad.map((m, i) => {\r\n//             return {\r\n//                 text: `${i + 1}. ${m.name}`,\r\n//                 onSelect: 'callback_SelectCharacterEquip',\r\n//                 width: 160,\r\n//                 column: 0\r\n//             }}),\r\n//             menu.Options[nextIndex]\r\n//         ]\r\n//     }\r\n// }\r\n\r\nlet menuDx = 39\r\nlet menuDy = 42\r\n\r\nfunction Action(actionId) {\r\n    if (actionId.includes('callback_')) {\r\n        return menuMethods[actionId] ? menuMethods[actionId] : () => {}\r\n    } else if (actionId.includes('menu_')) {\r\n        let action = actionId.split('_')\r\n        ChangeMenu(action[1])\r\n    }\r\n    return () => {}\r\n}\r\n\r\nfunction ChangeMenu(id) {\r\n    currentMenuColumn = 0\r\n    currentMenuId = id\r\n    imu.RemoveElements()\r\n\r\n    if (id === 'GameSetup') {\r\n        imu.onUpdate = onGameSetupUpdate\r\n    } if (id === 'SetupEquipment') {\r\n        imu.onUpdate = onEquipSetupUpdate\r\n    }\r\n}\r\n\r\n// function GetMenuItems(menuId) {\r\n//     let menu = GetMenu(menuId)\r\n//     let items = menu.Options.filter(f => f.onSelect && (f.column === undefined || f.column === currentMenuColumn))\r\n//     if (items.length > 0 && currentMenuItem === '') {\r\n//         currentMenuItem = items[0].text\r\n//     }\r\n//     return items\r\n// }\r\n\r\n// function GetMenu(id) {\r\n//     try {\r\n//         return menus.filter(f => f.id === id)[0]\r\n//     } catch { return null }\r\n// }\r\n\r\nfunction StartMenu(id) {\r\n    input.listen()\r\n\r\n    input.released('moveDown', () => {\r\n        menu = GetMenu(currentMenuId)\r\n        menuItems = GetMenuItems(currentMenuId) //menu.Options.filter(f => f.onSelect)\r\n        menuItem = menuItems.filter(f => f.text === currentMenuItem)[0]\r\n        let index = menuItems.findIndex(f => f.text === currentMenuItem)\r\n        index++\r\n        if (index >= menuItems.length) {\r\n            index = 0\r\n        }\r\n        currentMenuItem = menuItems[index].text\r\n    })\r\n    input.released('moveUp', () => {\r\n        menu = GetMenu(currentMenuId)\r\n        menuItems = GetMenuItems(currentMenuId)//menu.Options.filter(f => f.onSelect)\r\n        menuItem = menuItems.filter(f => f.text === currentMenuItem)[0]\r\n        let index = menuItems.findIndex(f => f.text === currentMenuItem)\r\n        index--\r\n        if (index < 0) {\r\n            index = menuItems.length - 1\r\n        }\r\n        currentMenuItem = menuItems[index].text\r\n    })\r\n    input.released('attack', () => {\r\n        menu = GetMenu(currentMenuId)\r\n        menuItems = GetMenuItems(currentMenuId) //menu.Options.filter(f => f.onSelect)\r\n        try {\r\n            menuItem = menuItems.filter(f => f.text === currentMenuItem)[0]    \r\n            if (menuItem.onSelect) {\r\n                Action(menuItem.onSelect)(menuItem.text)\r\n            }\r\n        } catch {}\r\n    })\r\n}\r\n\r\nfunction drawFrame(delta) {\r\n    if (!ctx) {\r\n        ctx = getContext()\r\n    }\r\n    background.draw(0, 0)\r\n    background.update(delta)\r\n    drawUI(delta)\r\n}\r\n\r\nfunction OnRender(text, onRender) {\r\n    let arr = text.split(/{[0-9]}/)\r\n    let replacements = []\r\n    for (let r in arr) {\r\n        replacements.push(`{${r}}`)\r\n    }\r\n    let values = Action(onRender)(text, arr)\r\n    for (let v in values) {\r\n        text = text.replace(replacements[v], values[v])\r\n    }\r\n    return text\r\n}\r\n\r\nfunction drawUI(delta) {\r\n    if (!imu) {\r\n        imu = new imui.ImUI(ctx.canvas)\r\n        imu.font = font\r\n\r\n        let paramsTealFrame = { innerRect: { x: 6, y: 8, w: 53 , h: 47 }, type: 'ButtonImage', color: '#122020ff', highlight: '#122020ff', bgcolor: '#000000cc', image: getImage('ui-frame-teal'), imageDown: getImage('ui-frame-teal'), imageHover: getImage('ui-frame-teal') }\r\n        let paramsTealButton = { innerRect: { x: 5, y: 4, w: 9, h: 2 }, type: 'ButtonImage', color: '#122020ff', highlight: '#fa6a0aff', bgcolor: '#000000cc', image: getImage('ui-button-teal'), imageDown: getImage('ui-button-teal-down'), imageHover: getImage('ui-button-teal') }\r\n\r\n        imu.onUpdate = (ui) => {\r\n            let frameMenu = ui.Element({ id: 'frameMenu', rect: {x: 38, y: 28, w: 97, h: 96}, ...paramsTealFrame,\r\n                anim: {\r\n                    curve: 'bezier',\r\n                    duration: 100,\r\n                    params: {\r\n                        w: 12, h: 12\r\n                    },\r\n                    onComplete: (el) => { el }\r\n                }\r\n            })\r\n\r\n            if (!frameMenu.anim) {\r\n                let el = ui.Element({ id: 'lblMenu', text: 'Start', rect: {x: 6, y: 10, w: 86, h: 19}, ...paramsTealButton, }, frameMenu)\r\n                if (el.Clicked()) {\r\n                    // frameMenu.anim = {\r\n                    //     curve: 'bezier',\r\n                    //     duration: 100,\r\n                    //     params: {x: 38, y: 28, w: 97, h: 96},\r\n                    //     onComplete: (el) => { ChangeMenu('GameSetup') }\r\n                    // }\r\n                    // frameMenu.rect = {x: -116, y: 10, w: 86, h: 19}\r\n                    frameMenu.Animate(100, frameMenu.Rect(),  {x: -116, y: 28, w: 12, h: 12 }, () => ChangeMenu('GameSetup'))   \r\n                }\r\n            }\r\n        }\r\n    }\r\n    imu.Draw()\r\n}\r\n\r\nexport { drawFrame, StartMenu, ChangeMenu }","import images from './images.js'\r\nimport sfx from './sfx.js'\r\nimport music from './music.js'\r\nimport sprites from './sprites.js'\r\nimport Actor from './actor.js'\r\nimport { setContext, loadAllImages } from './images.js'\r\nimport { drawFrame as drawMain, StartScene } from './mainScene.js'\r\nimport { drawFrame as drawMainMenu, StartMenu } from './menuScene.js'\r\nimport { set, setDictionary } from './grammar.js'\r\nimport input from './input.js'\r\nimport { addTeam, currentTeam } from './teams.js'\r\nimport { addUnit, gridDimensions } from './map.js'\r\n\r\nvar dateNow = Date.now()\r\nvar dateThen = Date.now()\r\n\r\nvar targetDelta = 16 // Roughly 60fps by default\r\n\r\nvar currentScene = 'mainMenu'\r\n\r\nvar pointer = { x: 0, y: 0 }\r\n\r\nvar gameMap = null\r\n\r\nfunction getPointer() {\r\n    return { ...pointer, cellX: () => parseInt(pointer.x / gridDimensions().x), cellY: () => parseInt(pointer.y / gridDimensions().y) }\r\n}\r\n\r\nfunction setTargetFrameRate(target) {\r\n    targetDelta = parseInt(1000 / target) // Number of ms divided by target fps\r\n}\r\n\r\nfunction requestAnimationFrame() {\r\n    dateNow = Date.now()\r\n    let delta = dateNow - dateThen\r\n    if (delta >= targetDelta) {\r\n        drawFrame(delta)\r\n        dateThen = dateNow\r\n    }\r\n    window.requestAnimationFrame(requestAnimationFrame)\r\n}\r\n\r\n/**\r\n * Draws the animation frame.\r\n * @param {number} delta Number of ms since last frame.\r\n */\r\nfunction drawFrame(delta) {\r\n    if (currentScene === 'mainMenu') {\r\n        drawMainMenu(delta)\r\n    } else if (currentScene === 'main') {\r\n        drawMain(delta)\r\n    }\r\n}\r\n\r\nasync function StartMainMenu() {\r\n    await loadAllImages()\r\n\r\n    let canvas = document.getElementById('maincanvas')\r\n    let ratio = canvas.width / canvas.height\r\n    canvas.style.height = window.innerHeight + 'px'\r\n    canvas.style.width = window.innerHeight * ratio + 'px'\r\n    window.addEventListener('resize', () => {\r\n        canvas.style.height = window.innerHeight + 'px'\r\n        canvas.style.width = window.innerHeight * ratio + 'px'\r\n      })\r\n        \r\n    canvas.addEventListener('mousemove', (e) => {\r\n        pointer.x = parseInt((e.clientX - canvas.offsetLeft) * (canvas.width / parseInt(canvas.style.width))) - 2\r\n        pointer.y = parseInt((e.clientY - canvas.offsetTop) * (canvas.height / parseInt(canvas.style.height)))\r\n    })\r\n\r\n    canvas.addEventListener('contextmenu', (e) => {\r\n        e.preventDefault()\r\n        return false\r\n    })     \r\n\r\n    setTargetFrameRate(60)\r\n    setContext(canvas.getContext('2d'))\r\n\r\n    StartMenu()\r\n\r\n    window.requestAnimationFrame(requestAnimationFrame)\r\n}\r\n\r\nasync function Start(squad, map) {\r\n\r\n    gameMap = map\r\n\r\n    input.unlisten()\r\n    let canvas = document.getElementById('maincanvas')\r\n    currentScene = 'main'\r\n\r\n    addTeam('Team Alpha', '2d10')\r\n    addTeam('Team Bravo', '1d1')\r\n    \r\n    for (let s in squad) {\r\n        addUnit('Team Alpha', squad[s], false)\r\n        addUnit('Team Bravo', JSON.parse(JSON.stringify(squad[s])), true)\r\n    }\r\n\r\n    setTargetFrameRate(60)\r\n    setContext(canvas.getContext('2d'))\r\n\r\n    StartScene()\r\n\r\n    window.requestAnimationFrame(requestAnimationFrame)\r\n}\r\n\r\nexport { Start, StartMainMenu, getPointer, pointer, gameMap }"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","ctx","setContext","context","getContext","getImage","name","img","f","length","image","drawImage","x","y","srcRect","flipped","save","scale","w","h","restore","getMsSinceMidnight","d","Date","setHours","buildSprite","pose","onComplete","Error","sprite","frames","framesImage","currentFrame","updateDelta","play","animation","animStartTime","anim","sprPose","default","filter","imageName","sfx","getSfx","offsetx","offsety","async","speed","Promise","resolve","reject","spr","ox","oy","spd","t","mx","my","handler","p","amt","start","end","setTimeout","update","delta","frameDelay","repeat","animDuration","SetAnimation","roll","dice","toLowerCase","includes","dieterm","split","times","min","max","Math","floor","random","teams","teamIndex","phases","phase","addTeam","turnOrderRollDice","team","color","order","homePosition","gridDimensions","push","sort","a","b","getTeam","currentTeam","currentPhase","nextTeam","imu","tooltip","currentUnit","handleAction","units","getUnits","placed","setPlacingSprite","home","getCamera","setTarget","map","width","height","gridSize","gridOpacity","startAreaWidth","startAreaHeight","placingSprite","movementTiles","movementPath","camera","targetX","targetY","targetStartX","targetStartY","targetDuration","targetElapsed","getPotentialMoves","setPotentialMoves","unit","destX","destY","manhattanDistance","q","toX","toY","abs","getSuccessor","dx","dy","s","parent","g","handleMove","tx","ty","tiles","dist","parseFloat","character","Speed","startX","startY","mv","open","closed","successors","index","curr","path","astar","console","log","BezierBlend","cellX","parseInt","cellY","duration","triangleContains","ax","ay","bx","by","cx","cy","det","addUnit","teamName","actor","spriteName","constructor","params","this","MapPosition","Position","MapCoords","Draw","draw","listening","handlerReleased","button","setState","callbacks","inputState","enabled","listenerKeyDown","e","inputs","keys","i","listenerKeyUp","window","removeEventListener","addEventListener","gameControl","on","gamepad","after","listen","unlisten","released","method","Character","data","maxHp","hp","equipment","error","effectModifiers","effects","EquipItem","item","UpdateEffects","effect","ttl","RemoveEffectModifier","AddEffect","undefined","attribute","AddEffectModifier","amount","EffectModifier","Name","Cost","EquipmentAndAbilities","eqab","equipAbilities","GunnerySkill","gunnerySkill","MeleeSkill","meleeSkill","Hp","MaxHp","squad","stars","menu","id","hireCharacter","char","fireCharacter","charIndex","findIndex","onUpdate","ui","paramsTealFrame","innerRect","type","highlight","bgcolor","imageDown","imageHover","paramsTealButton","paramsGreyButton","paramsLabel","frameMenu","Element","rect","curve","el","statsMenu","buttonsMenu","classDescription","text","Options","option","replace","elAdd","Clicked","elRemove","Hover","join","btnNext","toFrame","Rect","Animate","toStats","toButtons","ChangeMenu","transitionOut","selIndex","equip","paramsGreyListImage","bgcolorSelected","colorSelected","scrollbarWidth","scrollAreaImage","hover","pressed","caratImage","upImage","downImage","paramsGreyListImageMulti","multiSelect","checkboxImage","eqabMenu","list","m","currentItem","characterType","characters","c","listEquip","selectedList","eq","hoverItem","range","damage","cost","Start","teamATiles","teamBTiles","teamA","teamB","allTiles","hasTile","hasTeamATile","hasTeamBTile","buildMap","background","menuItems","menuItem","currentMenuId","currentMenuItem","RemoveElements","dateNow","now","dateThen","targetDelta","currentScene","pointer","gameMap","getPointer","setTargetFrameRate","target","requestAnimationFrame","imui","ImUI","canvas","font","clearRect","translate","cellx","celly","ga","globalAlpha","forEach","loc","bfontjs","DrawText","u","colr","drawMap","bg","then","getUnit","slice","toUpperCase","StartMainMenu","promises","loadImage","filename","Image","onload","onerror","src","r","catch","allSettled","loadAllImages","document","getElementById","ratio","style","innerHeight","clientX","offsetLeft","clientY","offsetTop","preventDefault","GetMenu","GetMenuItems","onSelect","actionId","menuMethods","JSON","parse","stringify"],"sourceRoot":""}